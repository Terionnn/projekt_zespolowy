
p_sterownik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800c2c8  0800c2c8  0001c2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c768  0800c768  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c770  0800c770  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200001e4  0800c95c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800c95c  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c33  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002393  00000000  00000000  00032e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000316d  00000000  00000000  000373f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c76  00000000  00000000  0003a55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8f1  00000000  00000000  0004e1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d44  00000000  00000000  000ecb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2ac 	.word	0x0800c2ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c2ac 	.word	0x0800c2ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <stop>:
float direction = 359.5;


//Zatrzymanie silników
void stop()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2110      	movs	r1, #16
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <stop+0x34>)
 8000f66:	f002 fe89 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <stop+0x38>)
 8000f72:	f002 fe83 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <stop+0x3c>)
 8000f7e:	f002 fe7d 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <stop+0x3c>)
 8000f88:	f002 fe78 	bl	8003c7c <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400

08000f9c <turn_right_time>:
    stop();
}

//Obrót w prawo przez określony czas
void turn_right_time(int time)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <turn_right_time+0x48>)
 8000faa:	f002 fe67 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <turn_right_time+0x4c>)
 8000fb6:	f002 fe61 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <turn_right_time+0x4c>)
 8000fc0:	f002 fe5c 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <turn_right_time+0x50>)
 8000fcc:	f002 fe56 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_Delay(time);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fff6 	bl	8002fc4 <HAL_Delay>
    stop();
 8000fd8:	f7ff ffc0 	bl	8000f5c <stop>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020000 	.word	0x40020000

08000ff0 <turn_right>:

//Obrót w prawo (ciągły)
void turn_right()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <turn_right+0x34>)
 8000ffa:	f002 fe3f 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <turn_right+0x38>)
 8001004:	f002 fe3a 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <turn_right+0x38>)
 8001010:	f002 fe34 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <turn_right+0x3c>)
 800101c:	f002 fe2e 	bl	8003c7c <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020800 	.word	0x40020800
 8001028:	40020400 	.word	0x40020400
 800102c:	40020000 	.word	0x40020000

08001030 <turn_left_time>:

//Obrót w lewo przez określony czas
void turn_left_time(int time)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2108      	movs	r1, #8
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <turn_left_time+0x48>)
 800103e:	f002 fe1d 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <turn_left_time+0x4c>)
 800104a:	f002 fe17 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2110      	movs	r1, #16
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <turn_left_time+0x50>)
 8001054:	f002 fe12 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <turn_left_time+0x48>)
 8001060:	f002 fe0c 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_Delay(time);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f001 ffac 	bl	8002fc4 <HAL_Delay>
    stop();
 800106c:	f7ff ff76 	bl	8000f5c <stop>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020400 	.word	0x40020400
 800107c:	40020000 	.word	0x40020000
 8001080:	40020800 	.word	0x40020800

08001084 <turn_left>:

//Obrót w lewo (ciągły)
void turn_left()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2108      	movs	r1, #8
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <turn_left+0x34>)
 800108e:	f002 fdf5 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <turn_left+0x38>)
 8001098:	f002 fdf0 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <turn_left+0x3c>)
 80010a4:	f002 fdea 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <turn_left+0x34>)
 80010b0:	f002 fde4 	bl	8003c7c <HAL_GPIO_WritePin>

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020000 	.word	0x40020000

080010c4 <magnetometer_init>:
{
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 100);
}

void magnetometer_init()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
    uint8_t adres = 0x80;
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x0A, 1, &adres, 1, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	220a      	movs	r2, #10
 80010e0:	211a      	movs	r1, #26
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <magnetometer_init+0x68>)
 80010e4:	f002 ff28 	bl	8003f38 <HAL_I2C_Mem_Write>
    adres = 0x01;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x0B, 1, &adres, 1, HAL_MAX_DELAY);
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	220b      	movs	r2, #11
 80010fe:	211a      	movs	r1, #26
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <magnetometer_init+0x68>)
 8001102:	f002 ff19 	bl	8003f38 <HAL_I2C_Mem_Write>
    uint8_t rejestr = 0x1D;
 8001106:	231d      	movs	r3, #29
 8001108:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x09, 1, &rejestr, 1, HAL_MAX_DELAY);
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2209      	movs	r2, #9
 800111c:	211a      	movs	r1, #26
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <magnetometer_init+0x68>)
 8001120:	f002 ff0a 	bl	8003f38 <HAL_I2C_Mem_Write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000248 	.word	0x20000248

08001130 <magnetometer_measure>:


//Pojedynczy pomiar
void magnetometer_measure()
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
	//HAL_Delay(3);
    HAL_I2C_Mem_Read(&hi2c1, 0x0D<<1, 0x00, 1, (uint8_t*)Data, 6, HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2306      	movs	r3, #6
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b89      	ldr	r3, [pc, #548]	; (8001368 <magnetometer_measure+0x238>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	2200      	movs	r2, #0
 8001148:	211a      	movs	r1, #26
 800114a:	4888      	ldr	r0, [pc, #544]	; (800136c <magnetometer_measure+0x23c>)
 800114c:	f002 ffee 	bl	800412c <HAL_I2C_Mem_Read>
    for(int i=0; i<3; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e015      	b.n	8001182 <magnetometer_measure+0x52>
    {
        rawData[i]=((int16_t)((uint16_t)Data[2*i+1] << 8) + Data[2*i]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	3301      	adds	r3, #1
 800115c:	4a82      	ldr	r2, [pc, #520]	; (8001368 <magnetometer_measure+0x238>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	497f      	ldr	r1, [pc, #508]	; (8001368 <magnetometer_measure+0x238>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	b219      	sxth	r1, r3
 8001174:	4a7e      	ldr	r2, [pc, #504]	; (8001370 <magnetometer_measure+0x240>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<3; i++)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	dde6      	ble.n	8001156 <magnetometer_measure+0x26>
    }

    scaledData[0]= ((float)rawData[0]- xoffset)/3000.0;
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <magnetometer_measure+0x240>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001196:	4b77      	ldr	r3, [pc, #476]	; (8001374 <magnetometer_measure+0x244>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a8:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001378 <magnetometer_measure+0x248>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <magnetometer_measure+0x24c>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
    scaledData[1]= ((float)rawData[1]- yoffset)/3000.0;
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <magnetometer_measure+0x240>)
 80011b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <magnetometer_measure+0x250>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d6:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001378 <magnetometer_measure+0x248>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <magnetometer_measure+0x24c>)
 80011e0:	edc3 7a01 	vstr	s15, [r3, #4]

    azymuth = atan2((float)scaledData[1],(float)scaledData[0]);
 80011e4:	4b65      	ldr	r3, [pc, #404]	; (800137c <magnetometer_measure+0x24c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9b5 	bl	8000558 <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <magnetometer_measure+0x24c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ae 	bl	8000558 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	ec43 2b11 	vmov	d1, r2, r3
 8001204:	ec45 4b10 	vmov	d0, r4, r5
 8001208:	f00a fdd6 	bl	800bdb8 <atan2>
 800120c:	ec53 2b10 	vmov	r2, r3, d0
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcd0 	bl	8000bb8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <magnetometer_measure+0x254>)
 800121c:	6013      	str	r3, [r2, #0]

    if (azymuth < 0)
 800121e:	4b59      	ldr	r3, [pc, #356]	; (8001384 <magnetometer_measure+0x254>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d512      	bpl.n	8001254 <magnetometer_measure+0x124>
        azymuth += 2 * M_PI;
 800122e:	4b55      	ldr	r3, [pc, #340]	; (8001384 <magnetometer_measure+0x254>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f990 	bl	8000558 <__aeabi_f2d>
 8001238:	a347      	add	r3, pc, #284	; (adr r3, 8001358 <magnetometer_measure+0x228>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f82d 	bl	800029c <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fcb5 	bl	8000bb8 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <magnetometer_measure+0x254>)
 8001252:	6013      	str	r3, [r2, #0]
    if (azymuth > 2*M_PI)
 8001254:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <magnetometer_measure+0x254>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	a33e      	add	r3, pc, #248	; (adr r3, 8001358 <magnetometer_measure+0x228>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff fc60 	bl	8000b28 <__aeabi_dcmpgt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d012      	beq.n	8001294 <magnetometer_measure+0x164>
        azymuth -= 2 * M_PI;
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <magnetometer_measure+0x254>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f970 	bl	8000558 <__aeabi_f2d>
 8001278:	a337      	add	r3, pc, #220	; (adr r3, 8001358 <magnetometer_measure+0x228>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff f80b 	bl	8000298 <__aeabi_dsub>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc95 	bl	8000bb8 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <magnetometer_measure+0x254>)
 8001292:	6013      	str	r3, [r2, #0]

    azymuth = azymuth * 180/ M_PI;
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <magnetometer_measure+0x254>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001388 <magnetometer_measure+0x258>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	ee17 0a90 	vmov	r0, s15
 80012a6:	f7ff f957 	bl	8000558 <__aeabi_f2d>
 80012aa:	a32d      	add	r3, pc, #180	; (adr r3, 8001360 <magnetometer_measure+0x230>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff fad4 	bl	800085c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc7c 	bl	8000bb8 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <magnetometer_measure+0x254>)
 80012c4:	6013      	str	r3, [r2, #0]

    if (azymuth >= 0 && azymuth <= 270)
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <magnetometer_measure+0x254>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	db14      	blt.n	8001300 <magnetometer_measure+0x1d0>
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <magnetometer_measure+0x254>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800138c <magnetometer_measure+0x25c>
 80012e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d80a      	bhi.n	8001300 <magnetometer_measure+0x1d0>
        azymuth = azymuth + 90.00;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <magnetometer_measure+0x254>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001390 <magnetometer_measure+0x260>
 80012f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <magnetometer_measure+0x254>)
 80012fa:	edc3 7a00 	vstr	s15, [r3]
 80012fe:	e013      	b.n	8001328 <magnetometer_measure+0x1f8>
    else if (azymuth>270)
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <magnetometer_measure+0x254>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800138c <magnetometer_measure+0x25c>
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd09      	ble.n	8001328 <magnetometer_measure+0x1f8>
        azymuth = azymuth - 270;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <magnetometer_measure+0x254>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800138c <magnetometer_measure+0x25c>
 800131e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <magnetometer_measure+0x254>)
 8001324:	edc3 7a00 	vstr	s15, [r3]

    sprintf(msg, "Azymut: %f \r\n", (float)azymuth);
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <magnetometer_measure+0x254>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f913 	bl	8000558 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4917      	ldr	r1, [pc, #92]	; (8001394 <magnetometer_measure+0x264>)
 8001338:	4817      	ldr	r0, [pc, #92]	; (8001398 <magnetometer_measure+0x268>)
 800133a:	f008 fac5 	bl	80098c8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 800133e:	2364      	movs	r3, #100	; 0x64
 8001340:	221e      	movs	r2, #30
 8001342:	4915      	ldr	r1, [pc, #84]	; (8001398 <magnetometer_measure+0x268>)
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <magnetometer_measure+0x26c>)
 8001346:	f006 fe5c 	bl	8008002 <HAL_UART_Transmit>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}
 8001352:	bf00      	nop
 8001354:	f3af 8000 	nop.w
 8001358:	54442d18 	.word	0x54442d18
 800135c:	401921fb 	.word	0x401921fb
 8001360:	54442d18 	.word	0x54442d18
 8001364:	400921fb 	.word	0x400921fb
 8001368:	200004c8 	.word	0x200004c8
 800136c:	20000248 	.word	0x20000248
 8001370:	200004d0 	.word	0x200004d0
 8001374:	20000506 	.word	0x20000506
 8001378:	453b8000 	.word	0x453b8000
 800137c:	200004d8 	.word	0x200004d8
 8001380:	20000508 	.word	0x20000508
 8001384:	200004e4 	.word	0x200004e4
 8001388:	43340000 	.word	0x43340000
 800138c:	43870000 	.word	0x43870000
 8001390:	42b40000 	.word	0x42b40000
 8001394:	0800c2c8 	.word	0x0800c2c8
 8001398:	200004e8 	.word	0x200004e8
 800139c:	200003bc 	.word	0x200003bc

080013a0 <calibrate>:


//Kalibracja magnetometru
void calibrate()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

    float xmin,ymin,xmax,ymax;
    sprintf(msg, "Start \r\n");
 80013a6:	4969      	ldr	r1, [pc, #420]	; (800154c <calibrate+0x1ac>)
 80013a8:	4869      	ldr	r0, [pc, #420]	; (8001550 <calibrate+0x1b0>)
 80013aa:	f008 fa8d 	bl	80098c8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	221e      	movs	r2, #30
 80013b2:	4967      	ldr	r1, [pc, #412]	; (8001550 <calibrate+0x1b0>)
 80013b4:	4867      	ldr	r0, [pc, #412]	; (8001554 <calibrate+0x1b4>)
 80013b6:	f006 fe24 	bl	8008002 <HAL_UART_Transmit>

    magnetometer_measure();
 80013ba:	f7ff feb9 	bl	8001130 <magnetometer_measure>
    xmin=xmax=rawData[0];
 80013be:	4b66      	ldr	r3, [pc, #408]	; (8001558 <calibrate+0x1b8>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
    ymin=ymax=rawData[1];
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <calibrate+0x1b8>)
 80013d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	edc7 7a00 	vstr	s15, [r7]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	60bb      	str	r3, [r7, #8]
    turn_left();
 80013ea:	f7ff fe4b 	bl	8001084 <turn_left>

    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 80013ee:	e05e      	b.n	80014ae <calibrate+0x10e>

    {
        magnetometer_measure();
 80013f0:	f7ff fe9e 	bl	8001130 <magnetometer_measure>
        if(rawData[0] < xmin)
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <calibrate+0x1b8>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed97 7a03 	vldr	s14, [r7, #12]
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	dd08      	ble.n	8001422 <calibrate+0x82>
            xmin = rawData[0];
 8001410:	4b51      	ldr	r3, [pc, #324]	; (8001558 <calibrate+0x1b8>)
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	edc7 7a03 	vstr	s15, [r7, #12]
        if(rawData[0] > xmax)
 8001422:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <calibrate+0x1b8>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	d508      	bpl.n	8001450 <calibrate+0xb0>
            xmax = rawData[0];
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <calibrate+0x1b8>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	edc7 7a01 	vstr	s15, [r7, #4]
        if(rawData[1] < ymin)
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <calibrate+0x1b8>)
 8001452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd08      	ble.n	800147e <calibrate+0xde>
            ymin = rawData[1];
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <calibrate+0x1b8>)
 800146e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	edc7 7a02 	vstr	s15, [r7, #8]
        if(rawData[1] > ymax)
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <calibrate+0x1b8>)
 8001480:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	ed97 7a00 	vldr	s14, [r7]
 8001490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d400      	bmi.n	800149c <calibrate+0xfc>
 800149a:	e008      	b.n	80014ae <calibrate+0x10e>
            ymax = rawData[1];
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <calibrate+0x1b8>)
 800149e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	edc7 7a00 	vstr	s15, [r7]
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 80014ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <calibrate+0x1bc>)
 80014b4:	f002 fbca 	bl	8003c4c <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d198      	bne.n	80013f0 <calibrate+0x50>
    }

    sprintf(msg, "xmin: %f \r\n", (float)xmin);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff f84a 	bl	8000558 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4925      	ldr	r1, [pc, #148]	; (8001560 <calibrate+0x1c0>)
 80014ca:	4821      	ldr	r0, [pc, #132]	; (8001550 <calibrate+0x1b0>)
 80014cc:	f008 f9fc 	bl	80098c8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	221e      	movs	r2, #30
 80014d4:	491e      	ldr	r1, [pc, #120]	; (8001550 <calibrate+0x1b0>)
 80014d6:	481f      	ldr	r0, [pc, #124]	; (8001554 <calibrate+0x1b4>)
 80014d8:	f006 fd93 	bl	8008002 <HAL_UART_Transmit>
    sprintf(msg, "xmax: %f \r\n", (float)xmax);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff f83b 	bl	8000558 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	491f      	ldr	r1, [pc, #124]	; (8001564 <calibrate+0x1c4>)
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <calibrate+0x1b0>)
 80014ea:	f008 f9ed 	bl	80098c8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	221e      	movs	r2, #30
 80014f2:	4917      	ldr	r1, [pc, #92]	; (8001550 <calibrate+0x1b0>)
 80014f4:	4817      	ldr	r0, [pc, #92]	; (8001554 <calibrate+0x1b4>)
 80014f6:	f006 fd84 	bl	8008002 <HAL_UART_Transmit>

    xoffset = (xmin+xmax)/2;
 80014fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001506:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001512:	ee17 3a90 	vmov	r3, s15
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <calibrate+0x1c8>)
 800151a:	801a      	strh	r2, [r3, #0]
    yoffset = (ymin+ymax)/2;
 800151c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001520:	edd7 7a00 	vldr	s15, [r7]
 8001524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001528:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800152c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <calibrate+0x1cc>)
 800153c:	801a      	strh	r2, [r3, #0]
    stop();
 800153e:	f7ff fd0d 	bl	8000f5c <stop>

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800c2d8 	.word	0x0800c2d8
 8001550:	200004e8 	.word	0x200004e8
 8001554:	200003bc 	.word	0x200003bc
 8001558:	200004d0 	.word	0x200004d0
 800155c:	40020800 	.word	0x40020800
 8001560:	0800c2e4 	.word	0x0800c2e4
 8001564:	0800c2f0 	.word	0x0800c2f0
 8001568:	20000506 	.word	0x20000506
 800156c:	20000508 	.word	0x20000508

08001570 <north>:

//Obrót w kierunku polnocy
void north()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    magnetometer_measure();
 8001574:	f7ff fddc 	bl	8001130 <magnetometer_measure>
    if((azymuth >= 0.00) && (azymuth <= 180.00))
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <north+0x6c>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	db0c      	blt.n	80015a2 <north+0x32>
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <north+0x6c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015e0 <north+0x70>
 8001592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d802      	bhi.n	80015a2 <north+0x32>
        turn_left();
 800159c:	f7ff fd72 	bl	8001084 <turn_left>
 80015a0:	e001      	b.n	80015a6 <north+0x36>
    else
        turn_right();
 80015a2:	f7ff fd25 	bl	8000ff0 <turn_right>

    while(azymuth >= 1.00 && azymuth <=359.00)
 80015a6:	e001      	b.n	80015ac <north+0x3c>
    {
        magnetometer_measure();
 80015a8:	f7ff fdc2 	bl	8001130 <magnetometer_measure>
    while(azymuth >= 1.00 && azymuth <=359.00)
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <north+0x6c>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	db09      	blt.n	80015d4 <north+0x64>
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <north+0x6c>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015e4 <north+0x74>
 80015ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d9e9      	bls.n	80015a8 <north+0x38>
    }
    stop();
 80015d4:	f7ff fcc2 	bl	8000f5c <stop>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200004e4 	.word	0x200004e4
 80015e0:	43340000 	.word	0x43340000
 80015e4:	43b38000 	.word	0x43b38000

080015e8 <change_speed>:
    stop();
}

//Zmiana predkosci silników
void change_speed(uint32_t pulse)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    htim1.Instance->CCR1=pulse;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <change_speed+0x24>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
    htim1.Instance->CCR2=pulse;
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <change_speed+0x24>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	2000029c 	.word	0x2000029c

08001610 <move_forward_1>:




void move_forward_1()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2110      	movs	r1, #16
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <move_forward_1+0x34>)
 800161a:	f002 fb2f 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <move_forward_1+0x38>)
 8001626:	f002 fb29 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <move_forward_1+0x38>)
 8001630:	f002 fb24 	bl	8003c7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <move_forward_1+0x3c>)
 800163c:	f002 fb1e 	bl	8003c7c <HAL_GPIO_WritePin>

   // HAL_Delay(time);
  //  stop();
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020800 	.word	0x40020800
 8001648:	40020400 	.word	0x40020400
 800164c:	40020000 	.word	0x40020000

08001650 <move_>:



void move_(float x){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM2->CNT=0;
 800165a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
	  move_forward_1();
 8001662:	f7ff ffd5 	bl	8001610 <move_forward_1>


	while(TIM2->CNT*k<=x){
 8001666:	e01d      	b.n	80016a4 <move_+0x54>
		if(x>c && TIM2->CNT==3839){
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <move_+0xbc>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dc00      	bgt.n	800167e <move_+0x2e>
 800167c:	e012      	b.n	80016a4 <move_+0x54>
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001688:	4293      	cmp	r3, r2
 800168a:	d10b      	bne.n	80016a4 <move_+0x54>
			x=x-c;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <move_+0xbc>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169a:	edc7 7a01 	vstr	s15, [r7, #4]
			HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f001 fc90 	bl	8002fc4 <HAL_Delay>
	while(TIM2->CNT*k<=x){
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <move_+0xc0>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80016c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c8:	dace      	bge.n	8001668 <move_+0x18>
			}

	}

	if(TIM2->CNT*k>=x){
 80016ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <move_+0xc0>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d900      	bls.n	80016f2 <move_+0xa2>
		al=TIM2->CNT;
		stop();
	//HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
}}
 80016f0:	e007      	b.n	8001702 <move_+0xb2>
		al=TIM2->CNT;
 80016f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <move_+0xc4>)
 80016fc:	801a      	strh	r2, [r3, #0]
		stop();
 80016fe:	f7ff fc2d 	bl	8000f5c <stop>
}}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004
 8001714:	200004c6 	.word	0x200004c6

08001718 <lights>:



void lights(){
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

	 // Start ADC Conversion
	    	        HAL_ADC_Start(&hadc1);
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <lights+0x50>)
 800171e:	f000 fcab 	bl	8002078 <HAL_ADC_Start>
	    	       // Poll ADC1 Perihperal & TimeOut = 1mSec
	    	        HAL_ADC_PollForConversion(&hadc1, 1);
 8001722:	2101      	movs	r1, #1
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <lights+0x50>)
 8001726:	f000 fd5b 	bl	80021e0 <HAL_ADC_PollForConversion>
	    	       // Read The ADC Conversion Result & Map It To PWM DutyCycle
	    	        AD_RES = HAL_ADC_GetValue(&hadc1);
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <lights+0x50>)
 800172c:	f000 fde3 	bl	80022f6 <HAL_ADC_GetValue>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <lights+0x54>)
 8001736:	801a      	strh	r2, [r3, #0]

	if(AD_RES<510)
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <lights+0x54>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001742:	d204      	bcs.n	800174e <lights+0x36>
	   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <lights+0x58>)
 800174a:	f002 fa97 	bl	8003c7c <HAL_GPIO_WritePin>



	if(AD_RES>510)
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <lights+0x54>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001758:	d904      	bls.n	8001764 <lights+0x4c>
	   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <lights+0x58>)
 8001760:	f002 fa8c 	bl	8003c7c <HAL_GPIO_WritePin>


	}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000200 	.word	0x20000200
 800176c:	200004c0 	.word	0x200004c0
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_TIM_PeriodElapsedCallback+0x16>
		lights();
 8001786:	f7ff ffc7 	bl	8001718 <lights>
	}
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40014400 	.word	0x40014400

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f001 fb9f 	bl	8002ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f8db 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a6:	f000 fb69 	bl	8001e7c <MX_GPIO_Init>
  MX_TIM1_Init();
 80017aa:	f000 f9bf 	bl	8001b2c <MX_TIM1_Init>
  MX_DMA_Init();
 80017ae:	f000 fb3d 	bl	8001e2c <MX_DMA_Init>
  MX_I2C1_Init();
 80017b2:	f000 f98d 	bl	8001ad0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017b6:	f000 fb0f 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017ba:	f000 fa9b 	bl	8001cf4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80017be:	f000 fa45 	bl	8001c4c <MX_TIM2_Init>
  MX_ADC1_Init();
 80017c2:	f000 f933 	bl	8001a2c <MX_ADC1_Init>
  MX_TIM10_Init();
 80017c6:	f000 fae3 	bl	8001d90 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
   __HAL_RCC_I2C1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <main+0x1a0>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a59      	ldr	r2, [pc, #356]	; (8001938 <main+0x1a0>)
 80017d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b57      	ldr	r3, [pc, #348]	; (8001938 <main+0x1a0>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
   __I2C1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <main+0x1a0>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a52      	ldr	r2, [pc, #328]	; (8001938 <main+0x1a0>)
 80017f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b50      	ldr	r3, [pc, #320]	; (8001938 <main+0x1a0>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_USART2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <main+0x1a0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <main+0x1a0>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <main+0x1a0>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
   HAL_TIM_Base_Start_IT(&htim1);
 800181e:	4847      	ldr	r0, [pc, #284]	; (800193c <main+0x1a4>)
 8001820:	f005 fab2 	bl	8006d88 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001824:	2100      	movs	r1, #0
 8001826:	4845      	ldr	r0, [pc, #276]	; (800193c <main+0x1a4>)
 8001828:	f005 fb60 	bl	8006eec <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800182c:	2104      	movs	r1, #4
 800182e:	4843      	ldr	r0, [pc, #268]	; (800193c <main+0x1a4>)
 8001830:	f005 fb5c 	bl	8006eec <HAL_TIM_PWM_Start>
   HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001834:	213c      	movs	r1, #60	; 0x3c
 8001836:	4842      	ldr	r0, [pc, #264]	; (8001940 <main+0x1a8>)
 8001838:	f005 fcae 	bl	8007198 <HAL_TIM_Encoder_Start>

   __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <main+0x1a0>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	4a3c      	ldr	r2, [pc, #240]	; (8001938 <main+0x1a0>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6313      	str	r3, [r2, #48]	; 0x30
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <main+0x1a0>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
   	__HAL_RCC_USART2_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <main+0x1a0>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a35      	ldr	r2, [pc, #212]	; (8001938 <main+0x1a0>)
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <main+0x1a0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
   	__HAL_RCC_ADC1_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <main+0x1a0>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <main+0x1a0>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6453      	str	r3, [r2, #68]	; 0x44
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <main+0x1a0>)
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
   //	HAL_ADCEx_Calibration_Start(&hadc1);

    HAL_ADC_Start(&hadc1);
 8001890:	482c      	ldr	r0, [pc, #176]	; (8001944 <main+0x1ac>)
 8001892:	f000 fbf1 	bl	8002078 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001896:	2101      	movs	r1, #1
 8001898:	482a      	ldr	r0, [pc, #168]	; (8001944 <main+0x1ac>)
 800189a:	f000 fca1 	bl	80021e0 <HAL_ADC_PollForConversion>
    Vamb = HAL_ADC_GetValue(&hadc1);
 800189e:	4829      	ldr	r0, [pc, #164]	; (8001944 <main+0x1ac>)
 80018a0:	f000 fd29 	bl	80022f6 <HAL_ADC_GetValue>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <main+0x1b0>)
 80018aa:	801a      	strh	r2, [r3, #0]
    DC_Multiplier = 65535/(4096-Vamb);
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <main+0x1b0>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <main+0x1b4>)
 80018c2:	801a      	strh	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim10);
 80018c4:	4822      	ldr	r0, [pc, #136]	; (8001950 <main+0x1b8>)
 80018c6:	f005 fa5f 	bl	8006d88 <HAL_TIM_Base_Start_IT>
    change_speed(370);
 80018ca:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80018ce:	f7ff fe8b 	bl	80015e8 <change_speed>
  // HAL_Delay(5000);
     magnetometer_init();
 80018d2:	f7ff fbf7 	bl	80010c4 <magnetometer_init>
     calibrate();
 80018d6:	f7ff fd63 	bl	80013a0 <calibrate>
     HAL_Delay(3000);
 80018da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018de:	f001 fb71 	bl	8002fc4 <HAL_Delay>
     north();
 80018e2:	f7ff fe45 	bl	8001570 <north>
     HAL_Delay(3000);
 80018e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018ea:	f001 fb6b 	bl	8002fc4 <HAL_Delay>
    move_(100);
 80018ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001954 <main+0x1bc>
 80018f2:	f7ff fead 	bl	8001650 <move_>
    HAL_Delay(3000);
 80018f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018fa:	f001 fb63 	bl	8002fc4 <HAL_Delay>
    turn_right_time(4000);
 80018fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001902:	f7ff fb4b 	bl	8000f9c <turn_right_time>
     HAL_Delay(3000);
 8001906:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800190a:	f001 fb5b 	bl	8002fc4 <HAL_Delay>
    move_(50);
 800190e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001958 <main+0x1c0>
 8001912:	f7ff fe9d 	bl	8001650 <move_>
     HAL_Delay(3000);
 8001916:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800191a:	f001 fb53 	bl	8002fc4 <HAL_Delay>
     turn_left_time(4000);
 800191e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001922:	f7ff fb85 	bl	8001030 <turn_left_time>
     HAL_Delay(3000);
 8001926:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800192a:	f001 fb4b 	bl	8002fc4 <HAL_Delay>
     move_(100);
 800192e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001954 <main+0x1bc>
 8001932:	f7ff fe8d 	bl	8001650 <move_>





    while(1){
 8001936:	e7fe      	b.n	8001936 <main+0x19e>
 8001938:	40023800 	.word	0x40023800
 800193c:	2000029c 	.word	0x2000029c
 8001940:	200002e4 	.word	0x200002e4
 8001944:	20000200 	.word	0x20000200
 8001948:	200004c2 	.word	0x200004c2
 800194c:	200004c4 	.word	0x200004c4
 8001950:	20000374 	.word	0x20000374
 8001954:	42c80000 	.word	0x42c80000
 8001958:	42480000 	.word	0x42480000

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	; 0x50
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	2230      	movs	r2, #48	; 0x30
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f007 fb3a 	bl	8008fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <SystemClock_Config+0xc8>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <SystemClock_Config+0xc8>)
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198e:	6413      	str	r3, [r2, #64]	; 0x40
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <SystemClock_Config+0xc8>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <SystemClock_Config+0xcc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <SystemClock_Config+0xcc>)
 80019a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <SystemClock_Config+0xcc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c2:	2302      	movs	r3, #2
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019cc:	2308      	movs	r3, #8
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80019d0:	23a0      	movs	r3, #160	; 0xa0
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d8:	2304      	movs	r3, #4
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fce9 	bl	80063b8 <HAL_RCC_OscConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019ec:	f000 fafc 	bl	8001fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f0:	230f      	movs	r3, #15
 80019f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f4:	2302      	movs	r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 ff4b 	bl	80068a8 <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a18:	f000 fae6 	bl	8001fe8 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3750      	adds	r7, #80	; 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000

08001a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <MX_ADC1_Init+0x9c>)
 8001a42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <MX_ADC1_Init+0xa0>)
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001a8e:	f000 fab0 	bl	8001ff2 <HAL_ADC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a98:	f000 faa6 	bl	8001fe8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_ADC1_Init+0x98>)
 8001aae:	f000 fc2f 	bl	8002310 <HAL_ADC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ab8:	f000 fa96 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000200 	.word	0x20000200
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	0f000001 	.word	0x0f000001

08001ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <MX_I2C1_Init+0x54>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_I2C1_Init+0x58>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b0e:	f002 f8cf 	bl	8003cb0 <HAL_I2C_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b18:	f000 fa66 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000248 	.word	0x20000248
 8001b24:	40005400 	.word	0x40005400
 8001b28:	000186a0 	.word	0x000186a0

08001b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b092      	sub	sp, #72	; 0x48
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2220      	movs	r2, #32
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fa44 	bl	8008fe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b5e:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <MX_TIM1_Init+0x11c>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b88:	482e      	ldr	r0, [pc, #184]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001b8a:	f005 f95f 	bl	8006e4c <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b94:	f000 fa28 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4827      	ldr	r0, [pc, #156]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001ba8:	f006 f90a 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001bb2:	f000 fa19 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	; 0x60
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 8001bba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4819      	ldr	r0, [pc, #100]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001bde:	f005 fc71 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001be8:	f000 f9fe 	bl	8001fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001bf6:	f005 fc65 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001c00:	f000 f9f2 	bl	8001fe8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001c28:	f006 f938 	bl	8007e9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001c32:	f000 f9d9 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c36:	4803      	ldr	r0, [pc, #12]	; (8001c44 <MX_TIM1_Init+0x118>)
 8001c38:	f000 ff00 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 8001c3c:	bf00      	nop
 8001c3e:	3748      	adds	r7, #72	; 0x48
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000029c 	.word	0x2000029c
 8001c48:	40010000 	.word	0x40010000

08001c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 f9c2 	bl	8008fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3839;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c7e:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c90:	2303      	movs	r3, #3
 8001c92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001cbc:	f005 f9c6 	bl	800704c <HAL_TIM_Encoder_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cc6:	f000 f98f 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_TIM2_Init+0xa4>)
 8001cd8:	f006 f872 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ce2:	f000 f981 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3730      	adds	r7, #48	; 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002e4 	.word	0x200002e4

08001cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <MX_TIM3_Init+0x98>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d18:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d26:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d3a:	f004 ffd5 	bl	8006ce8 <HAL_TIM_Base_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d44:	f000 f950 	bl	8001fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	4619      	mov	r1, r3
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d56:	f005 fc77 	bl	8007648 <HAL_TIM_ConfigClockSource>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d60:	f000 f942 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d72:	f006 f825 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d7c:	f000 f934 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000032c 	.word	0x2000032c
 8001d8c:	40000400 	.word	0x40000400

08001d90 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <MX_TIM10_Init+0x44>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001d9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001da0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 80;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001daa:	2250      	movs	r2, #80	; 0x50
 8001dac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM10_Init+0x40>)
 8001dbc:	f004 ff94 	bl	8006ce8 <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001dc6:	f000 f90f 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000374 	.word	0x20000374
 8001dd4:	40014400 	.word	0x40014400

08001dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART2_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f006 f8aa 	bl	8007f68 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f8e5 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200003bc 	.word	0x200003bc
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_DMA_Init+0x4c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <MX_DMA_Init+0x4c>)
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <MX_DMA_Init+0x4c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2010      	movs	r0, #16
 8001e54:	f001 f9b5 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f001 f9ce 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2011      	movs	r0, #17
 8001e64:	f001 f9ad 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e68:	2011      	movs	r0, #17
 8001e6a:	f001 f9c6 	bl	80031fa <HAL_NVIC_EnableIRQ>

}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <MX_GPIO_Init+0x15c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001f08:	4834      	ldr	r0, [pc, #208]	; (8001fdc <MX_GPIO_Init+0x160>)
 8001f0a:	f001 feb7 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2110      	movs	r1, #16
 8001f12:	4833      	ldr	r0, [pc, #204]	; (8001fe0 <MX_GPIO_Init+0x164>)
 8001f14:	f001 feb2 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f242 0108 	movw	r1, #8200	; 0x2008
 8001f1e:	4831      	ldr	r0, [pc, #196]	; (8001fe4 <MX_GPIO_Init+0x168>)
 8001f20:	f001 feac 	bl	8003c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <MX_GPIO_Init+0x164>)
 8001f3a:	f001 fd03 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4821      	ldr	r0, [pc, #132]	; (8001fdc <MX_GPIO_Init+0x160>)
 8001f56:	f001 fcf5 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481b      	ldr	r0, [pc, #108]	; (8001fe0 <MX_GPIO_Init+0x164>)
 8001f72:	f001 fce7 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4815      	ldr	r0, [pc, #84]	; (8001fe4 <MX_GPIO_Init+0x168>)
 8001f90:	f001 fcd8 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <MX_GPIO_Init+0x160>)
 8001fae:	f001 fcc9 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <MX_GPIO_Init+0x168>)
 8001fca:	f001 fcbb 	bl	8003944 <HAL_GPIO_Init>

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <Error_Handler+0x8>

08001ff2 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e033      	b.n	8002070 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fbd3 	bl	80027bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002038:	f023 0302 	bic.w	r3, r3, #2
 800203c:	f043 0202 	orr.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa95 	bl	8002574 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f023 0303 	bic.w	r3, r3, #3
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
 8002060:	e001      	b.n	8002066 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Start+0x1a>
 800208e:	2302      	movs	r3, #2
 8002090:	e097      	b.n	80021c2 <HAL_ADC_Start+0x14a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d018      	beq.n	80020da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020b8:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <HAL_ADC_Start+0x158>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <HAL_ADC_Start+0x15c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0c9a      	lsrs	r2, r3, #18
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d15f      	bne.n	80021a8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002126:	d106      	bne.n	8002136 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f023 0206 	bic.w	r2, r3, #6
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
 8002134:	e002      	b.n	800213c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_ADC_Start+0x160>)
 8002146:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002150:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10f      	bne.n	800217e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d129      	bne.n	80021c0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e020      	b.n	80021c0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_ADC_Start+0x164>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d11b      	bne.n	80021c0 <HAL_ADC_Start+0x148>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d114      	bne.n	80021c0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	e00b      	b.n	80021c0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	40012300 	.word	0x40012300
 80021dc:	40012000 	.word	0x40012000

080021e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d113      	bne.n	8002226 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d10b      	bne.n	8002226 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e063      	b.n	80022ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002226:	f000 fec1 	bl	8002fac <HAL_GetTick>
 800222a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800222c:	e021      	b.n	8002272 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d01d      	beq.n	8002272 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_ADC_PollForConversion+0x6c>
 800223c:	f000 feb6 	bl	8002fac <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d212      	bcs.n	8002272 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d00b      	beq.n	8002272 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0204 	orr.w	r2, r3, #4
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e03d      	b.n	80022ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d1d6      	bne.n	800222e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0212 	mvn.w	r2, #18
 8002288:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d123      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11f      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e113      	b.n	8002554 <HAL_ADC_ConfigChannel+0x244>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b09      	cmp	r3, #9
 800233a:	d925      	bls.n	8002388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	3b1e      	subs	r3, #30
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	4603      	mov	r3, r0
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4403      	add	r3, r0
 800237a:	3b1e      	subs	r3, #30
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e022      	b.n	80023ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	2207      	movs	r2, #7
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4403      	add	r3, r0
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d824      	bhi.n	8002420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	3b05      	subs	r3, #5
 80023e8:	221f      	movs	r2, #31
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	400a      	ands	r2, r1
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b05      	subs	r3, #5
 8002412:	fa00 f203 	lsl.w	r2, r0, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
 800241e:	e04c      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d824      	bhi.n	8002472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b23      	subs	r3, #35	; 0x23
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b23      	subs	r3, #35	; 0x23
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
 8002470:	e023      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b41      	subs	r3, #65	; 0x41
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b41      	subs	r3, #65	; 0x41
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_ADC_ConfigChannel+0x250>)
 80024bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10f      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d10b      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12b      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x1f4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b11      	cmp	r3, #17
 8002502:	d122      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_ADC_ConfigChannel+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_ADC_ConfigChannel+0x260>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	0c9a      	lsrs	r2, r3, #18
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800253c:	e002      	b.n	8002544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3b01      	subs	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40012300 	.word	0x40012300
 8002564:	40012000 	.word	0x40012000
 8002568:	10000012 	.word	0x10000012
 800256c:	20000008 	.word	0x20000008
 8002570:	431bde83 	.word	0x431bde83

08002574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257c:	4b79      	ldr	r3, [pc, #484]	; (8002764 <ADC_Init+0x1f0>)
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <ADC_Init+0x1f4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800261a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e00f      	b.n	8002672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002670:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0202 	bic.w	r2, r2, #2
 8002680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
 800268c:	005a      	lsls	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	3b01      	subs	r3, #1
 80026cc:	035a      	lsls	r2, r3, #13
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e007      	b.n	80026e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	3b01      	subs	r3, #1
 8002704:	051a      	lsls	r2, r3, #20
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800272a:	025a      	lsls	r2, r3, #9
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	029a      	lsls	r2, r3, #10
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40012300 	.word	0x40012300
 8002768:	0f000001 	.word	0x0f000001

0800276c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_MspInit+0x4c>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_MspInit+0x4c>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_ADC_MspInit+0x7c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d127      	bne.n	800282e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_ADC_MspInit+0x80>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_ADC_MspInit+0x80>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_ADC_MspInit+0x80>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_ADC_MspInit+0x80>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_ADC_MspInit+0x80>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_ADC_MspInit+0x80>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002816:	2301      	movs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281a:	2303      	movs	r3, #3
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <HAL_ADC_MspInit+0x84>)
 800282a:	f001 f88b 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	; 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40012000 	.word	0x40012000
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_I2C_MspInit+0x94>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d133      	bne.n	80028ce <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_I2C_MspInit+0x98>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_I2C_MspInit+0x98>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_I2C_MspInit+0x98>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002892:	2304      	movs	r3, #4
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4810      	ldr	r0, [pc, #64]	; (80028e0 <HAL_I2C_MspInit+0x9c>)
 800289e:	f001 f851 	bl	8003944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_I2C_MspInit+0x98>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_I2C_MspInit+0x98>)
 80028ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_I2C_MspInit+0x98>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	201f      	movs	r0, #31
 80028c4:	f000 fc7d 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028c8:	201f      	movs	r0, #31
 80028ca:	f000 fc96 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020400 	.word	0x40020400

080028e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_TIM_PWM_MspInit+0x48>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d115      	bne.n	8002922 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_TIM_PWM_MspInit+0x4c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <HAL_TIM_PWM_MspInit+0x4c>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_TIM_PWM_MspInit+0x4c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2019      	movs	r0, #25
 8002918:	f000 fc53 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800291c:	2019      	movs	r0, #25
 800291e:	f000 fc6c 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d12c      	bne.n	80029b0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800298e:	f248 0302 	movw	r3, #32770	; 0x8002
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	4804      	ldr	r0, [pc, #16]	; (80029bc <HAL_TIM_Encoder_MspInit+0x88>)
 80029ac:	f000 ffca 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_TIM_Base_MspInit+0x70>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80029ee:	e01a      	b.n	8002a26 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HAL_TIM_Base_MspInit+0x78>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d115      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_TIM_Base_MspInit+0x74>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2019      	movs	r0, #25
 8002a1c:	f000 fbd1 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a20:	2019      	movs	r0, #25
 8002a22:	f000 fbea 	bl	80031fa <HAL_NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40014400 	.word	0x40014400

08002a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_TIM_MspPostInit+0x68>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d11e      	bne.n	8002a9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <HAL_TIM_MspPostInit+0x70>)
 8002a98:	f000 ff54 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000

08002ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_UART_MspInit+0x150>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f040 8092 	bne.w	8002bf8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a49      	ldr	r2, [pc, #292]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_UART_MspInit+0x154>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4619      	mov	r1, r3
 8002b26:	4838      	ldr	r0, [pc, #224]	; (8002c08 <HAL_UART_MspInit+0x158>)
 8002b28:	f000 ff0c 	bl	8003944 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b2c:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b2e:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <HAL_UART_MspInit+0x160>)
 8002b30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b6e:	4827      	ldr	r0, [pc, #156]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b70:	f000 fb5e 	bl	8003230 <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b7a:	f7ff fa35 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_UART_MspInit+0x15c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002b8c:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_UART_MspInit+0x168>)
 8002b8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002baa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bcc:	4811      	ldr	r0, [pc, #68]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002bce:	f000 fb2f 	bl	8003230 <HAL_DMA_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002bd8:	f7ff fa06 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_UART_MspInit+0x164>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2100      	movs	r1, #0
 8002bec:	2026      	movs	r0, #38	; 0x26
 8002bee:	f000 fae8 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf2:	2026      	movs	r0, #38	; 0x26
 8002bf4:	f000 fb01 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	20000400 	.word	0x20000400
 8002c10:	40026088 	.word	0x40026088
 8002c14:	20000460 	.word	0x20000460
 8002c18:	400260a0 	.word	0x400260a0

08002c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <NMI_Handler+0x4>

08002c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <HardFault_Handler+0x4>

08002c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <MemManage_Handler+0x4>

08002c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c68:	f000 f98c 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <DMA1_Stream5_IRQHandler+0x10>)
 8002c76:	f000 fc1b 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000400 	.word	0x20000400

08002c84 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <DMA1_Stream6_IRQHandler+0x10>)
 8002c8a:	f000 fc11 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000460 	.word	0x20000460

08002c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002c9e:	f004 fb09 	bl	80072b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002ca2:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002ca4:	f004 fb06 	bl	80072b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000029c 	.word	0x2000029c
 8002cb0:	20000374 	.word	0x20000374

08002cb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <I2C1_EV_IRQHandler+0x10>)
 8002cba:	f001 fc5d 	bl	8004578 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000248 	.word	0x20000248

08002cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART2_IRQHandler+0x10>)
 8002cce:	f005 fa2b 	bl	8008128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200003bc 	.word	0x200003bc

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
	return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_kill>:

int _kill(int pid, int sig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cf6:	f006 f94b 	bl	8008f90 <__errno>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2216      	movs	r2, #22
 8002cfe:	601a      	str	r2, [r3, #0]
	return -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_exit>:

void _exit (int status)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ffe7 	bl	8002cec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d1e:	e7fe      	b.n	8002d1e <_exit+0x12>

08002d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d32:	f3af 8000 	nop.w
 8002d36:	4601      	mov	r1, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbf0      	blt.n	8002d32 <_read+0x12>
	}

return len;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e009      	b.n	8002d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf1      	blt.n	8002d6c <_write+0x12>
	}
	return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dba:	605a      	str	r2, [r3, #4]
	return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_isatty>:

int _isatty(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
	return 0;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f006 f8b0 	bl	8008f90 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20020000 	.word	0x20020000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	2000050c 	.word	0x2000050c
 8002e64:	20000528 	.word	0x20000528

08002e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <SystemInit+0x20>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <SystemInit+0x20>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e90:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e92:	490e      	ldr	r1, [pc, #56]	; (8002ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e94:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e98:	e002      	b.n	8002ea0 <LoopCopyDataInit>

08002e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9e:	3304      	adds	r3, #4

08002ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea4:	d3f9      	bcc.n	8002e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ea8:	4c0b      	ldr	r4, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eac:	e001      	b.n	8002eb2 <LoopFillZerobss>

08002eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb0:	3204      	adds	r2, #4

08002eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb4:	d3fb      	bcc.n	8002eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eb6:	f7ff ffd7 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eba:	f006 f86f 	bl	8008f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ebe:	f7fe fc6b 	bl	8001798 <main>
  bx  lr    
 8002ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ed0:	0800c778 	.word	0x0800c778
  ldr r2, =_sbss
 8002ed4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ed8:	20000524 	.word	0x20000524

08002edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <ADC_IRQHandler>
	...

08002ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_Init+0x40>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_Init+0x40>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_Init+0x40>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 f94f 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0e:	200f      	movs	r0, #15
 8002f10:	f000 f808 	bl	8002f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f14:	f7ff fc2a 	bl	800276c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x54>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f967 	bl	8003216 <HAL_SYSTICK_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00e      	b.n	8002f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d80a      	bhi.n	8002f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f000 f92f 	bl	80031c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_InitTick+0x5c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000008 	.word	0x20000008
 8002f7c:	20000010 	.word	0x20000010
 8002f80:	2000000c 	.word	0x2000000c

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	20000510 	.word	0x20000510

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000510 	.word	0x20000510

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff ffee 	bl	8002fac <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffde 	bl	8002fac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000010 	.word	0x20000010

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d301      	bcc.n	800317e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317a:	2301      	movs	r3, #1
 800317c:	e00f      	b.n	800319e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <SysTick_Config+0x40>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003186:	210f      	movs	r1, #15
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f7ff ff8e 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Config+0x40>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SysTick_Config+0x40>)
 8003198:	2207      	movs	r2, #7
 800319a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010

080031ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff29 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d4:	f7ff ff3e 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7ff ff8e 	bl	8003100 <NVIC_EncodePriority>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff5d 	bl	80030ac <__NVIC_SetPriority>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff31 	bl	8003070 <__NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffa2 	bl	8003168 <SysTick_Config>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff feb6 	bl	8002fac <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e099      	b.n	8003380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326c:	e00f      	b.n	800328e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800326e:	f7ff fe9d 	bl	8002fac <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b05      	cmp	r3, #5
 800327a:	d908      	bls.n	800328e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e078      	b.n	8003380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e8      	bne.n	800326e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_DMA_Init+0x158>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d107      	bne.n	80032f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4313      	orrs	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0307 	bic.w	r3, r3, #7
 800330e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b04      	cmp	r3, #4
 8003320:	d117      	bne.n	8003352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa89 	bl	800384c <DMA_CheckFifoParam>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800334e:	2301      	movs	r3, #1
 8003350:	e016      	b.n	8003380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa40 	bl	80037e0 <DMA_CalcBaseAndBitshift>
 8003360:	4603      	mov	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	223f      	movs	r2, #63	; 0x3f
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	f010803f 	.word	0xf010803f

0800338c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800339a:	f7ff fe07 	bl	8002fac <HAL_GetTick>
 800339e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d008      	beq.n	80033be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e052      	b.n	8003464 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_Abort+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340e:	e013      	b.n	8003438 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003410:	f7ff fdcc 	bl	8002fac <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d90c      	bls.n	8003438 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e015      	b.n	8003464 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e4      	bne.n	8003410 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	223f      	movs	r2, #63	; 0x3f
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d004      	beq.n	800348a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e00c      	b.n	80034a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2205      	movs	r2, #5
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034bc:	4b8e      	ldr	r3, [pc, #568]	; (80036f8 <HAL_DMA_IRQHandler+0x248>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a8e      	ldr	r2, [pc, #568]	; (80036fc <HAL_DMA_IRQHandler+0x24c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2208      	movs	r2, #8
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01a      	beq.n	800351c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0204 	bic.w	r2, r2, #4
 8003502:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	2208      	movs	r2, #8
 800350a:	409a      	lsls	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2201      	movs	r2, #1
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	2201      	movs	r2, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2204      	movs	r2, #4
 8003558:	409a      	lsls	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d012      	beq.n	8003588 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2204      	movs	r2, #4
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2210      	movs	r2, #16
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d043      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03c      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2210      	movs	r2, #16
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d024      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
 80035de:	e01f      	b.n	8003620 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
 80035f0:	e016      	b.n	8003620 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0208 	bic.w	r2, r2, #8
 800360e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2220      	movs	r2, #32
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 808f 	beq.w	8003750 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8087 	beq.w	8003750 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2220      	movs	r2, #32
 8003648:	409a      	lsls	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b05      	cmp	r3, #5
 8003658:	d136      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0216 	bic.w	r2, r2, #22
 8003668:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003678:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_DMA_IRQHandler+0x1da>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0208 	bic.w	r2, r2, #8
 8003698:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	223f      	movs	r2, #63	; 0x3f
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d07e      	beq.n	80037bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
        }
        return;
 80036c6:	e079      	b.n	80037bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d031      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e02c      	b.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
 80036f6:	bf00      	nop
 80036f8:	20000008 	.word	0x20000008
 80036fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
 8003710:	e01e      	b.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0210 	bic.w	r2, r2, #16
 800372e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	2b00      	cmp	r3, #0
 8003756:	d032      	beq.n	80037be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2205      	movs	r2, #5
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3301      	adds	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	d307      	bcc.n	8003798 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f2      	bne.n	800377c <HAL_DMA_IRQHandler+0x2cc>
 8003796:	e000      	b.n	800379a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003798:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
 80037ba:	e000      	b.n	80037be <HAL_DMA_IRQHandler+0x30e>
        return;
 80037bc:	bf00      	nop
    }
  }
}
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d2:	b2db      	uxtb	r3, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3b10      	subs	r3, #16
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <DMA_CalcBaseAndBitshift+0x64>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <DMA_CalcBaseAndBitshift+0x68>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d909      	bls.n	8003822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	659a      	str	r2, [r3, #88]	; 0x58
 8003820:	e007      	b.n	8003832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	aaaaaaab 	.word	0xaaaaaaab
 8003848:	0800c314 	.word	0x0800c314

0800384c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11f      	bne.n	80038a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d856      	bhi.n	800391a <DMA_CheckFifoParam+0xce>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <DMA_CheckFifoParam+0x28>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003885 	.word	0x08003885
 8003878:	08003897 	.word	0x08003897
 800387c:	08003885 	.word	0x08003885
 8003880:	0800391b 	.word	0x0800391b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d046      	beq.n	800391e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e043      	b.n	800391e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800389e:	d140      	bne.n	8003922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a4:	e03d      	b.n	8003922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d121      	bne.n	80038f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d837      	bhi.n	8003926 <DMA_CheckFifoParam+0xda>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <DMA_CheckFifoParam+0x70>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038d3 	.word	0x080038d3
 80038c4:	080038cd 	.word	0x080038cd
 80038c8:	080038e5 	.word	0x080038e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e030      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d025      	beq.n	800392a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e2:	e022      	b.n	800392a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ec:	d11f      	bne.n	800392e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038f2:	e01c      	b.n	800392e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d903      	bls.n	8003902 <DMA_CheckFifoParam+0xb6>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d003      	beq.n	8003908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003900:	e018      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
      break;
 8003906:	e015      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      break;
 8003918:	e00b      	b.n	8003932 <DMA_CheckFifoParam+0xe6>
      break;
 800391a:	bf00      	nop
 800391c:	e00a      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
 8003920:	e008      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e006      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
 8003928:	e004      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;   
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
    }
  } 
  
  return status; 
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e159      	b.n	8003c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	f040 8148 	bne.w	8003c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d005      	beq.n	8003996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003992:	2b02      	cmp	r3, #2
 8003994:	d130      	bne.n	80039f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039cc:	2201      	movs	r2, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 0201 	and.w	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d017      	beq.n	8003a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d123      	bne.n	8003a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	220f      	movs	r2, #15
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0203 	and.w	r2, r3, #3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a2 	beq.w	8003c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <HAL_GPIO_Init+0x2e8>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_GPIO_Init+0x2e8>)
 8003ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ada:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <HAL_GPIO_Init+0x2e8>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae6:	4a52      	ldr	r2, [pc, #328]	; (8003c30 <HAL_GPIO_Init+0x2ec>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a49      	ldr	r2, [pc, #292]	; (8003c34 <HAL_GPIO_Init+0x2f0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d019      	beq.n	8003b46 <HAL_GPIO_Init+0x202>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a48      	ldr	r2, [pc, #288]	; (8003c38 <HAL_GPIO_Init+0x2f4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0x1fe>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a47      	ldr	r2, [pc, #284]	; (8003c3c <HAL_GPIO_Init+0x2f8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00d      	beq.n	8003b3e <HAL_GPIO_Init+0x1fa>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <HAL_GPIO_Init+0x2fc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <HAL_GPIO_Init+0x1f6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a45      	ldr	r2, [pc, #276]	; (8003c44 <HAL_GPIO_Init+0x300>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_GPIO_Init+0x1f2>
 8003b32:	2304      	movs	r3, #4
 8003b34:	e008      	b.n	8003b48 <HAL_GPIO_Init+0x204>
 8003b36:	2307      	movs	r3, #7
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x204>
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e004      	b.n	8003b48 <HAL_GPIO_Init+0x204>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_Init+0x204>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_GPIO_Init+0x204>
 8003b46:	2300      	movs	r3, #0
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f002 0203 	and.w	r2, r2, #3
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	4093      	lsls	r3, r2
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b58:	4935      	ldr	r1, [pc, #212]	; (8003c30 <HAL_GPIO_Init+0x2ec>)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bde:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c08:	4a0f      	ldr	r2, [pc, #60]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	f67f aea2 	bls.w	8003960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40013c00 	.word	0x40013c00

08003c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	e001      	b.n	8003c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c8c:	787b      	ldrb	r3, [r7, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c98:	e003      	b.n	8003ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	041a      	lsls	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	619a      	str	r2, [r3, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e12b      	b.n	8003f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe fdb4 	bl	8002844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d14:	f002 ffc0 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8003d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a81      	ldr	r2, [pc, #516]	; (8003f24 <HAL_I2C_Init+0x274>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d807      	bhi.n	8003d34 <HAL_I2C_Init+0x84>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a80      	ldr	r2, [pc, #512]	; (8003f28 <HAL_I2C_Init+0x278>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bf94      	ite	ls
 8003d2c:	2301      	movls	r3, #1
 8003d2e:	2300      	movhi	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e006      	b.n	8003d42 <HAL_I2C_Init+0x92>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a7d      	ldr	r2, [pc, #500]	; (8003f2c <HAL_I2C_Init+0x27c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf94      	ite	ls
 8003d3c:	2301      	movls	r3, #1
 8003d3e:	2300      	movhi	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0e7      	b.n	8003f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a78      	ldr	r2, [pc, #480]	; (8003f30 <HAL_I2C_Init+0x280>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a6a      	ldr	r2, [pc, #424]	; (8003f24 <HAL_I2C_Init+0x274>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d802      	bhi.n	8003d84 <HAL_I2C_Init+0xd4>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	e009      	b.n	8003d98 <HAL_I2C_Init+0xe8>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	4a69      	ldr	r2, [pc, #420]	; (8003f34 <HAL_I2C_Init+0x284>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	3301      	adds	r3, #1
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	495c      	ldr	r1, [pc, #368]	; (8003f24 <HAL_I2C_Init+0x274>)
 8003db4:	428b      	cmp	r3, r1
 8003db6:	d819      	bhi.n	8003dec <HAL_I2C_Init+0x13c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e59      	subs	r1, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dcc:	400b      	ands	r3, r1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_I2C_Init+0x138>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1e59      	subs	r1, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	e051      	b.n	8003e8c <HAL_I2C_Init+0x1dc>
 8003de8:	2304      	movs	r3, #4
 8003dea:	e04f      	b.n	8003e8c <HAL_I2C_Init+0x1dc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d111      	bne.n	8003e18 <HAL_I2C_Init+0x168>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e012      	b.n	8003e3e <HAL_I2C_Init+0x18e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1e58      	subs	r0, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	0099      	lsls	r1, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Init+0x196>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e022      	b.n	8003e8c <HAL_I2C_Init+0x1dc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10e      	bne.n	8003e6c <HAL_I2C_Init+0x1bc>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1e58      	subs	r0, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	440b      	add	r3, r1
 8003e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	e00f      	b.n	8003e8c <HAL_I2C_Init+0x1dc>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	6809      	ldr	r1, [r1, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6911      	ldr	r1, [r2, #16]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68d2      	ldr	r2, [r2, #12]
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	000186a0 	.word	0x000186a0
 8003f28:	001e847f 	.word	0x001e847f
 8003f2c:	003d08ff 	.word	0x003d08ff
 8003f30:	431bde83 	.word	0x431bde83
 8003f34:	10624dd3 	.word	0x10624dd3

08003f38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f52:	f7ff f82b 	bl	8002fac <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	f040 80d9 	bne.w	8004118 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2319      	movs	r3, #25
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	496d      	ldr	r1, [pc, #436]	; (8004124 <HAL_I2C_Mem_Write+0x1ec>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f001 fff7 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0cc      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Mem_Write+0x56>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0c5      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d007      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a4d      	ldr	r2, [pc, #308]	; (8004128 <HAL_I2C_Mem_Write+0x1f0>)
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ff6:	88f8      	ldrh	r0, [r7, #6]
 8003ff8:	893a      	ldrh	r2, [r7, #8]
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	4603      	mov	r3, r0
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f001 fd86 	bl	8005b18 <I2C_RequestMemoryWrite>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d052      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e081      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f002 f878 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b04      	cmp	r3, #4
 800402c:	d107      	bne.n	800403e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06b      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d11b      	bne.n	80040b8 <HAL_I2C_Mem_Write+0x180>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1aa      	bne.n	8004016 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f002 f864 	bl	8006192 <I2C_WaitOnBTFFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d107      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e016      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000

0800412c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7fe ff31 	bl	8002fac <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 8208 	bne.w	800456a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2319      	movs	r3, #25
 8004160:	2201      	movs	r2, #1
 8004162:	497b      	ldr	r1, [pc, #492]	; (8004350 <HAL_I2C_Mem_Read+0x224>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f001 fefd 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	e1fb      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_I2C_Mem_Read+0x56>
 800417e:	2302      	movs	r3, #2
 8004180:	e1f4      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d007      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2222      	movs	r2, #34	; 0x22
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a5b      	ldr	r2, [pc, #364]	; (8004354 <HAL_I2C_Mem_Read+0x228>)
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ea:	88f8      	ldrh	r0, [r7, #6]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4603      	mov	r3, r0
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f001 fd22 	bl	8005c44 <I2C_RequestMemoryRead>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e1b0      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d113      	bne.n	800423a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e184      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d11b      	bne.n	800427a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e164      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	2b02      	cmp	r3, #2
 8004280:	d11b      	bne.n	80042ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	e144      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042d0:	e138      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	f200 80f1 	bhi.w	80044be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d123      	bne.n	800432c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f001 ffc5 	bl	8006278 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e139      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
 800432a:	e10b      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b02      	cmp	r3, #2
 8004332:	d14e      	bne.n	80043d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	2200      	movs	r2, #0
 800433c:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_I2C_Mem_Read+0x22c>)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f001 fe10 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e10e      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
 800434e:	bf00      	nop
 8004350:	00100002 	.word	0x00100002
 8004354:	ffff0000 	.word	0xffff0000
 8004358:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043d0:	e0b8      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2200      	movs	r2, #0
 80043da:	4966      	ldr	r1, [pc, #408]	; (8004574 <HAL_I2C_Mem_Read+0x448>)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f001 fdc1 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0bf      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2200      	movs	r2, #0
 8004436:	494f      	ldr	r1, [pc, #316]	; (8004574 <HAL_I2C_Mem_Read+0x448>)
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f001 fd93 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e091      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044bc:	e042      	b.n	8004544 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f001 fed8 	bl	8006278 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e04c      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d118      	bne.n	8004544 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f aec2 	bne.w	80042d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3728      	adds	r7, #40	; 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	00010004 	.word	0x00010004

08004578 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004598:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d003      	beq.n	80045b0 <HAL_I2C_EV_IRQHandler+0x38>
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	f040 80c1 	bne.w	8004732 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045d0:	d003      	beq.n	80045da <HAL_I2C_EV_IRQHandler+0x62>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045d8:	d101      	bne.n	80045de <HAL_I2C_EV_IRQHandler+0x66>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_I2C_EV_IRQHandler+0x68>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f000 8132 	beq.w	800484a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x92>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	0a5b      	lsrs	r3, r3, #9
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d006      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 fec0 	bl	8006382 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fcdc 	bl	8004fc0 <I2C_Master_SB>
 8004608:	e092      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0xb2>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fd52 	bl	80050cc <I2C_Master_ADD10>
 8004628:	e082      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_I2C_EV_IRQHandler+0xd2>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	0a5b      	lsrs	r3, r3, #9
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fd6c 	bl	8005120 <I2C_Master_ADDR>
 8004648:	e072      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d03b      	beq.n	80046ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004664:	f000 80f3 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	09db      	lsrs	r3, r3, #7
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00f      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x11c>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	0a9b      	lsrs	r3, r3, #10
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x11c>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f94c 	bl	800492a <I2C_MasterTransmit_TXE>
 8004692:	e04d      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80d6 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80cf 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	2b21      	cmp	r3, #33	; 0x21
 80046b4:	d103      	bne.n	80046be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9d3 	bl	8004a62 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046bc:	e0c7      	b.n	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	f040 80c4 	bne.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa41 	bl	8004b4e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046cc:	e0bf      	b.n	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046dc:	f000 80b7 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00f      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x194>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x194>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fab6 	bl	8004c76 <I2C_MasterReceive_RXNE>
 800470a:	e011      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 809a 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8093 	beq.w	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fb5f 	bl	8004dec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472e:	e08e      	b.n	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004730:	e08d      	b.n	800484e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e007      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d012      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0x20e>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	0a5b      	lsrs	r3, r3, #9
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 ff1d 	bl	80055be <I2C_Slave_ADDR>
 8004784:	e066      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ff58 	bl	8005654 <I2C_Slave_STOPF>
 80047a4:	e056      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047a6:	7bbb      	ldrb	r3, [r7, #14]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d002      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	2b29      	cmp	r3, #41	; 0x29
 80047b0:	d125      	bne.n	80047fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00f      	beq.n	80047de <HAL_I2C_EV_IRQHandler+0x266>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	0a9b      	lsrs	r3, r3, #10
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_I2C_EV_IRQHandler+0x266>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fe33 	bl	8005442 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047dc:	e039      	b.n	8004852 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d033      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x2da>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02d      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fe60 	bl	80054bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047fc:	e029      	b.n	8004852 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x2b2>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0a9b      	lsrs	r3, r3, #10
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fe6b 	bl	80054fe <I2C_SlaveReceive_RXNE>
 8004828:	e014      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00e      	beq.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	0a5b      	lsrs	r3, r3, #9
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fe99 	bl	800557a <I2C_SlaveReceive_BTF>
 8004848:	e004      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004852:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
 80048b6:	4613      	mov	r3, r2
 80048b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004940:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d150      	bne.n	80049f2 <I2C_MasterTransmit_TXE+0xc8>
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b21      	cmp	r3, #33	; 0x21
 8004954:	d14d      	bne.n	80049f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d01d      	beq.n	8004998 <I2C_MasterTransmit_TXE+0x6e>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b20      	cmp	r3, #32
 8004960:	d01a      	beq.n	8004998 <I2C_MasterTransmit_TXE+0x6e>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004968:	d016      	beq.n	8004998 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004978:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2211      	movs	r2, #17
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff62 	bl	800485a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004996:	e060      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d107      	bne.n	80049e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff ff7d 	bl	80048da <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e0:	e03b      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff35 	bl	800485a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049f0:	e033      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b21      	cmp	r3, #33	; 0x21
 80049f6:	d005      	beq.n	8004a04 <I2C_MasterTransmit_TXE+0xda>
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d12d      	bne.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b22      	cmp	r3, #34	; 0x22
 8004a02:	d12a      	bne.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a1e:	e01c      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d103      	bne.n	8004a34 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f88e 	bl	8004b4e <I2C_MemoryTransmit_TXE_BTF>
}
 8004a32:	e012      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a58:	e7ff      	b.n	8004a5a <I2C_MasterTransmit_TXE+0x130>
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b21      	cmp	r3, #33	; 0x21
 8004a7a:	d164      	bne.n	8004b46 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004aaa:	e04c      	b.n	8004b46 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d01d      	beq.n	8004aee <I2C_MasterTransmit_BTF+0x8c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d01a      	beq.n	8004aee <I2C_MasterTransmit_BTF+0x8c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004abe:	d016      	beq.n	8004aee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ace:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2211      	movs	r2, #17
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff feb7 	bl	800485a <HAL_I2C_MasterTxCpltCallback>
}
 8004aec:	e02b      	b.n	8004b46 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004afc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d107      	bne.n	8004b38 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fed2 	bl	80048da <HAL_I2C_MemTxCpltCallback>
}
 8004b36:	e006      	b.n	8004b46 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fe8a 	bl	800485a <HAL_I2C_MasterTxCpltCallback>
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11d      	bne.n	8004ba2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10b      	bne.n	8004b86 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b84:	e073      	b.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	121b      	asrs	r3, r3, #8
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ba0:	e065      	b.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10b      	bne.n	8004bc2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bc0:	e055      	b.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d151      	bne.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b22      	cmp	r3, #34	; 0x22
 8004bce:	d10d      	bne.n	8004bec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bde:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bea:	e040      	b.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d015      	beq.n	8004c22 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b21      	cmp	r3, #33	; 0x21
 8004bfa:	d112      	bne.n	8004c22 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c20:	e025      	b.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d120      	bne.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b21      	cmp	r3, #33	; 0x21
 8004c30:	d11d      	bne.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c40:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c50:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fe36 	bl	80048da <HAL_I2C_MemTxCpltCallback>
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b22      	cmp	r3, #34	; 0x22
 8004c88:	f040 80ac 	bne.w	8004de4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d921      	bls.n	8004cde <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	f040 808c 	bne.w	8004de4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cdc:	e082      	b.n	8004de4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d075      	beq.n	8004dd2 <I2C_MasterReceive_RXNE+0x15c>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <I2C_MasterReceive_RXNE+0x7c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d16f      	bne.n	8004dd2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 fa8e 	bl	8006214 <I2C_WaitOnSTOPRequestThroughIT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d142      	bne.n	8004d84 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d10a      	bne.n	8004d6e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fdc1 	bl	80048ee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d6c:	e03a      	b.n	8004de4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2212      	movs	r2, #18
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fd76 	bl	800486e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d82:	e02f      	b.n	8004de4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d92:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fd99 	bl	8004902 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd0:	e008      	b.n	8004de4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	605a      	str	r2, [r3, #4]
}
 8004de2:	e7ff      	b.n	8004de4 <I2C_MasterReceive_RXNE+0x16e>
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e3a:	e0bd      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d129      	bne.n	8004e9a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d00a      	beq.n	8004e72 <I2C_MasterReceive_BTF+0x86>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d007      	beq.n	8004e72 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e98:	e08e      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d176      	bne.n	8004f92 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d002      	beq.n	8004eb0 <I2C_MasterReceive_BTF+0xc4>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d108      	bne.n	8004ec2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e019      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d002      	beq.n	8004ece <I2C_MasterReceive_BTF+0xe2>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d108      	bne.n	8004ee0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e00a      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d007      	beq.n	8004ef6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d10a      	bne.n	8004f7c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fcba 	bl	80048ee <HAL_I2C_MemRxCpltCallback>
}
 8004f7a:	e01d      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2212      	movs	r2, #18
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fc6f 	bl	800486e <HAL_I2C_MasterRxCpltCallback>
}
 8004f90:	e012      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d117      	bne.n	8005004 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fee:	e067      	b.n	80050c0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
}
 8005002:	e05d      	b.n	80050c0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800500c:	d133      	bne.n	8005076 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b21      	cmp	r3, #33	; 0x21
 8005018:	d109      	bne.n	800502e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800502a:	611a      	str	r2, [r3, #16]
 800502c:	e008      	b.n	8005040 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <I2C_Master_SB+0x92>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d032      	beq.n	80050c0 <I2C_Master_SB+0x100>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02d      	beq.n	80050c0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005072:	605a      	str	r2, [r3, #4]
}
 8005074:	e024      	b.n	80050c0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	b29b      	uxth	r3, r3
 8005084:	11db      	asrs	r3, r3, #7
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0306 	and.w	r3, r3, #6
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f063 030f 	orn	r3, r3, #15
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
}
 800509a:	e011      	b.n	80050c0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10d      	bne.n	80050c0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030e 	orn	r3, r3, #14
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <I2C_Master_ADD10+0x26>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <I2C_Master_ADD10+0x48>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b091      	sub	sp, #68	; 0x44
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b22      	cmp	r3, #34	; 0x22
 8005148:	f040 8169 	bne.w	800541e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <I2C_Master_ADDR+0x54>
 8005154:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d10b      	bne.n	8005174 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515c:	2300      	movs	r3, #0
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	e160      	b.n	8005436 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11d      	bne.n	80051b8 <I2C_Master_ADDR+0x98>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005184:	d118      	bne.n	80051b8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50
 80051b6:	e13e      	b.n	8005436 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e115      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	f040 808a 	bne.w	800530a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051fc:	d137      	bne.n	800526e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521c:	d113      	bne.n	8005246 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	e0e7      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e0d3      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	2b08      	cmp	r3, #8
 8005272:	d02e      	beq.n	80052d2 <I2C_Master_ADDR+0x1b2>
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	2b20      	cmp	r3, #32
 8005278:	d02b      	beq.n	80052d2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2b12      	cmp	r3, #18
 800527e:	d102      	bne.n	8005286 <I2C_Master_ADDR+0x166>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b01      	cmp	r3, #1
 8005284:	d125      	bne.n	80052d2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b04      	cmp	r3, #4
 800528a:	d00e      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	2b02      	cmp	r3, #2
 8005290:	d00b      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b10      	cmp	r3, #16
 8005296:	d008      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e007      	b.n	80052ba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	e0a1      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e085      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d14d      	bne.n	80053b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b04      	cmp	r3, #4
 8005318:	d016      	beq.n	8005348 <I2C_Master_ADDR+0x228>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b02      	cmp	r3, #2
 800531e:	d013      	beq.n	8005348 <I2C_Master_ADDR+0x228>
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	2b10      	cmp	r3, #16
 8005324:	d010      	beq.n	8005348 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e007      	b.n	8005358 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005356:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005366:	d117      	bne.n	8005398 <I2C_Master_ADDR+0x278>
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800536e:	d00b      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2b01      	cmp	r3, #1
 8005374:	d008      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b08      	cmp	r3, #8
 800537a:	d005      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	2b10      	cmp	r3, #16
 8005380:	d002      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005396:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	e032      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ce:	d117      	bne.n	8005400 <I2C_Master_ADDR+0x2e0>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053d6:	d00b      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d008      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d005      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d002      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d107      	bne.n	8005400 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800541c:	e00b      	b.n	8005436 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	e7ff      	b.n	8005436 <I2C_Master_ADDR+0x316>
 8005436:	bf00      	nop
 8005438:	3744      	adds	r7, #68	; 0x44
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005450:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02b      	beq.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d114      	bne.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b29      	cmp	r3, #41	; 0x29
 800548e:	d111      	bne.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2221      	movs	r2, #33	; 0x21
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2228      	movs	r2, #40	; 0x28
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff f9e7 	bl	8004882 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02c      	beq.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b2a      	cmp	r3, #42	; 0x2a
 800554c:	d111      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2222      	movs	r2, #34	; 0x22
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2228      	movs	r2, #40	; 0x28
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff f992 	bl	8004896 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055d8:	2b28      	cmp	r3, #40	; 0x28
 80055da:	d127      	bne.n	800562c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	09db      	lsrs	r3, r3, #7
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	81bb      	strh	r3, [r7, #12]
 800560e:	e002      	b.n	8005616 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800561e:	89ba      	ldrh	r2, [r7, #12]
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff f940 	bl	80048aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800562a:	e00e      	b.n	800564a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005672:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b0:	d172      	bne.n	8005798 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b22      	cmp	r3, #34	; 0x22
 80056b6:	d002      	beq.n	80056be <I2C_Slave_STOPF+0x6a>
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b2a      	cmp	r3, #42	; 0x2a
 80056bc:	d135      	bne.n	800572a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe f864 	bl	80037c4 <HAL_DMA_GetState>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d049      	beq.n	8005796 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	4a69      	ldr	r2, [pc, #420]	; (80058ac <I2C_Slave_STOPF+0x258>)
 8005708:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd feac 	bl	800346c <HAL_DMA_Abort_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d03d      	beq.n	8005796 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005728:	e035      	b.n	8005796 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800575c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe f82e 	bl	80037c4 <HAL_DMA_GetState>
 8005768:	4603      	mov	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d014      	beq.n	8005798 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	4a4e      	ldr	r2, [pc, #312]	; (80058ac <I2C_Slave_STOPF+0x258>)
 8005774:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd fe76 	bl	800346c <HAL_DMA_Abort_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
 8005794:	e000      	b.n	8005798 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005796:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03e      	beq.n	8005820 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d112      	bne.n	80057d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d112      	bne.n	800580a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f843 	bl	80058b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800582e:	e039      	b.n	80058a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b2a      	cmp	r3, #42	; 0x2a
 8005834:	d109      	bne.n	800584a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2228      	movs	r2, #40	; 0x28
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff f826 	bl	8004896 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b28      	cmp	r3, #40	; 0x28
 8005854:	d111      	bne.n	800587a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <I2C_Slave_STOPF+0x25c>)
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f827 	bl	80048c6 <HAL_I2C_ListenCpltCallback>
}
 8005878:	e014      	b.n	80058a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	2b22      	cmp	r3, #34	; 0x22
 8005880:	d002      	beq.n	8005888 <I2C_Slave_STOPF+0x234>
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	d10d      	bne.n	80058a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe fff9 	bl	8004896 <HAL_I2C_SlaveRxCpltCallback>
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	08005e15 	.word	0x08005e15
 80058b0:	ffff0000 	.word	0xffff0000

080058b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d002      	beq.n	80058d8 <I2C_ITError+0x24>
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d10a      	bne.n	80058ee <I2C_ITError+0x3a>
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b22      	cmp	r3, #34	; 0x22
 80058dc:	d107      	bne.n	80058ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058f4:	2b28      	cmp	r3, #40	; 0x28
 80058f6:	d107      	bne.n	8005908 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2228      	movs	r2, #40	; 0x28
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005906:	e015      	b.n	8005934 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005916:	d00a      	beq.n	800592e <I2C_ITError+0x7a>
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b60      	cmp	r3, #96	; 0x60
 800591c:	d007      	beq.n	800592e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d162      	bne.n	8005a0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005952:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d020      	beq.n	80059a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	4a6a      	ldr	r2, [pc, #424]	; (8005b10 <I2C_ITError+0x25c>)
 8005968:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd fd7c 	bl	800346c <HAL_DMA_Abort_IT>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8089 	beq.w	8005a8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
 80059a2:	e074      	b.n	8005a8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	4a59      	ldr	r2, [pc, #356]	; (8005b10 <I2C_ITError+0x25c>)
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd fd5b 	bl	800346c <HAL_DMA_Abort_IT>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d068      	beq.n	8005a8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d10b      	bne.n	80059e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	e041      	b.n	8005a8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b60      	cmp	r3, #96	; 0x60
 8005a14:	d125      	bne.n	8005a62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d10b      	bne.n	8005a4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fe ff5b 	bl	8004916 <HAL_I2C_AbortCpltCallback>
 8005a60:	e015      	b.n	8005a8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d10b      	bne.n	8005a88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fe ff3a 	bl	8004902 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10e      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d113      	bne.n	8005b08 <I2C_ITError+0x254>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b28      	cmp	r3, #40	; 0x28
 8005ae4:	d110      	bne.n	8005b08 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <I2C_ITError+0x260>)
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fe fedf 	bl	80048c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08005e15 	.word	0x08005e15
 8005b14:	ffff0000 	.word	0xffff0000

08005b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fa08 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b68:	d103      	bne.n	8005b72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e05f      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	492d      	ldr	r1, [pc, #180]	; (8005c40 <I2C_RequestMemoryWrite+0x128>)
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa40 	bl	8006012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04c      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	6a39      	ldr	r1, [r7, #32]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 faaa 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d107      	bne.n	8005bda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02b      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
 8005bee:	e021      	b.n	8005c34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf0:	893b      	ldrh	r3, [r7, #8]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	6a39      	ldr	r1, [r7, #32]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa84 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d107      	bne.n	8005c26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e005      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	00010002 	.word	0x00010002

08005c44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	460b      	mov	r3, r1
 8005c58:	813b      	strh	r3, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f96a 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d103      	bne.n	8005cae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0aa      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	4952      	ldr	r1, [pc, #328]	; (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f9a2 	bl	8006012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e097      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa0c 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d107      	bne.n	8005d16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e076      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d105      	bne.n	8005d2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d20:	893b      	ldrh	r3, [r7, #8]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	e021      	b.n	8005d70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d2c:	893b      	ldrh	r3, [r7, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f9e6 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00d      	beq.n	8005d66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d107      	bne.n	8005d62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e050      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d66:	893b      	ldrh	r3, [r7, #8]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	6a39      	ldr	r1, [r7, #32]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f9cb 	bl	8006110 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d107      	bne.n	8005d98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e035      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005daa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f8d3 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d103      	bne.n	8005ddc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e013      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	4906      	ldr	r1, [pc, #24]	; (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f90b 	bl	8006012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	00010002 	.word	0x00010002

08005e14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <I2C_DMAAbort+0x148>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	4a4a      	ldr	r2, [pc, #296]	; (8005f60 <I2C_DMAAbort+0x14c>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	0a1a      	lsrs	r2, r3, #8
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e5a:	e00a      	b.n	8005e72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e70:	d0ea      	beq.n	8005e48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	2200      	movs	r2, #0
 8005e80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	2200      	movs	r2, #0
 8005e90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d10e      	bne.n	8005f02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7fe fd0b 	bl	8004916 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f00:	e027      	b.n	8005f52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f08:	2b28      	cmp	r3, #40	; 0x28
 8005f0a:	d117      	bne.n	8005f3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2228      	movs	r2, #40	; 0x28
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f3a:	e007      	b.n	8005f4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f7fe fcd8 	bl	8004902 <HAL_I2C_ErrorCallback>
}
 8005f52:	bf00      	nop
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000008 	.word	0x20000008
 8005f60:	14f8b589 	.word	0x14f8b589

08005f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f74:	e025      	b.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d021      	beq.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fd f815 	bl	8002fac <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d116      	bne.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e023      	b.n	800600a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10d      	bne.n	8005fe8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf0c      	ite	eq
 8005fde:	2301      	moveq	r3, #1
 8005fe0:	2300      	movne	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	e00c      	b.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d0b6      	beq.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006020:	e051      	b.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006030:	d123      	bne.n	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006040:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800604a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f043 0204 	orr.w	r2, r3, #4
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e046      	b.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d021      	beq.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006082:	f7fc ff93 	bl	8002fac <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d302      	bcc.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d116      	bne.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f043 0220 	orr.w	r2, r3, #32
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e020      	b.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10c      	bne.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	43da      	mvns	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bf14      	ite	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	2300      	moveq	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	e00b      	b.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	43da      	mvns	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4013      	ands	r3, r2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d18d      	bne.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800611c:	e02d      	b.n	800617a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f900 	bl	8006324 <I2C_IsAcknowledgeFailed>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e02d      	b.n	800618a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d021      	beq.n	800617a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006136:	f7fc ff39 	bl	8002fac <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d116      	bne.n	800617a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e007      	b.n	800618a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d1ca      	bne.n	800611e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800619e:	e02d      	b.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f8bf 	bl	8006324 <I2C_IsAcknowledgeFailed>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e02d      	b.n	800620c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d021      	beq.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b8:	f7fc fef8 	bl	8002fac <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d116      	bne.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	f043 0220 	orr.w	r2, r3, #32
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e007      	b.n	800620c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d1ca      	bne.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	08db      	lsrs	r3, r3, #3
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	0a1a      	lsrs	r2, r3, #8
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b01      	subs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d107      	bne.n	8006252 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e008      	b.n	8006264 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d0e9      	beq.n	8006236 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000008 	.word	0x20000008
 8006274:	14f8b589 	.word	0x14f8b589

08006278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006284:	e042      	b.n	800630c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d119      	bne.n	80062c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0210 	mvn.w	r2, #16
 800629c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e029      	b.n	800631c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c8:	f7fc fe70 	bl	8002fac <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e007      	b.n	800631c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d1b5      	bne.n	8006286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d11b      	bne.n	8006374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006392:	d103      	bne.n	800639c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800639a:	e007      	b.n	80063ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063a4:	d102      	bne.n	80063ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2208      	movs	r2, #8
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e267      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d075      	beq.n	80064c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063d6:	4b88      	ldr	r3, [pc, #544]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 030c 	and.w	r3, r3, #12
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d00c      	beq.n	80063fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e2:	4b85      	ldr	r3, [pc, #532]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d112      	bne.n	8006414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ee:	4b82      	ldr	r3, [pc, #520]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fa:	d10b      	bne.n	8006414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	4b7e      	ldr	r3, [pc, #504]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d05b      	beq.n	80064c0 <HAL_RCC_OscConfig+0x108>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d157      	bne.n	80064c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e242      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d106      	bne.n	800642c <HAL_RCC_OscConfig+0x74>
 800641e:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a75      	ldr	r2, [pc, #468]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e01d      	b.n	8006468 <HAL_RCC_OscConfig+0xb0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0x98>
 8006436:	4b70      	ldr	r3, [pc, #448]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6f      	ldr	r2, [pc, #444]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800643c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6c      	ldr	r2, [pc, #432]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e00b      	b.n	8006468 <HAL_RCC_OscConfig+0xb0>
 8006450:	4b69      	ldr	r3, [pc, #420]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a68      	ldr	r2, [pc, #416]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	4b66      	ldr	r3, [pc, #408]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a65      	ldr	r2, [pc, #404]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fc fd9c 	bl	8002fac <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006478:	f7fc fd98 	bl	8002fac <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b64      	cmp	r3, #100	; 0x64
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e207      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0xc0>
 8006496:	e014      	b.n	80064c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fc fd88 	bl	8002fac <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a0:	f7fc fd84 	bl	8002fac <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	; 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e1f3      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b2:	4b51      	ldr	r3, [pc, #324]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0xe8>
 80064be:	e000      	b.n	80064c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d063      	beq.n	8006596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ce:	4b4a      	ldr	r3, [pc, #296]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064da:	4b47      	ldr	r3, [pc, #284]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d11c      	bne.n	8006520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064e6:	4b44      	ldr	r3, [pc, #272]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d116      	bne.n	8006520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f2:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_RCC_OscConfig+0x152>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d001      	beq.n	800650a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e1c7      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650a:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4937      	ldr	r1, [pc, #220]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651e:	e03a      	b.n	8006596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d020      	beq.n	800656a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006528:	4b34      	ldr	r3, [pc, #208]	; (80065fc <HAL_RCC_OscConfig+0x244>)
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fc fd3d 	bl	8002fac <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006536:	f7fc fd39 	bl	8002fac <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e1a8      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006554:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4925      	ldr	r1, [pc, #148]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]
 8006568:	e015      	b.n	8006596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_RCC_OscConfig+0x244>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fc fd1c 	bl	8002fac <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006578:	f7fc fd18 	bl	8002fac <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e187      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658a:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d036      	beq.n	8006610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065aa:	4b15      	ldr	r3, [pc, #84]	; (8006600 <HAL_RCC_OscConfig+0x248>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b0:	f7fc fcfc 	bl	8002fac <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b8:	f7fc fcf8 	bl	8002fac <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e167      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCC_OscConfig+0x240>)
 80065cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f0      	beq.n	80065b8 <HAL_RCC_OscConfig+0x200>
 80065d6:	e01b      	b.n	8006610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <HAL_RCC_OscConfig+0x248>)
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065de:	f7fc fce5 	bl	8002fac <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e4:	e00e      	b.n	8006604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e6:	f7fc fce1 	bl	8002fac <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d907      	bls.n	8006604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e150      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
 80065f8:	40023800 	.word	0x40023800
 80065fc:	42470000 	.word	0x42470000
 8006600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	4b88      	ldr	r3, [pc, #544]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1ea      	bne.n	80065e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8097 	beq.w	800674c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006622:	4b81      	ldr	r3, [pc, #516]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10f      	bne.n	800664e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	4b7d      	ldr	r3, [pc, #500]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	4a7c      	ldr	r2, [pc, #496]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	6413      	str	r3, [r2, #64]	; 0x40
 800663e:	4b7a      	ldr	r3, [pc, #488]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	4b77      	ldr	r3, [pc, #476]	; (800682c <HAL_RCC_OscConfig+0x474>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d118      	bne.n	800668c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665a:	4b74      	ldr	r3, [pc, #464]	; (800682c <HAL_RCC_OscConfig+0x474>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a73      	ldr	r2, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x474>)
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006666:	f7fc fca1 	bl	8002fac <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666e:	f7fc fc9d 	bl	8002fac <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e10c      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	4b6a      	ldr	r3, [pc, #424]	; (800682c <HAL_RCC_OscConfig+0x474>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x2ea>
 8006694:	4b64      	ldr	r3, [pc, #400]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a63      	ldr	r2, [pc, #396]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	e01c      	b.n	80066dc <HAL_RCC_OscConfig+0x324>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x30c>
 80066aa:	4b5f      	ldr	r3, [pc, #380]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a5e      	ldr	r2, [pc, #376]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066b0:	f043 0304 	orr.w	r3, r3, #4
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
 80066b6:	4b5c      	ldr	r3, [pc, #368]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4a5b      	ldr	r2, [pc, #364]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0x324>
 80066c4:	4b58      	ldr	r3, [pc, #352]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	4a57      	ldr	r2, [pc, #348]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	6713      	str	r3, [r2, #112]	; 0x70
 80066d0:	4b55      	ldr	r3, [pc, #340]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a54      	ldr	r2, [pc, #336]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80066d6:	f023 0304 	bic.w	r3, r3, #4
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d015      	beq.n	8006710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7fc fc62 	bl	8002fac <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fc fc5e 	bl	8002fac <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e0cb      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006702:	4b49      	ldr	r3, [pc, #292]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0ee      	beq.n	80066ec <HAL_RCC_OscConfig+0x334>
 800670e:	e014      	b.n	800673a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006710:	f7fc fc4c 	bl	8002fac <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006716:	e00a      	b.n	800672e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006718:	f7fc fc48 	bl	8002fac <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e0b5      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672e:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ee      	bne.n	8006718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006740:	4b39      	ldr	r3, [pc, #228]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	4a38      	ldr	r2, [pc, #224]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80a1 	beq.w	8006898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006756:	4b34      	ldr	r3, [pc, #208]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 030c 	and.w	r3, r3, #12
 800675e:	2b08      	cmp	r3, #8
 8006760:	d05c      	beq.n	800681c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d141      	bne.n	80067ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_RCC_OscConfig+0x478>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7fc fc1c 	bl	8002fac <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006778:	f7fc fc18 	bl	8002fac <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e087      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	4b27      	ldr	r3, [pc, #156]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	3b01      	subs	r3, #1
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	061b      	lsls	r3, r3, #24
 80067ba:	491b      	ldr	r1, [pc, #108]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <HAL_RCC_OscConfig+0x478>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c6:	f7fc fbf1 	bl	8002fac <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ce:	f7fc fbed 	bl	8002fac <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e05c      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e0:	4b11      	ldr	r3, [pc, #68]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x416>
 80067ec:	e054      	b.n	8006898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ee:	4b10      	ldr	r3, [pc, #64]	; (8006830 <HAL_RCC_OscConfig+0x478>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f4:	f7fc fbda 	bl	8002fac <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067fc:	f7fc fbd6 	bl	8002fac <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e045      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_RCC_OscConfig+0x470>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x444>
 800681a:	e03d      	b.n	8006898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e038      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
 8006828:	40023800 	.word	0x40023800
 800682c:	40007000 	.word	0x40007000
 8006830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006834:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x4ec>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d028      	beq.n	8006894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d121      	bne.n	8006894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685a:	429a      	cmp	r2, r3
 800685c:	d11a      	bne.n	8006894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006864:	4013      	ands	r3, r2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800686a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800686c:	4293      	cmp	r3, r2
 800686e:	d111      	bne.n	8006894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	3b01      	subs	r3, #1
 800687e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d107      	bne.n	8006894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800

080068a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0cc      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068bc:	4b68      	ldr	r3, [pc, #416]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d90c      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ca:	4b65      	ldr	r3, [pc, #404]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d2:	4b63      	ldr	r3, [pc, #396]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d001      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0b8      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d020      	beq.n	8006932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068fc:	4b59      	ldr	r3, [pc, #356]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a58      	ldr	r2, [pc, #352]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006914:	4b53      	ldr	r3, [pc, #332]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a52      	ldr	r2, [pc, #328]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800691e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006920:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	494d      	ldr	r1, [pc, #308]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	4313      	orrs	r3, r2
 8006930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d044      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d107      	bne.n	8006956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006946:	4b47      	ldr	r3, [pc, #284]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d119      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e07f      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d003      	beq.n	8006966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006962:	2b03      	cmp	r3, #3
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006966:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e06f      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006976:	4b3b      	ldr	r3, [pc, #236]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e067      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006986:	4b37      	ldr	r3, [pc, #220]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 0203 	bic.w	r2, r3, #3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4934      	ldr	r1, [pc, #208]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006994:	4313      	orrs	r3, r2
 8006996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006998:	f7fc fb08 	bl	8002fac <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a0:	f7fc fb04 	bl	8002fac <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e04f      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b6:	4b2b      	ldr	r3, [pc, #172]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 020c 	and.w	r2, r3, #12
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1eb      	bne.n	80069a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d20c      	bcs.n	80069f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069de:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <HAL_RCC_ClockConfig+0x1b8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d001      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e032      	b.n	8006a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069fc:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4916      	ldr	r1, [pc, #88]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	490e      	ldr	r1, [pc, #56]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a2e:	f000 f821 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	490a      	ldr	r1, [pc, #40]	; (8006a68 <HAL_RCC_ClockConfig+0x1c0>)
 8006a40:	5ccb      	ldrb	r3, [r1, r3]
 8006a42:	fa22 f303 	lsr.w	r3, r2, r3
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a4a:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fc fa68 	bl	8002f24 <HAL_InitTick>

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40023c00 	.word	0x40023c00
 8006a64:	40023800 	.word	0x40023800
 8006a68:	0800c2fc 	.word	0x0800c2fc
 8006a6c:	20000008 	.word	0x20000008
 8006a70:	2000000c 	.word	0x2000000c

08006a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a78:	b094      	sub	sp, #80	; 0x50
 8006a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a80:	2300      	movs	r3, #0
 8006a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a84:	2300      	movs	r3, #0
 8006a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a8c:	4b79      	ldr	r3, [pc, #484]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 030c 	and.w	r3, r3, #12
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d00d      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	f200 80e1 	bhi.w	8006c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d003      	beq.n	8006aae <HAL_RCC_GetSysClockFreq+0x3a>
 8006aa6:	e0db      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b73      	ldr	r3, [pc, #460]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006aac:	e0db      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aae:	4b73      	ldr	r3, [pc, #460]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ab2:	e0d8      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ab4:	4b6f      	ldr	r3, [pc, #444]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006abe:	4b6d      	ldr	r3, [pc, #436]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d063      	beq.n	8006b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aca:	4b6a      	ldr	r3, [pc, #424]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	099b      	lsrs	r3, r3, #6
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006adc:	633b      	str	r3, [r7, #48]	; 0x30
 8006ade:	2300      	movs	r3, #0
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	462b      	mov	r3, r5
 8006aea:	f04f 0000 	mov.w	r0, #0
 8006aee:	f04f 0100 	mov.w	r1, #0
 8006af2:	0159      	lsls	r1, r3, #5
 8006af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006af8:	0150      	lsls	r0, r2, #5
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4621      	mov	r1, r4
 8006b00:	1a51      	subs	r1, r2, r1
 8006b02:	6139      	str	r1, [r7, #16]
 8006b04:	4629      	mov	r1, r5
 8006b06:	eb63 0301 	sbc.w	r3, r3, r1
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b18:	4659      	mov	r1, fp
 8006b1a:	018b      	lsls	r3, r1, #6
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b22:	4651      	mov	r1, sl
 8006b24:	018a      	lsls	r2, r1, #6
 8006b26:	4651      	mov	r1, sl
 8006b28:	ebb2 0801 	subs.w	r8, r2, r1
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b46:	4690      	mov	r8, r2
 8006b48:	4699      	mov	r9, r3
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	eb18 0303 	adds.w	r3, r8, r3
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	462b      	mov	r3, r5
 8006b54:	eb49 0303 	adc.w	r3, r9, r3
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b66:	4629      	mov	r1, r5
 8006b68:	024b      	lsls	r3, r1, #9
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b70:	4621      	mov	r1, r4
 8006b72:	024a      	lsls	r2, r1, #9
 8006b74:	4610      	mov	r0, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b84:	f7fa f868 	bl	8000c58 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b90:	e058      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b92:	4b38      	ldr	r3, [pc, #224]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	099b      	lsrs	r3, r3, #6
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	f04f 0000 	mov.w	r0, #0
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	0159      	lsls	r1, r3, #5
 8006bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bbe:	0150      	lsls	r0, r2, #5
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bca:	4649      	mov	r1, r9
 8006bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006be4:	ebb2 040a 	subs.w	r4, r2, sl
 8006be8:	eb63 050b 	sbc.w	r5, r3, fp
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	00eb      	lsls	r3, r5, #3
 8006bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bfa:	00e2      	lsls	r2, r4, #3
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	461d      	mov	r5, r3
 8006c00:	4643      	mov	r3, r8
 8006c02:	18e3      	adds	r3, r4, r3
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	464b      	mov	r3, r9
 8006c08:	eb45 0303 	adc.w	r3, r5, r3
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	028b      	lsls	r3, r1, #10
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c24:	4621      	mov	r1, r4
 8006c26:	028a      	lsls	r2, r1, #10
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2e:	2200      	movs	r2, #0
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	61fa      	str	r2, [r7, #28]
 8006c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c38:	f7fa f80e 	bl	8000c58 <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4613      	mov	r3, r2
 8006c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	3301      	adds	r3, #1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c5e:	e002      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3750      	adds	r7, #80	; 0x50
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c72:	bf00      	nop
 8006c74:	40023800 	.word	0x40023800
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	007a1200 	.word	0x007a1200

08006c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000008 	.word	0x20000008

08006c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c9c:	f7ff fff0 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	0a9b      	lsrs	r3, r3, #10
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4903      	ldr	r1, [pc, #12]	; (8006cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	0800c30c 	.word	0x0800c30c

08006cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cc4:	f7ff ffdc 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0b5b      	lsrs	r3, r3, #13
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	0800c30c 	.word	0x0800c30c

08006ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e041      	b.n	8006d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fb fe56 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f000 fd7e 	bl	8007828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e044      	b.n	8006e2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <HAL_TIM_Base_Start_IT+0xb0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d018      	beq.n	8006df4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dca:	d013      	beq.n	8006df4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1a      	ldr	r2, [pc, #104]	; (8006e3c <HAL_TIM_Base_Start_IT+0xb4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00e      	beq.n	8006df4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d009      	beq.n	8006df4 <HAL_TIM_Base_Start_IT+0x6c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <HAL_TIM_Base_Start_IT+0xbc>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d004      	beq.n	8006df4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <HAL_TIM_Base_Start_IT+0xc0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d111      	bne.n	8006e18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b06      	cmp	r3, #6
 8006e04:	d010      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e16:	e007      	b.n	8006e28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40014000 	.word	0x40014000

08006e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e041      	b.n	8006ee2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb fd36 	bl	80028e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 fccc 	bl	8007828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <HAL_TIM_PWM_Start+0x24>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	e022      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d109      	bne.n	8006f2a <HAL_TIM_PWM_Start+0x3e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	e015      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d109      	bne.n	8006f44 <HAL_TIM_PWM_Start+0x58>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	bf14      	ite	ne
 8006f3c:	2301      	movne	r3, #1
 8006f3e:	2300      	moveq	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	e008      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e068      	b.n	8007030 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x82>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f6c:	e013      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x92>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f7c:	e00b      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_PWM_Start+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f8c:	e003      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fee8 	bl	8007d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a23      	ldr	r2, [pc, #140]	; (8007038 <HAL_TIM_PWM_Start+0x14c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d107      	bne.n	8006fbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_TIM_PWM_Start+0x14c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d018      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x10e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd0:	d013      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x10e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_TIM_PWM_Start+0x150>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x10e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_TIM_PWM_Start+0x154>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x10e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_TIM_PWM_Start+0x158>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x10e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <HAL_TIM_PWM_Start+0x15c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d111      	bne.n	800701e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b06      	cmp	r3, #6
 800700a:	d010      	beq.n	800702e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	e007      	b.n	800702e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0201 	orr.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40010000 	.word	0x40010000
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40014000 	.word	0x40014000

0800704c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e097      	b.n	8007190 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fb fc5d 	bl	8002934 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f000 fbc1 	bl	8007828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	4313      	orrs	r3, r2
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80070ec:	f023 030c 	bic.w	r3, r3, #12
 80070f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	4313      	orrs	r3, r2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	011a      	lsls	r2, r3, #4
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	031b      	lsls	r3, r3, #12
 800711c:	4313      	orrs	r3, r2
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	4313      	orrs	r3, r2
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d102      	bne.n	80071d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071ce:	7b7b      	ldrb	r3, [r7, #13]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d001      	beq.n	80071d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e069      	b.n	80072ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e8:	e031      	b.n	800724e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d110      	bne.n	8007212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d102      	bne.n	80071fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071f6:	7b3b      	ldrb	r3, [r7, #12]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d001      	beq.n	8007200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e055      	b.n	80072ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007210:	e01d      	b.n	800724e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d108      	bne.n	800722a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800721e:	7b7b      	ldrb	r3, [r7, #13]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d102      	bne.n	800722a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007224:	7b3b      	ldrb	r3, [r7, #12]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d001      	beq.n	800722e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e03e      	b.n	80072ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_TIM_Encoder_Start+0xc4>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b04      	cmp	r3, #4
 8007258:	d008      	beq.n	800726c <HAL_TIM_Encoder_Start+0xd4>
 800725a:	e00f      	b.n	800727c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2201      	movs	r2, #1
 8007262:	2100      	movs	r1, #0
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fd85 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 800726a:	e016      	b.n	800729a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2201      	movs	r2, #1
 8007272:	2104      	movs	r1, #4
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fd7d 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 800727a:	e00e      	b.n	800729a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2201      	movs	r2, #1
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fd75 	bl	8007d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2201      	movs	r2, #1
 8007290:	2104      	movs	r1, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fd6e 	bl	8007d74 <TIM_CCxChannelCmd>
      break;
 8007298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d122      	bne.n	8007310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d11b      	bne.n	8007310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0202 	mvn.w	r2, #2
 80072e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa77 	bl	80077ea <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa69 	bl	80077d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa7a 	bl	80077fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b04      	cmp	r3, #4
 800731c:	d122      	bne.n	8007364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d11b      	bne.n	8007364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0204 	mvn.w	r2, #4
 8007334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa4d 	bl	80077ea <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa3f 	bl	80077d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa50 	bl	80077fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b08      	cmp	r3, #8
 8007370:	d122      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b08      	cmp	r3, #8
 800737e:	d11b      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0208 	mvn.w	r2, #8
 8007388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2204      	movs	r2, #4
 800738e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa23 	bl	80077ea <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa15 	bl	80077d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa26 	bl	80077fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b10      	cmp	r3, #16
 80073c4:	d122      	bne.n	800740c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	d11b      	bne.n	800740c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0210 	mvn.w	r2, #16
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2208      	movs	r2, #8
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9f9 	bl	80077ea <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9eb 	bl	80077d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9fc 	bl	80077fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d10e      	bne.n	8007438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b01      	cmp	r3, #1
 8007426:	d107      	bne.n	8007438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0201 	mvn.w	r2, #1
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fa f99e 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d10e      	bne.n	8007464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	2b80      	cmp	r3, #128	; 0x80
 8007452:	d107      	bne.n	8007464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fd78 	bl	8007f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d10e      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d107      	bne.n	8007490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9c1 	bl	8007812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b20      	cmp	r3, #32
 800749c:	d10e      	bne.n	80074bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d107      	bne.n	80074bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0220 	mvn.w	r2, #32
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fd42 	bl	8007f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074de:	2302      	movs	r3, #2
 80074e0:	e0ae      	b.n	8007640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	f200 809f 	bhi.w	8007630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800752d 	.word	0x0800752d
 80074fc:	08007631 	.word	0x08007631
 8007500:	08007631 	.word	0x08007631
 8007504:	08007631 	.word	0x08007631
 8007508:	0800756d 	.word	0x0800756d
 800750c:	08007631 	.word	0x08007631
 8007510:	08007631 	.word	0x08007631
 8007514:	08007631 	.word	0x08007631
 8007518:	080075af 	.word	0x080075af
 800751c:	08007631 	.word	0x08007631
 8007520:	08007631 	.word	0x08007631
 8007524:	08007631 	.word	0x08007631
 8007528:	080075ef 	.word	0x080075ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f9f8 	bl	8007928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0208 	orr.w	r2, r2, #8
 8007546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0204 	bic.w	r2, r2, #4
 8007556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6999      	ldr	r1, [r3, #24]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	619a      	str	r2, [r3, #24]
      break;
 800756a:	e064      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fa3e 	bl	80079f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	619a      	str	r2, [r3, #24]
      break;
 80075ac:	e043      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fa89 	bl	8007acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0208 	orr.w	r2, r2, #8
 80075c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0204 	bic.w	r2, r2, #4
 80075d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69d9      	ldr	r1, [r3, #28]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	61da      	str	r2, [r3, #28]
      break;
 80075ec:	e023      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fad3 	bl	8007ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69d9      	ldr	r1, [r3, #28]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	021a      	lsls	r2, r3, #8
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	61da      	str	r2, [r3, #28]
      break;
 800762e:	e002      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_TIM_ConfigClockSource+0x1c>
 8007660:	2302      	movs	r3, #2
 8007662:	e0b4      	b.n	80077ce <HAL_TIM_ConfigClockSource+0x186>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769c:	d03e      	beq.n	800771c <HAL_TIM_ConfigClockSource+0xd4>
 800769e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a2:	f200 8087 	bhi.w	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076aa:	f000 8086 	beq.w	80077ba <HAL_TIM_ConfigClockSource+0x172>
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b2:	d87f      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076b4:	2b70      	cmp	r3, #112	; 0x70
 80076b6:	d01a      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0xa6>
 80076b8:	2b70      	cmp	r3, #112	; 0x70
 80076ba:	d87b      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076bc:	2b60      	cmp	r3, #96	; 0x60
 80076be:	d050      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0x11a>
 80076c0:	2b60      	cmp	r3, #96	; 0x60
 80076c2:	d877      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076c4:	2b50      	cmp	r3, #80	; 0x50
 80076c6:	d03c      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0xfa>
 80076c8:	2b50      	cmp	r3, #80	; 0x50
 80076ca:	d873      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d058      	beq.n	8007782 <HAL_TIM_ConfigClockSource+0x13a>
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	d86f      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076d4:	2b30      	cmp	r3, #48	; 0x30
 80076d6:	d064      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x15a>
 80076d8:	2b30      	cmp	r3, #48	; 0x30
 80076da:	d86b      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d060      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x15a>
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d867      	bhi.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05c      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x15a>
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d05a      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x15a>
 80076ec:	e062      	b.n	80077b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6899      	ldr	r1, [r3, #8]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f000 fb19 	bl	8007d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	609a      	str	r2, [r3, #8]
      break;
 800771a:	e04f      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	6899      	ldr	r1, [r3, #8]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f000 fb02 	bl	8007d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800773e:	609a      	str	r2, [r3, #8]
      break;
 8007740:	e03c      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	461a      	mov	r2, r3
 8007750:	f000 fa76 	bl	8007c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2150      	movs	r1, #80	; 0x50
 800775a:	4618      	mov	r0, r3
 800775c:	f000 facf 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007760:	e02c      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	461a      	mov	r2, r3
 8007770:	f000 fa95 	bl	8007c9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2160      	movs	r1, #96	; 0x60
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fabf 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 8007780:	e01c      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	461a      	mov	r2, r3
 8007790:	f000 fa56 	bl	8007c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2140      	movs	r1, #64	; 0x40
 800779a:	4618      	mov	r0, r3
 800779c:	f000 faaf 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 80077a0:	e00c      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f000 faa6 	bl	8007cfe <TIM_ITRx_SetConfig>
      break;
 80077b2:	e003      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	e000      	b.n	80077bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a34      	ldr	r2, [pc, #208]	; (800790c <TIM_Base_SetConfig+0xe4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00f      	beq.n	8007860 <TIM_Base_SetConfig+0x38>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007846:	d00b      	beq.n	8007860 <TIM_Base_SetConfig+0x38>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a31      	ldr	r2, [pc, #196]	; (8007910 <TIM_Base_SetConfig+0xe8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d007      	beq.n	8007860 <TIM_Base_SetConfig+0x38>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a30      	ldr	r2, [pc, #192]	; (8007914 <TIM_Base_SetConfig+0xec>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_Base_SetConfig+0x38>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <TIM_Base_SetConfig+0xf0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d108      	bne.n	8007872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a25      	ldr	r2, [pc, #148]	; (800790c <TIM_Base_SetConfig+0xe4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01b      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007880:	d017      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a22      	ldr	r2, [pc, #136]	; (8007910 <TIM_Base_SetConfig+0xe8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a21      	ldr	r2, [pc, #132]	; (8007914 <TIM_Base_SetConfig+0xec>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a20      	ldr	r2, [pc, #128]	; (8007918 <TIM_Base_SetConfig+0xf0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <TIM_Base_SetConfig+0xf4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <TIM_Base_SetConfig+0xf8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_Base_SetConfig+0x8a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <TIM_Base_SetConfig+0xfc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <TIM_Base_SetConfig+0xe4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d103      	bne.n	80078f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	615a      	str	r2, [r3, #20]
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40010000 	.word	0x40010000
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	40014000 	.word	0x40014000
 8007920:	40014400 	.word	0x40014400
 8007924:	40014800 	.word	0x40014800

08007928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0201 	bic.w	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f023 0302 	bic.w	r3, r3, #2
 8007970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <TIM_OC1_SetConfig+0xc8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d10c      	bne.n	800799e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0308 	bic.w	r3, r3, #8
 800798a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 0304 	bic.w	r3, r3, #4
 800799c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <TIM_OC1_SetConfig+0xc8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d111      	bne.n	80079ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	621a      	str	r2, [r3, #32]
}
 80079e4:	bf00      	nop
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	40010000 	.word	0x40010000

080079f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f023 0210 	bic.w	r2, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 0320 	bic.w	r3, r3, #32
 8007a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <TIM_OC2_SetConfig+0xd4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d10d      	bne.n	8007a70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <TIM_OC2_SetConfig+0xd4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d113      	bne.n	8007aa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	621a      	str	r2, [r3, #32]
}
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40010000 	.word	0x40010000

08007acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0303 	bic.w	r3, r3, #3
 8007b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <TIM_OC3_SetConfig+0xd0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d10d      	bne.n	8007b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a14      	ldr	r2, [pc, #80]	; (8007b9c <TIM_OC3_SetConfig+0xd0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d113      	bne.n	8007b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	621a      	str	r2, [r3, #32]
}
 8007b90:	bf00      	nop
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	40010000 	.word	0x40010000

08007ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <TIM_OC4_SetConfig+0x9c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d109      	bne.n	8007c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	019b      	lsls	r3, r3, #6
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40010000 	.word	0x40010000

08007c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f023 0201 	bic.w	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f023 030a 	bic.w	r3, r3, #10
 8007c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b087      	sub	sp, #28
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0210 	bic.w	r2, r3, #16
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	031b      	lsls	r3, r3, #12
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f043 0307 	orr.w	r3, r3, #7
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2201      	movs	r2, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d101      	bne.n	8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e050      	b.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d018      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e24:	d013      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10c      	bne.n	8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40010000 	.word	0x40010000
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40014000 	.word	0x40014000

08007e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e03d      	b.n	8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e03f      	b.n	8007ffa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fa fd8e 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2224      	movs	r2, #36	; 0x24
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fd7b 	bl	8008aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695a      	ldr	r2, [r3, #20]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b08a      	sub	sp, #40	; 0x28
 8008006:	af02      	add	r7, sp, #8
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b20      	cmp	r3, #32
 8008020:	d17c      	bne.n	800811c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <HAL_UART_Transmit+0x2c>
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e075      	b.n	800811e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_UART_Transmit+0x3e>
 800803c:	2302      	movs	r3, #2
 800803e:	e06e      	b.n	800811e <HAL_UART_Transmit+0x11c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2221      	movs	r2, #33	; 0x21
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008056:	f7fa ffa9 	bl	8002fac <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008070:	d108      	bne.n	8008084 <HAL_UART_Transmit+0x82>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e003      	b.n	800808c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008094:	e02a      	b.n	80080ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2200      	movs	r2, #0
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 faf9 	bl	8008698 <UART_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e036      	b.n	800811e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	3302      	adds	r3, #2
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	e007      	b.n	80080de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	3301      	adds	r3, #1
 80080dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1cf      	bne.n	8008096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	2140      	movs	r1, #64	; 0x40
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fac9 	bl	8008698 <UART_WaitOnFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e006      	b.n	800811e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b0ba      	sub	sp, #232	; 0xe8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800814e:	2300      	movs	r3, #0
 8008150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008154:	2300      	movs	r3, #0
 8008156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <HAL_UART_IRQHandler+0x66>
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fbd3 	bl	8008932 <UART_Receive_IT>
      return;
 800818c:	e256      	b.n	800863c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80de 	beq.w	8008354 <HAL_UART_IRQHandler+0x22c>
 8008198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80d1 	beq.w	8008354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <HAL_UART_IRQHandler+0xae>
 80081be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f043 0201 	orr.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <HAL_UART_IRQHandler+0xd2>
 80081e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f043 0202 	orr.w	r2, r3, #2
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <HAL_UART_IRQHandler+0xf6>
 8008206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f043 0204 	orr.w	r2, r3, #4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d011      	beq.n	800824e <HAL_UART_IRQHandler+0x126>
 800822a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	f043 0208 	orr.w	r2, r3, #8
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 81ed 	beq.w	8008632 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_UART_IRQHandler+0x14e>
 8008264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fb5e 	bl	8008932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	bf0c      	ite	eq
 8008284:	2301      	moveq	r3, #1
 8008286:	2300      	movne	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d103      	bne.n	80082a2 <HAL_UART_IRQHandler+0x17a>
 800829a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d04f      	beq.n	8008342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa66 	bl	8008774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b40      	cmp	r3, #64	; 0x40
 80082b4:	d141      	bne.n	800833a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3314      	adds	r3, #20
 80082bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3314      	adds	r3, #20
 80082de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1d9      	bne.n	80082b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d013      	beq.n	8008332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	4a7d      	ldr	r2, [pc, #500]	; (8008504 <HAL_UART_IRQHandler+0x3dc>)
 8008310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	4618      	mov	r0, r3
 8008318:	f7fb f8a8 	bl	800346c <HAL_DMA_Abort_IT>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d016      	beq.n	8008350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008330:	e00e      	b.n	8008350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f99a 	bl	800866c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008338:	e00a      	b.n	8008350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f996 	bl	800866c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	e006      	b.n	8008350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f992 	bl	800866c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800834e:	e170      	b.n	8008632 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	bf00      	nop
    return;
 8008352:	e16e      	b.n	8008632 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008358:	2b01      	cmp	r3, #1
 800835a:	f040 814a 	bne.w	80085f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8143 	beq.w	80085f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 813c 	beq.w	80085f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	f040 80b4 	bne.w	8008508 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 8140 	beq.w	8008636 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083be:	429a      	cmp	r2, r3
 80083c0:	f080 8139 	bcs.w	8008636 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	f000 8088 	beq.w	80084ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800840a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800841e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1d9      	bne.n	80083da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3314      	adds	r3, #20
 8008446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800844a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800844e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800845c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e1      	bne.n	8008426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3314      	adds	r3, #20
 8008468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800848c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e3      	bne.n	8008462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	330c      	adds	r3, #12
 80084c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80084ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e3      	bne.n	80084a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fa ff51 	bl	800338c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8c0 	bl	8008680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008500:	e099      	b.n	8008636 <HAL_UART_IRQHandler+0x50e>
 8008502:	bf00      	nop
 8008504:	0800883b 	.word	0x0800883b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 808b 	beq.w	800863a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8086 	beq.w	800863a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	330c      	adds	r3, #12
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008552:	647a      	str	r2, [r7, #68]	; 0x44
 8008554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e3      	bne.n	800852e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3314      	adds	r3, #20
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	623b      	str	r3, [r7, #32]
   return(result);
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3314      	adds	r3, #20
 8008586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800858a:	633a      	str	r2, [r7, #48]	; 0x30
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e3      	bne.n	8008566 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	330c      	adds	r3, #12
 80085b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 0310 	bic.w	r3, r3, #16
 80085c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085d0:	61fa      	str	r2, [r7, #28]
 80085d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	69b9      	ldr	r1, [r7, #24]
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	617b      	str	r3, [r7, #20]
   return(result);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e3      	bne.n	80085ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f848 	bl	8008680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085f0:	e023      	b.n	800863a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <HAL_UART_IRQHandler+0x4ea>
 80085fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f929 	bl	8008862 <UART_Transmit_IT>
    return;
 8008610:	e014      	b.n	800863c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <HAL_UART_IRQHandler+0x514>
 800861e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f969 	bl	8008902 <UART_EndTransmit_IT>
    return;
 8008630:	e004      	b.n	800863c <HAL_UART_IRQHandler+0x514>
    return;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <HAL_UART_IRQHandler+0x514>
      return;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_UART_IRQHandler+0x514>
      return;
 800863a:	bf00      	nop
  }
}
 800863c:	37e8      	adds	r7, #232	; 0xe8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop

08008644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	; 0x40
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a8:	e050      	b.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d04c      	beq.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086b8:	f7fa fc78 	bl	8002fac <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d241      	bcs.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086e8:	637a      	str	r2, [r7, #52]	; 0x34
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e5      	bne.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3314      	adds	r3, #20
 8008702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	613b      	str	r3, [r7, #16]
   return(result);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	63bb      	str	r3, [r7, #56]	; 0x38
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3314      	adds	r3, #20
 800871a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871c:	623a      	str	r2, [r7, #32]
 800871e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	69f9      	ldr	r1, [r7, #28]
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	61bb      	str	r3, [r7, #24]
   return(result);
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e00f      	b.n	800876c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4013      	ands	r3, r2
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	429a      	cmp	r2, r3
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	429a      	cmp	r2, r3
 8008768:	d09f      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3740      	adds	r7, #64	; 0x40
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b095      	sub	sp, #84	; 0x54
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	330c      	adds	r3, #12
 800879a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800879c:	643a      	str	r2, [r7, #64]	; 0x40
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3314      	adds	r3, #20
 80087b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e5      	bne.n	80087b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d119      	bne.n	8008820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f023 0310 	bic.w	r3, r3, #16
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800880c:	61ba      	str	r2, [r7, #24]
 800880e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6979      	ldr	r1, [r7, #20]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	613b      	str	r3, [r7, #16]
   return(result);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e5      	bne.n	80087ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800882e:	bf00      	nop
 8008830:	3754      	adds	r7, #84	; 0x54
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff ff09 	bl	800866c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b21      	cmp	r3, #33	; 0x21
 8008874:	d13e      	bne.n	80088f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887e:	d114      	bne.n	80088aa <UART_Transmit_IT+0x48>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d110      	bne.n	80088aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800889c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	621a      	str	r2, [r3, #32]
 80088a8:	e008      	b.n	80088bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	1c59      	adds	r1, r3, #1
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6211      	str	r1, [r2, #32]
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4619      	mov	r1, r3
 80088ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10f      	bne.n	80088f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e000      	b.n	80088f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fe8e 	bl	8008644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b08c      	sub	sp, #48	; 0x30
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b22      	cmp	r3, #34	; 0x22
 8008944:	f040 80ab 	bne.w	8008a9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008950:	d117      	bne.n	8008982 <UART_Receive_IT+0x50>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d113      	bne.n	8008982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	b29b      	uxth	r3, r3
 800896c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008970:	b29a      	uxth	r2, r3
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	1c9a      	adds	r2, r3, #2
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	629a      	str	r2, [r3, #40]	; 0x28
 8008980:	e026      	b.n	80089d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	d007      	beq.n	80089a6 <UART_Receive_IT+0x74>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <UART_Receive_IT+0x82>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	e008      	b.n	80089c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29b      	uxth	r3, r3
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4619      	mov	r1, r3
 80089de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d15a      	bne.n	8008a9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0220 	bic.w	r2, r2, #32
 80089f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695a      	ldr	r2, [r3, #20]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d135      	bne.n	8008a90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f023 0310 	bic.w	r3, r3, #16
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4a:	623a      	str	r2, [r7, #32]
 8008a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	69f9      	ldr	r1, [r7, #28]
 8008a50:	6a3a      	ldr	r2, [r7, #32]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d10a      	bne.n	8008a82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff fdf9 	bl	8008680 <HAL_UARTEx_RxEventCallback>
 8008a8e:	e002      	b.n	8008a96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fde1 	bl	8008658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e002      	b.n	8008aa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e000      	b.n	8008aa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a9e:	2302      	movs	r3, #2
  }
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3730      	adds	r7, #48	; 0x30
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aac:	b0c0      	sub	sp, #256	; 0x100
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	68d9      	ldr	r1, [r3, #12]
 8008ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	ea40 0301 	orr.w	r3, r0, r1
 8008ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b00:	f021 010c 	bic.w	r1, r1, #12
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b22:	6999      	ldr	r1, [r3, #24]
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	ea40 0301 	orr.w	r3, r0, r1
 8008b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b8f      	ldr	r3, [pc, #572]	; (8008d74 <UART_SetConfig+0x2cc>)
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d005      	beq.n	8008b48 <UART_SetConfig+0xa0>
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b8d      	ldr	r3, [pc, #564]	; (8008d78 <UART_SetConfig+0x2d0>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d104      	bne.n	8008b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b48:	f7fe f8ba 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 8008b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b50:	e003      	b.n	8008b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b52:	f7fe f8a1 	bl	8006c98 <HAL_RCC_GetPCLK1Freq>
 8008b56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b64:	f040 810c 	bne.w	8008d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	1891      	adds	r1, r2, r2
 8008b80:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b82:	415b      	adcs	r3, r3
 8008b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	eb12 0801 	adds.w	r8, r2, r1
 8008b90:	4629      	mov	r1, r5
 8008b92:	eb43 0901 	adc.w	r9, r3, r1
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008baa:	4690      	mov	r8, r2
 8008bac:	4699      	mov	r9, r3
 8008bae:	4623      	mov	r3, r4
 8008bb0:	eb18 0303 	adds.w	r3, r8, r3
 8008bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bb8:	462b      	mov	r3, r5
 8008bba:	eb49 0303 	adc.w	r3, r9, r3
 8008bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	18db      	adds	r3, r3, r3
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
 8008bdc:	4613      	mov	r3, r2
 8008bde:	eb42 0303 	adc.w	r3, r2, r3
 8008be2:	657b      	str	r3, [r7, #84]	; 0x54
 8008be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bec:	f7f8 f834 	bl	8000c58 <__aeabi_uldivmod>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4b61      	ldr	r3, [pc, #388]	; (8008d7c <UART_SetConfig+0x2d4>)
 8008bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bfa:	095b      	lsrs	r3, r3, #5
 8008bfc:	011c      	lsls	r4, r3, #4
 8008bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	1891      	adds	r1, r2, r2
 8008c16:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c18:	415b      	adcs	r3, r3
 8008c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c20:	4641      	mov	r1, r8
 8008c22:	eb12 0a01 	adds.w	sl, r2, r1
 8008c26:	4649      	mov	r1, r9
 8008c28:	eb43 0b01 	adc.w	fp, r3, r1
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c40:	4692      	mov	sl, r2
 8008c42:	469b      	mov	fp, r3
 8008c44:	4643      	mov	r3, r8
 8008c46:	eb1a 0303 	adds.w	r3, sl, r3
 8008c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	eb4b 0303 	adc.w	r3, fp, r3
 8008c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	18db      	adds	r3, r3, r3
 8008c70:	643b      	str	r3, [r7, #64]	; 0x40
 8008c72:	4613      	mov	r3, r2
 8008c74:	eb42 0303 	adc.w	r3, r2, r3
 8008c78:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c82:	f7f7 ffe9 	bl	8000c58 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4b3b      	ldr	r3, [pc, #236]	; (8008d7c <UART_SetConfig+0x2d4>)
 8008c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	2264      	movs	r2, #100	; 0x64
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	1acb      	subs	r3, r1, r3
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ca2:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <UART_SetConfig+0x2d4>)
 8008ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb0:	441c      	add	r4, r3
 8008cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	1891      	adds	r1, r2, r2
 8008cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ccc:	415b      	adcs	r3, r3
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	1851      	adds	r1, r2, r1
 8008cd8:	6339      	str	r1, [r7, #48]	; 0x30
 8008cda:	4649      	mov	r1, r9
 8008cdc:	414b      	adcs	r3, r1
 8008cde:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cec:	4659      	mov	r1, fp
 8008cee:	00cb      	lsls	r3, r1, #3
 8008cf0:	4651      	mov	r1, sl
 8008cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf6:	4651      	mov	r1, sl
 8008cf8:	00ca      	lsls	r2, r1, #3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4642      	mov	r2, r8
 8008d02:	189b      	adds	r3, r3, r2
 8008d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d08:	464b      	mov	r3, r9
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	eb42 0303 	adc.w	r3, r2, r3
 8008d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d28:	460b      	mov	r3, r1
 8008d2a:	18db      	adds	r3, r3, r3
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d2e:	4613      	mov	r3, r2
 8008d30:	eb42 0303 	adc.w	r3, r2, r3
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d3e:	f7f7 ff8b 	bl	8000c58 <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <UART_SetConfig+0x2d4>)
 8008d48:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	2164      	movs	r1, #100	; 0x64
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	3332      	adds	r3, #50	; 0x32
 8008d5a:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <UART_SetConfig+0x2d4>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0207 	and.w	r2, r3, #7
 8008d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4422      	add	r2, r4
 8008d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d70:	e105      	b.n	8008f7e <UART_SetConfig+0x4d6>
 8008d72:	bf00      	nop
 8008d74:	40011000 	.word	0x40011000
 8008d78:	40011400 	.word	0x40011400
 8008d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d92:	4642      	mov	r2, r8
 8008d94:	464b      	mov	r3, r9
 8008d96:	1891      	adds	r1, r2, r2
 8008d98:	6239      	str	r1, [r7, #32]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008da2:	4641      	mov	r1, r8
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	4649      	mov	r1, r9
 8008da8:	eb43 0501 	adc.w	r5, r3, r1
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	00eb      	lsls	r3, r5, #3
 8008db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dba:	00e2      	lsls	r2, r4, #3
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	4643      	mov	r3, r8
 8008dc2:	18e3      	adds	r3, r4, r3
 8008dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dc8:	464b      	mov	r3, r9
 8008dca:	eb45 0303 	adc.w	r3, r5, r3
 8008dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dee:	4629      	mov	r1, r5
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	4621      	mov	r1, r4
 8008df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df8:	4621      	mov	r1, r4
 8008dfa:	008a      	lsls	r2, r1, #2
 8008dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e00:	f7f7 ff2a 	bl	8000c58 <__aeabi_uldivmod>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4b60      	ldr	r3, [pc, #384]	; (8008f8c <UART_SetConfig+0x4e4>)
 8008e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	011c      	lsls	r4, r3, #4
 8008e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	1891      	adds	r1, r2, r2
 8008e2a:	61b9      	str	r1, [r7, #24]
 8008e2c:	415b      	adcs	r3, r3
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e34:	4641      	mov	r1, r8
 8008e36:	1851      	adds	r1, r2, r1
 8008e38:	6139      	str	r1, [r7, #16]
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	414b      	adcs	r3, r1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	00cb      	lsls	r3, r1, #3
 8008e50:	4651      	mov	r1, sl
 8008e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e56:	4651      	mov	r1, sl
 8008e58:	00ca      	lsls	r2, r1, #3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4642      	mov	r2, r8
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e68:	464b      	mov	r3, r9
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	008b      	lsls	r3, r1, #2
 8008e90:	4641      	mov	r1, r8
 8008e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e96:	4641      	mov	r1, r8
 8008e98:	008a      	lsls	r2, r1, #2
 8008e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e9e:	f7f7 fedb 	bl	8000c58 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4b39      	ldr	r3, [pc, #228]	; (8008f8c <UART_SetConfig+0x4e4>)
 8008ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	2164      	movs	r1, #100	; 0x64
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	3332      	adds	r3, #50	; 0x32
 8008eba:	4a34      	ldr	r2, [pc, #208]	; (8008f8c <UART_SetConfig+0x4e4>)
 8008ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec0:	095b      	lsrs	r3, r3, #5
 8008ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec6:	441c      	add	r4, r3
 8008ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ecc:	2200      	movs	r2, #0
 8008ece:	673b      	str	r3, [r7, #112]	; 0x70
 8008ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8008ed2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	1891      	adds	r1, r2, r2
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	415b      	adcs	r3, r3
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	1851      	adds	r1, r2, r1
 8008eea:	6039      	str	r1, [r7, #0]
 8008eec:	4649      	mov	r1, r9
 8008eee:	414b      	adcs	r3, r1
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008efe:	4659      	mov	r1, fp
 8008f00:	00cb      	lsls	r3, r1, #3
 8008f02:	4651      	mov	r1, sl
 8008f04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f08:	4651      	mov	r1, sl
 8008f0a:	00ca      	lsls	r2, r1, #3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	4642      	mov	r2, r8
 8008f14:	189b      	adds	r3, r3, r2
 8008f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f18:	464b      	mov	r3, r9
 8008f1a:	460a      	mov	r2, r1
 8008f1c:	eb42 0303 	adc.w	r3, r2, r3
 8008f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f2c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	008b      	lsls	r3, r1, #2
 8008f3e:	4641      	mov	r1, r8
 8008f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f44:	4641      	mov	r1, r8
 8008f46:	008a      	lsls	r2, r1, #2
 8008f48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f4c:	f7f7 fe84 	bl	8000c58 <__aeabi_uldivmod>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <UART_SetConfig+0x4e4>)
 8008f56:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5a:	095b      	lsrs	r3, r3, #5
 8008f5c:	2164      	movs	r1, #100	; 0x64
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	3332      	adds	r3, #50	; 0x32
 8008f68:	4a08      	ldr	r2, [pc, #32]	; (8008f8c <UART_SetConfig+0x4e4>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4422      	add	r2, r4
 8008f7c:	609a      	str	r2, [r3, #8]
}
 8008f7e:	bf00      	nop
 8008f80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f84:	46bd      	mov	sp, r7
 8008f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8a:	bf00      	nop
 8008f8c:	51eb851f 	.word	0x51eb851f

08008f90 <__errno>:
 8008f90:	4b01      	ldr	r3, [pc, #4]	; (8008f98 <__errno+0x8>)
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	20000014 	.word	0x20000014

08008f9c <__libc_init_array>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4d0d      	ldr	r5, [pc, #52]	; (8008fd4 <__libc_init_array+0x38>)
 8008fa0:	4c0d      	ldr	r4, [pc, #52]	; (8008fd8 <__libc_init_array+0x3c>)
 8008fa2:	1b64      	subs	r4, r4, r5
 8008fa4:	10a4      	asrs	r4, r4, #2
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	42a6      	cmp	r6, r4
 8008faa:	d109      	bne.n	8008fc0 <__libc_init_array+0x24>
 8008fac:	4d0b      	ldr	r5, [pc, #44]	; (8008fdc <__libc_init_array+0x40>)
 8008fae:	4c0c      	ldr	r4, [pc, #48]	; (8008fe0 <__libc_init_array+0x44>)
 8008fb0:	f003 f97c 	bl	800c2ac <_init>
 8008fb4:	1b64      	subs	r4, r4, r5
 8008fb6:	10a4      	asrs	r4, r4, #2
 8008fb8:	2600      	movs	r6, #0
 8008fba:	42a6      	cmp	r6, r4
 8008fbc:	d105      	bne.n	8008fca <__libc_init_array+0x2e>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc4:	4798      	blx	r3
 8008fc6:	3601      	adds	r6, #1
 8008fc8:	e7ee      	b.n	8008fa8 <__libc_init_array+0xc>
 8008fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fce:	4798      	blx	r3
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	e7f2      	b.n	8008fba <__libc_init_array+0x1e>
 8008fd4:	0800c770 	.word	0x0800c770
 8008fd8:	0800c770 	.word	0x0800c770
 8008fdc:	0800c770 	.word	0x0800c770
 8008fe0:	0800c774 	.word	0x0800c774

08008fe4 <memset>:
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d100      	bne.n	8008fee <memset+0xa>
 8008fec:	4770      	bx	lr
 8008fee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff2:	e7f9      	b.n	8008fe8 <memset+0x4>

08008ff4 <__cvt>:
 8008ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff8:	ec55 4b10 	vmov	r4, r5, d0
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	460e      	mov	r6, r1
 8009000:	4619      	mov	r1, r3
 8009002:	462b      	mov	r3, r5
 8009004:	bfbb      	ittet	lt
 8009006:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800900a:	461d      	movlt	r5, r3
 800900c:	2300      	movge	r3, #0
 800900e:	232d      	movlt	r3, #45	; 0x2d
 8009010:	700b      	strb	r3, [r1, #0]
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009018:	4691      	mov	r9, r2
 800901a:	f023 0820 	bic.w	r8, r3, #32
 800901e:	bfbc      	itt	lt
 8009020:	4622      	movlt	r2, r4
 8009022:	4614      	movlt	r4, r2
 8009024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009028:	d005      	beq.n	8009036 <__cvt+0x42>
 800902a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800902e:	d100      	bne.n	8009032 <__cvt+0x3e>
 8009030:	3601      	adds	r6, #1
 8009032:	2102      	movs	r1, #2
 8009034:	e000      	b.n	8009038 <__cvt+0x44>
 8009036:	2103      	movs	r1, #3
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	ab02      	add	r3, sp, #8
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	ec45 4b10 	vmov	d0, r4, r5
 8009044:	4653      	mov	r3, sl
 8009046:	4632      	mov	r2, r6
 8009048:	f000 fcea 	bl	8009a20 <_dtoa_r>
 800904c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009050:	4607      	mov	r7, r0
 8009052:	d102      	bne.n	800905a <__cvt+0x66>
 8009054:	f019 0f01 	tst.w	r9, #1
 8009058:	d022      	beq.n	80090a0 <__cvt+0xac>
 800905a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905e:	eb07 0906 	add.w	r9, r7, r6
 8009062:	d110      	bne.n	8009086 <__cvt+0x92>
 8009064:	783b      	ldrb	r3, [r7, #0]
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	d10a      	bne.n	8009080 <__cvt+0x8c>
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fd31 	bl	8000ad8 <__aeabi_dcmpeq>
 8009076:	b918      	cbnz	r0, 8009080 <__cvt+0x8c>
 8009078:	f1c6 0601 	rsb	r6, r6, #1
 800907c:	f8ca 6000 	str.w	r6, [sl]
 8009080:	f8da 3000 	ldr.w	r3, [sl]
 8009084:	4499      	add	r9, r3
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8009092:	b108      	cbz	r0, 8009098 <__cvt+0xa4>
 8009094:	f8cd 900c 	str.w	r9, [sp, #12]
 8009098:	2230      	movs	r2, #48	; 0x30
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	454b      	cmp	r3, r9
 800909e:	d307      	bcc.n	80090b0 <__cvt+0xbc>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a4:	1bdb      	subs	r3, r3, r7
 80090a6:	4638      	mov	r0, r7
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	b004      	add	sp, #16
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	1c59      	adds	r1, r3, #1
 80090b2:	9103      	str	r1, [sp, #12]
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e7f0      	b.n	800909a <__cvt+0xa6>

080090b8 <__exponent>:
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	4603      	mov	r3, r0
 80090bc:	2900      	cmp	r1, #0
 80090be:	bfb8      	it	lt
 80090c0:	4249      	neglt	r1, r1
 80090c2:	f803 2b02 	strb.w	r2, [r3], #2
 80090c6:	bfb4      	ite	lt
 80090c8:	222d      	movlt	r2, #45	; 0x2d
 80090ca:	222b      	movge	r2, #43	; 0x2b
 80090cc:	2909      	cmp	r1, #9
 80090ce:	7042      	strb	r2, [r0, #1]
 80090d0:	dd2a      	ble.n	8009128 <__exponent+0x70>
 80090d2:	f10d 0407 	add.w	r4, sp, #7
 80090d6:	46a4      	mov	ip, r4
 80090d8:	270a      	movs	r7, #10
 80090da:	46a6      	mov	lr, r4
 80090dc:	460a      	mov	r2, r1
 80090de:	fb91 f6f7 	sdiv	r6, r1, r7
 80090e2:	fb07 1516 	mls	r5, r7, r6, r1
 80090e6:	3530      	adds	r5, #48	; 0x30
 80090e8:	2a63      	cmp	r2, #99	; 0x63
 80090ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80090ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090f2:	4631      	mov	r1, r6
 80090f4:	dcf1      	bgt.n	80090da <__exponent+0x22>
 80090f6:	3130      	adds	r1, #48	; 0x30
 80090f8:	f1ae 0502 	sub.w	r5, lr, #2
 80090fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009100:	1c44      	adds	r4, r0, #1
 8009102:	4629      	mov	r1, r5
 8009104:	4561      	cmp	r1, ip
 8009106:	d30a      	bcc.n	800911e <__exponent+0x66>
 8009108:	f10d 0209 	add.w	r2, sp, #9
 800910c:	eba2 020e 	sub.w	r2, r2, lr
 8009110:	4565      	cmp	r5, ip
 8009112:	bf88      	it	hi
 8009114:	2200      	movhi	r2, #0
 8009116:	4413      	add	r3, r2
 8009118:	1a18      	subs	r0, r3, r0
 800911a:	b003      	add	sp, #12
 800911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009122:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009126:	e7ed      	b.n	8009104 <__exponent+0x4c>
 8009128:	2330      	movs	r3, #48	; 0x30
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	7083      	strb	r3, [r0, #2]
 800912e:	70c1      	strb	r1, [r0, #3]
 8009130:	1d03      	adds	r3, r0, #4
 8009132:	e7f1      	b.n	8009118 <__exponent+0x60>

08009134 <_printf_float>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	ed2d 8b02 	vpush	{d8}
 800913c:	b08d      	sub	sp, #52	; 0x34
 800913e:	460c      	mov	r4, r1
 8009140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009144:	4616      	mov	r6, r2
 8009146:	461f      	mov	r7, r3
 8009148:	4605      	mov	r5, r0
 800914a:	f001 fa57 	bl	800a5fc <_localeconv_r>
 800914e:	f8d0 a000 	ldr.w	sl, [r0]
 8009152:	4650      	mov	r0, sl
 8009154:	f7f7 f844 	bl	80001e0 <strlen>
 8009158:	2300      	movs	r3, #0
 800915a:	930a      	str	r3, [sp, #40]	; 0x28
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	f8d8 3000 	ldr.w	r3, [r8]
 8009164:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	f103 0208 	add.w	r2, r3, #8
 8009172:	f8c8 2000 	str.w	r2, [r8]
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800917e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	f8cd 8018 	str.w	r8, [sp, #24]
 800918c:	ee08 0a10 	vmov	s16, r0
 8009190:	4b9f      	ldr	r3, [pc, #636]	; (8009410 <_printf_float+0x2dc>)
 8009192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009196:	f04f 32ff 	mov.w	r2, #4294967295
 800919a:	f7f7 fccf 	bl	8000b3c <__aeabi_dcmpun>
 800919e:	bb88      	cbnz	r0, 8009204 <_printf_float+0xd0>
 80091a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a4:	4b9a      	ldr	r3, [pc, #616]	; (8009410 <_printf_float+0x2dc>)
 80091a6:	f04f 32ff 	mov.w	r2, #4294967295
 80091aa:	f7f7 fca9 	bl	8000b00 <__aeabi_dcmple>
 80091ae:	bb48      	cbnz	r0, 8009204 <_printf_float+0xd0>
 80091b0:	2200      	movs	r2, #0
 80091b2:	2300      	movs	r3, #0
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fc98 	bl	8000aec <__aeabi_dcmplt>
 80091bc:	b110      	cbz	r0, 80091c4 <_printf_float+0x90>
 80091be:	232d      	movs	r3, #45	; 0x2d
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c4:	4b93      	ldr	r3, [pc, #588]	; (8009414 <_printf_float+0x2e0>)
 80091c6:	4894      	ldr	r0, [pc, #592]	; (8009418 <_printf_float+0x2e4>)
 80091c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091cc:	bf94      	ite	ls
 80091ce:	4698      	movls	r8, r3
 80091d0:	4680      	movhi	r8, r0
 80091d2:	2303      	movs	r3, #3
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	9b05      	ldr	r3, [sp, #20]
 80091d8:	f023 0204 	bic.w	r2, r3, #4
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	f04f 0900 	mov.w	r9, #0
 80091e2:	9700      	str	r7, [sp, #0]
 80091e4:	4633      	mov	r3, r6
 80091e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f9d8 	bl	80095a0 <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	f040 8090 	bne.w	8009316 <_printf_float+0x1e2>
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	b00d      	add	sp, #52	; 0x34
 80091fc:	ecbd 8b02 	vpop	{d8}
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	4642      	mov	r2, r8
 8009206:	464b      	mov	r3, r9
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 fc96 	bl	8000b3c <__aeabi_dcmpun>
 8009210:	b140      	cbz	r0, 8009224 <_printf_float+0xf0>
 8009212:	464b      	mov	r3, r9
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfbc      	itt	lt
 8009218:	232d      	movlt	r3, #45	; 0x2d
 800921a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800921e:	487f      	ldr	r0, [pc, #508]	; (800941c <_printf_float+0x2e8>)
 8009220:	4b7f      	ldr	r3, [pc, #508]	; (8009420 <_printf_float+0x2ec>)
 8009222:	e7d1      	b.n	80091c8 <_printf_float+0x94>
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800922a:	9206      	str	r2, [sp, #24]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	d13f      	bne.n	80092b0 <_printf_float+0x17c>
 8009230:	2306      	movs	r3, #6
 8009232:	6063      	str	r3, [r4, #4]
 8009234:	9b05      	ldr	r3, [sp, #20]
 8009236:	6861      	ldr	r1, [r4, #4]
 8009238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800923c:	2300      	movs	r3, #0
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	ab0a      	add	r3, sp, #40	; 0x28
 8009242:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009246:	ab09      	add	r3, sp, #36	; 0x24
 8009248:	ec49 8b10 	vmov	d0, r8, r9
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff fecd 	bl	8008ff4 <__cvt>
 800925a:	9b06      	ldr	r3, [sp, #24]
 800925c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800925e:	2b47      	cmp	r3, #71	; 0x47
 8009260:	4680      	mov	r8, r0
 8009262:	d108      	bne.n	8009276 <_printf_float+0x142>
 8009264:	1cc8      	adds	r0, r1, #3
 8009266:	db02      	blt.n	800926e <_printf_float+0x13a>
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	4299      	cmp	r1, r3
 800926c:	dd41      	ble.n	80092f2 <_printf_float+0x1be>
 800926e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009272:	fa5f fb8b 	uxtb.w	fp, fp
 8009276:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800927a:	d820      	bhi.n	80092be <_printf_float+0x18a>
 800927c:	3901      	subs	r1, #1
 800927e:	465a      	mov	r2, fp
 8009280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009284:	9109      	str	r1, [sp, #36]	; 0x24
 8009286:	f7ff ff17 	bl	80090b8 <__exponent>
 800928a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800928c:	1813      	adds	r3, r2, r0
 800928e:	2a01      	cmp	r2, #1
 8009290:	4681      	mov	r9, r0
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	dc02      	bgt.n	800929c <_printf_float+0x168>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	07d2      	lsls	r2, r2, #31
 800929a:	d501      	bpl.n	80092a0 <_printf_float+0x16c>
 800929c:	3301      	adds	r3, #1
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d09c      	beq.n	80091e2 <_printf_float+0xae>
 80092a8:	232d      	movs	r3, #45	; 0x2d
 80092aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ae:	e798      	b.n	80091e2 <_printf_float+0xae>
 80092b0:	9a06      	ldr	r2, [sp, #24]
 80092b2:	2a47      	cmp	r2, #71	; 0x47
 80092b4:	d1be      	bne.n	8009234 <_printf_float+0x100>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1bc      	bne.n	8009234 <_printf_float+0x100>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e7b9      	b.n	8009232 <_printf_float+0xfe>
 80092be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092c2:	d118      	bne.n	80092f6 <_printf_float+0x1c2>
 80092c4:	2900      	cmp	r1, #0
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	dd0b      	ble.n	80092e2 <_printf_float+0x1ae>
 80092ca:	6121      	str	r1, [r4, #16]
 80092cc:	b913      	cbnz	r3, 80092d4 <_printf_float+0x1a0>
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	07d0      	lsls	r0, r2, #31
 80092d2:	d502      	bpl.n	80092da <_printf_float+0x1a6>
 80092d4:	3301      	adds	r3, #1
 80092d6:	440b      	add	r3, r1
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	65a1      	str	r1, [r4, #88]	; 0x58
 80092dc:	f04f 0900 	mov.w	r9, #0
 80092e0:	e7de      	b.n	80092a0 <_printf_float+0x16c>
 80092e2:	b913      	cbnz	r3, 80092ea <_printf_float+0x1b6>
 80092e4:	6822      	ldr	r2, [r4, #0]
 80092e6:	07d2      	lsls	r2, r2, #31
 80092e8:	d501      	bpl.n	80092ee <_printf_float+0x1ba>
 80092ea:	3302      	adds	r3, #2
 80092ec:	e7f4      	b.n	80092d8 <_printf_float+0x1a4>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7f2      	b.n	80092d8 <_printf_float+0x1a4>
 80092f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	4299      	cmp	r1, r3
 80092fa:	db05      	blt.n	8009308 <_printf_float+0x1d4>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	6121      	str	r1, [r4, #16]
 8009300:	07d8      	lsls	r0, r3, #31
 8009302:	d5ea      	bpl.n	80092da <_printf_float+0x1a6>
 8009304:	1c4b      	adds	r3, r1, #1
 8009306:	e7e7      	b.n	80092d8 <_printf_float+0x1a4>
 8009308:	2900      	cmp	r1, #0
 800930a:	bfd4      	ite	le
 800930c:	f1c1 0202 	rsble	r2, r1, #2
 8009310:	2201      	movgt	r2, #1
 8009312:	4413      	add	r3, r2
 8009314:	e7e0      	b.n	80092d8 <_printf_float+0x1a4>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	055a      	lsls	r2, r3, #21
 800931a:	d407      	bmi.n	800932c <_printf_float+0x1f8>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	4642      	mov	r2, r8
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	d12c      	bne.n	8009384 <_printf_float+0x250>
 800932a:	e764      	b.n	80091f6 <_printf_float+0xc2>
 800932c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009330:	f240 80e0 	bls.w	80094f4 <_printf_float+0x3c0>
 8009334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	f7f7 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009340:	2800      	cmp	r0, #0
 8009342:	d034      	beq.n	80093ae <_printf_float+0x27a>
 8009344:	4a37      	ldr	r2, [pc, #220]	; (8009424 <_printf_float+0x2f0>)
 8009346:	2301      	movs	r3, #1
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f af51 	beq.w	80091f6 <_printf_float+0xc2>
 8009354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009358:	429a      	cmp	r2, r3
 800935a:	db02      	blt.n	8009362 <_printf_float+0x22e>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07d8      	lsls	r0, r3, #31
 8009360:	d510      	bpl.n	8009384 <_printf_float+0x250>
 8009362:	ee18 3a10 	vmov	r3, s16
 8009366:	4652      	mov	r2, sl
 8009368:	4631      	mov	r1, r6
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	f43f af41 	beq.w	80091f6 <_printf_float+0xc2>
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	f104 091a 	add.w	r9, r4, #26
 800937c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937e:	3b01      	subs	r3, #1
 8009380:	4543      	cmp	r3, r8
 8009382:	dc09      	bgt.n	8009398 <_printf_float+0x264>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	079b      	lsls	r3, r3, #30
 8009388:	f100 8105 	bmi.w	8009596 <_printf_float+0x462>
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009390:	4298      	cmp	r0, r3
 8009392:	bfb8      	it	lt
 8009394:	4618      	movlt	r0, r3
 8009396:	e730      	b.n	80091fa <_printf_float+0xc6>
 8009398:	2301      	movs	r3, #1
 800939a:	464a      	mov	r2, r9
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af27 	beq.w	80091f6 <_printf_float+0xc2>
 80093a8:	f108 0801 	add.w	r8, r8, #1
 80093ac:	e7e6      	b.n	800937c <_printf_float+0x248>
 80093ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc39      	bgt.n	8009428 <_printf_float+0x2f4>
 80093b4:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <_printf_float+0x2f0>)
 80093b6:	2301      	movs	r3, #1
 80093b8:	4631      	mov	r1, r6
 80093ba:	4628      	mov	r0, r5
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	f43f af19 	beq.w	80091f6 <_printf_float+0xc2>
 80093c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093c8:	4313      	orrs	r3, r2
 80093ca:	d102      	bne.n	80093d2 <_printf_float+0x29e>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d5d8      	bpl.n	8009384 <_printf_float+0x250>
 80093d2:	ee18 3a10 	vmov	r3, s16
 80093d6:	4652      	mov	r2, sl
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f af09 	beq.w	80091f6 <_printf_float+0xc2>
 80093e4:	f04f 0900 	mov.w	r9, #0
 80093e8:	f104 0a1a 	add.w	sl, r4, #26
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	425b      	negs	r3, r3
 80093f0:	454b      	cmp	r3, r9
 80093f2:	dc01      	bgt.n	80093f8 <_printf_float+0x2c4>
 80093f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f6:	e792      	b.n	800931e <_printf_float+0x1ea>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4652      	mov	r2, sl
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f aef7 	beq.w	80091f6 <_printf_float+0xc2>
 8009408:	f109 0901 	add.w	r9, r9, #1
 800940c:	e7ee      	b.n	80093ec <_printf_float+0x2b8>
 800940e:	bf00      	nop
 8009410:	7fefffff 	.word	0x7fefffff
 8009414:	0800c320 	.word	0x0800c320
 8009418:	0800c324 	.word	0x0800c324
 800941c:	0800c32c 	.word	0x0800c32c
 8009420:	0800c328 	.word	0x0800c328
 8009424:	0800c330 	.word	0x0800c330
 8009428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800942c:	429a      	cmp	r2, r3
 800942e:	bfa8      	it	ge
 8009430:	461a      	movge	r2, r3
 8009432:	2a00      	cmp	r2, #0
 8009434:	4691      	mov	r9, r2
 8009436:	dc37      	bgt.n	80094a8 <_printf_float+0x374>
 8009438:	f04f 0b00 	mov.w	fp, #0
 800943c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009440:	f104 021a 	add.w	r2, r4, #26
 8009444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	eba3 0309 	sub.w	r3, r3, r9
 800944c:	455b      	cmp	r3, fp
 800944e:	dc33      	bgt.n	80094b8 <_printf_float+0x384>
 8009450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009454:	429a      	cmp	r2, r3
 8009456:	db3b      	blt.n	80094d0 <_printf_float+0x39c>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d438      	bmi.n	80094d0 <_printf_float+0x39c>
 800945e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009460:	9a05      	ldr	r2, [sp, #20]
 8009462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009464:	1a9a      	subs	r2, r3, r2
 8009466:	eba3 0901 	sub.w	r9, r3, r1
 800946a:	4591      	cmp	r9, r2
 800946c:	bfa8      	it	ge
 800946e:	4691      	movge	r9, r2
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	dc35      	bgt.n	80094e2 <_printf_float+0x3ae>
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800947e:	f104 0a1a 	add.w	sl, r4, #26
 8009482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	eba3 0309 	sub.w	r3, r3, r9
 800948c:	4543      	cmp	r3, r8
 800948e:	f77f af79 	ble.w	8009384 <_printf_float+0x250>
 8009492:	2301      	movs	r3, #1
 8009494:	4652      	mov	r2, sl
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f aeaa 	beq.w	80091f6 <_printf_float+0xc2>
 80094a2:	f108 0801 	add.w	r8, r8, #1
 80094a6:	e7ec      	b.n	8009482 <_printf_float+0x34e>
 80094a8:	4613      	mov	r3, r2
 80094aa:	4631      	mov	r1, r6
 80094ac:	4642      	mov	r2, r8
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	d1c0      	bne.n	8009438 <_printf_float+0x304>
 80094b6:	e69e      	b.n	80091f6 <_printf_float+0xc2>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	9205      	str	r2, [sp, #20]
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	f43f ae97 	beq.w	80091f6 <_printf_float+0xc2>
 80094c8:	9a05      	ldr	r2, [sp, #20]
 80094ca:	f10b 0b01 	add.w	fp, fp, #1
 80094ce:	e7b9      	b.n	8009444 <_printf_float+0x310>
 80094d0:	ee18 3a10 	vmov	r3, s16
 80094d4:	4652      	mov	r2, sl
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	d1be      	bne.n	800945e <_printf_float+0x32a>
 80094e0:	e689      	b.n	80091f6 <_printf_float+0xc2>
 80094e2:	9a05      	ldr	r2, [sp, #20]
 80094e4:	464b      	mov	r3, r9
 80094e6:	4442      	add	r2, r8
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	d1c1      	bne.n	8009476 <_printf_float+0x342>
 80094f2:	e680      	b.n	80091f6 <_printf_float+0xc2>
 80094f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f6:	2a01      	cmp	r2, #1
 80094f8:	dc01      	bgt.n	80094fe <_printf_float+0x3ca>
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d538      	bpl.n	8009570 <_printf_float+0x43c>
 80094fe:	2301      	movs	r3, #1
 8009500:	4642      	mov	r2, r8
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	f43f ae74 	beq.w	80091f6 <_printf_float+0xc2>
 800950e:	ee18 3a10 	vmov	r3, s16
 8009512:	4652      	mov	r2, sl
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	47b8      	blx	r7
 800951a:	3001      	adds	r0, #1
 800951c:	f43f ae6b 	beq.w	80091f6 <_printf_float+0xc2>
 8009520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009524:	2200      	movs	r2, #0
 8009526:	2300      	movs	r3, #0
 8009528:	f7f7 fad6 	bl	8000ad8 <__aeabi_dcmpeq>
 800952c:	b9d8      	cbnz	r0, 8009566 <_printf_float+0x432>
 800952e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009530:	f108 0201 	add.w	r2, r8, #1
 8009534:	3b01      	subs	r3, #1
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	d10e      	bne.n	800955e <_printf_float+0x42a>
 8009540:	e659      	b.n	80091f6 <_printf_float+0xc2>
 8009542:	2301      	movs	r3, #1
 8009544:	4652      	mov	r2, sl
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae52 	beq.w	80091f6 <_printf_float+0xc2>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009558:	3b01      	subs	r3, #1
 800955a:	4543      	cmp	r3, r8
 800955c:	dcf1      	bgt.n	8009542 <_printf_float+0x40e>
 800955e:	464b      	mov	r3, r9
 8009560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009564:	e6dc      	b.n	8009320 <_printf_float+0x1ec>
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	f104 0a1a 	add.w	sl, r4, #26
 800956e:	e7f2      	b.n	8009556 <_printf_float+0x422>
 8009570:	2301      	movs	r3, #1
 8009572:	4642      	mov	r2, r8
 8009574:	e7df      	b.n	8009536 <_printf_float+0x402>
 8009576:	2301      	movs	r3, #1
 8009578:	464a      	mov	r2, r9
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae38 	beq.w	80091f6 <_printf_float+0xc2>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	68e3      	ldr	r3, [r4, #12]
 800958c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800958e:	1a5b      	subs	r3, r3, r1
 8009590:	4543      	cmp	r3, r8
 8009592:	dcf0      	bgt.n	8009576 <_printf_float+0x442>
 8009594:	e6fa      	b.n	800938c <_printf_float+0x258>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	f104 0919 	add.w	r9, r4, #25
 800959e:	e7f4      	b.n	800958a <_printf_float+0x456>

080095a0 <_printf_common>:
 80095a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	4616      	mov	r6, r2
 80095a6:	4699      	mov	r9, r3
 80095a8:	688a      	ldr	r2, [r1, #8]
 80095aa:	690b      	ldr	r3, [r1, #16]
 80095ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b0:	4293      	cmp	r3, r2
 80095b2:	bfb8      	it	lt
 80095b4:	4613      	movlt	r3, r2
 80095b6:	6033      	str	r3, [r6, #0]
 80095b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095bc:	4607      	mov	r7, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	b10a      	cbz	r2, 80095c6 <_printf_common+0x26>
 80095c2:	3301      	adds	r3, #1
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	0699      	lsls	r1, r3, #26
 80095ca:	bf42      	ittt	mi
 80095cc:	6833      	ldrmi	r3, [r6, #0]
 80095ce:	3302      	addmi	r3, #2
 80095d0:	6033      	strmi	r3, [r6, #0]
 80095d2:	6825      	ldr	r5, [r4, #0]
 80095d4:	f015 0506 	ands.w	r5, r5, #6
 80095d8:	d106      	bne.n	80095e8 <_printf_common+0x48>
 80095da:	f104 0a19 	add.w	sl, r4, #25
 80095de:	68e3      	ldr	r3, [r4, #12]
 80095e0:	6832      	ldr	r2, [r6, #0]
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	dc26      	bgt.n	8009636 <_printf_common+0x96>
 80095e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095ec:	1e13      	subs	r3, r2, #0
 80095ee:	6822      	ldr	r2, [r4, #0]
 80095f0:	bf18      	it	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	0692      	lsls	r2, r2, #26
 80095f6:	d42b      	bmi.n	8009650 <_printf_common+0xb0>
 80095f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095fc:	4649      	mov	r1, r9
 80095fe:	4638      	mov	r0, r7
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d01e      	beq.n	8009644 <_printf_common+0xa4>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	68e5      	ldr	r5, [r4, #12]
 800960a:	6832      	ldr	r2, [r6, #0]
 800960c:	f003 0306 	and.w	r3, r3, #6
 8009610:	2b04      	cmp	r3, #4
 8009612:	bf08      	it	eq
 8009614:	1aad      	subeq	r5, r5, r2
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	6922      	ldr	r2, [r4, #16]
 800961a:	bf0c      	ite	eq
 800961c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009620:	2500      	movne	r5, #0
 8009622:	4293      	cmp	r3, r2
 8009624:	bfc4      	itt	gt
 8009626:	1a9b      	subgt	r3, r3, r2
 8009628:	18ed      	addgt	r5, r5, r3
 800962a:	2600      	movs	r6, #0
 800962c:	341a      	adds	r4, #26
 800962e:	42b5      	cmp	r5, r6
 8009630:	d11a      	bne.n	8009668 <_printf_common+0xc8>
 8009632:	2000      	movs	r0, #0
 8009634:	e008      	b.n	8009648 <_printf_common+0xa8>
 8009636:	2301      	movs	r3, #1
 8009638:	4652      	mov	r2, sl
 800963a:	4649      	mov	r1, r9
 800963c:	4638      	mov	r0, r7
 800963e:	47c0      	blx	r8
 8009640:	3001      	adds	r0, #1
 8009642:	d103      	bne.n	800964c <_printf_common+0xac>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	3501      	adds	r5, #1
 800964e:	e7c6      	b.n	80095de <_printf_common+0x3e>
 8009650:	18e1      	adds	r1, r4, r3
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	2030      	movs	r0, #48	; 0x30
 8009656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800965a:	4422      	add	r2, r4
 800965c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009664:	3302      	adds	r3, #2
 8009666:	e7c7      	b.n	80095f8 <_printf_common+0x58>
 8009668:	2301      	movs	r3, #1
 800966a:	4622      	mov	r2, r4
 800966c:	4649      	mov	r1, r9
 800966e:	4638      	mov	r0, r7
 8009670:	47c0      	blx	r8
 8009672:	3001      	adds	r0, #1
 8009674:	d0e6      	beq.n	8009644 <_printf_common+0xa4>
 8009676:	3601      	adds	r6, #1
 8009678:	e7d9      	b.n	800962e <_printf_common+0x8e>
	...

0800967c <_printf_i>:
 800967c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	7e0f      	ldrb	r7, [r1, #24]
 8009682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009684:	2f78      	cmp	r7, #120	; 0x78
 8009686:	4691      	mov	r9, r2
 8009688:	4680      	mov	r8, r0
 800968a:	460c      	mov	r4, r1
 800968c:	469a      	mov	sl, r3
 800968e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009692:	d807      	bhi.n	80096a4 <_printf_i+0x28>
 8009694:	2f62      	cmp	r7, #98	; 0x62
 8009696:	d80a      	bhi.n	80096ae <_printf_i+0x32>
 8009698:	2f00      	cmp	r7, #0
 800969a:	f000 80d8 	beq.w	800984e <_printf_i+0x1d2>
 800969e:	2f58      	cmp	r7, #88	; 0x58
 80096a0:	f000 80a3 	beq.w	80097ea <_printf_i+0x16e>
 80096a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096ac:	e03a      	b.n	8009724 <_printf_i+0xa8>
 80096ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096b2:	2b15      	cmp	r3, #21
 80096b4:	d8f6      	bhi.n	80096a4 <_printf_i+0x28>
 80096b6:	a101      	add	r1, pc, #4	; (adr r1, 80096bc <_printf_i+0x40>)
 80096b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096bc:	08009715 	.word	0x08009715
 80096c0:	08009729 	.word	0x08009729
 80096c4:	080096a5 	.word	0x080096a5
 80096c8:	080096a5 	.word	0x080096a5
 80096cc:	080096a5 	.word	0x080096a5
 80096d0:	080096a5 	.word	0x080096a5
 80096d4:	08009729 	.word	0x08009729
 80096d8:	080096a5 	.word	0x080096a5
 80096dc:	080096a5 	.word	0x080096a5
 80096e0:	080096a5 	.word	0x080096a5
 80096e4:	080096a5 	.word	0x080096a5
 80096e8:	08009835 	.word	0x08009835
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009817 	.word	0x08009817
 80096f4:	080096a5 	.word	0x080096a5
 80096f8:	080096a5 	.word	0x080096a5
 80096fc:	08009857 	.word	0x08009857
 8009700:	080096a5 	.word	0x080096a5
 8009704:	08009759 	.word	0x08009759
 8009708:	080096a5 	.word	0x080096a5
 800970c:	080096a5 	.word	0x080096a5
 8009710:	0800981f 	.word	0x0800981f
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	602a      	str	r2, [r5, #0]
 800971c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009724:	2301      	movs	r3, #1
 8009726:	e0a3      	b.n	8009870 <_printf_i+0x1f4>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	6829      	ldr	r1, [r5, #0]
 800972c:	0606      	lsls	r6, r0, #24
 800972e:	f101 0304 	add.w	r3, r1, #4
 8009732:	d50a      	bpl.n	800974a <_printf_i+0xce>
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	2e00      	cmp	r6, #0
 800973a:	da03      	bge.n	8009744 <_printf_i+0xc8>
 800973c:	232d      	movs	r3, #45	; 0x2d
 800973e:	4276      	negs	r6, r6
 8009740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009744:	485e      	ldr	r0, [pc, #376]	; (80098c0 <_printf_i+0x244>)
 8009746:	230a      	movs	r3, #10
 8009748:	e019      	b.n	800977e <_printf_i+0x102>
 800974a:	680e      	ldr	r6, [r1, #0]
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009752:	bf18      	it	ne
 8009754:	b236      	sxthne	r6, r6
 8009756:	e7ef      	b.n	8009738 <_printf_i+0xbc>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1d19      	adds	r1, r3, #4
 800975e:	6029      	str	r1, [r5, #0]
 8009760:	0601      	lsls	r1, r0, #24
 8009762:	d501      	bpl.n	8009768 <_printf_i+0xec>
 8009764:	681e      	ldr	r6, [r3, #0]
 8009766:	e002      	b.n	800976e <_printf_i+0xf2>
 8009768:	0646      	lsls	r6, r0, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0xe8>
 800976c:	881e      	ldrh	r6, [r3, #0]
 800976e:	4854      	ldr	r0, [pc, #336]	; (80098c0 <_printf_i+0x244>)
 8009770:	2f6f      	cmp	r7, #111	; 0x6f
 8009772:	bf0c      	ite	eq
 8009774:	2308      	moveq	r3, #8
 8009776:	230a      	movne	r3, #10
 8009778:	2100      	movs	r1, #0
 800977a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800977e:	6865      	ldr	r5, [r4, #4]
 8009780:	60a5      	str	r5, [r4, #8]
 8009782:	2d00      	cmp	r5, #0
 8009784:	bfa2      	ittt	ge
 8009786:	6821      	ldrge	r1, [r4, #0]
 8009788:	f021 0104 	bicge.w	r1, r1, #4
 800978c:	6021      	strge	r1, [r4, #0]
 800978e:	b90e      	cbnz	r6, 8009794 <_printf_i+0x118>
 8009790:	2d00      	cmp	r5, #0
 8009792:	d04d      	beq.n	8009830 <_printf_i+0x1b4>
 8009794:	4615      	mov	r5, r2
 8009796:	fbb6 f1f3 	udiv	r1, r6, r3
 800979a:	fb03 6711 	mls	r7, r3, r1, r6
 800979e:	5dc7      	ldrb	r7, [r0, r7]
 80097a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097a4:	4637      	mov	r7, r6
 80097a6:	42bb      	cmp	r3, r7
 80097a8:	460e      	mov	r6, r1
 80097aa:	d9f4      	bls.n	8009796 <_printf_i+0x11a>
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d10b      	bne.n	80097c8 <_printf_i+0x14c>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	07de      	lsls	r6, r3, #31
 80097b4:	d508      	bpl.n	80097c8 <_printf_i+0x14c>
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	6861      	ldr	r1, [r4, #4]
 80097ba:	4299      	cmp	r1, r3
 80097bc:	bfde      	ittt	le
 80097be:	2330      	movle	r3, #48	; 0x30
 80097c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097c8:	1b52      	subs	r2, r2, r5
 80097ca:	6122      	str	r2, [r4, #16]
 80097cc:	f8cd a000 	str.w	sl, [sp]
 80097d0:	464b      	mov	r3, r9
 80097d2:	aa03      	add	r2, sp, #12
 80097d4:	4621      	mov	r1, r4
 80097d6:	4640      	mov	r0, r8
 80097d8:	f7ff fee2 	bl	80095a0 <_printf_common>
 80097dc:	3001      	adds	r0, #1
 80097de:	d14c      	bne.n	800987a <_printf_i+0x1fe>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	b004      	add	sp, #16
 80097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ea:	4835      	ldr	r0, [pc, #212]	; (80098c0 <_printf_i+0x244>)
 80097ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097f0:	6829      	ldr	r1, [r5, #0]
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097f8:	6029      	str	r1, [r5, #0]
 80097fa:	061d      	lsls	r5, r3, #24
 80097fc:	d514      	bpl.n	8009828 <_printf_i+0x1ac>
 80097fe:	07df      	lsls	r7, r3, #31
 8009800:	bf44      	itt	mi
 8009802:	f043 0320 	orrmi.w	r3, r3, #32
 8009806:	6023      	strmi	r3, [r4, #0]
 8009808:	b91e      	cbnz	r6, 8009812 <_printf_i+0x196>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	f023 0320 	bic.w	r3, r3, #32
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	2310      	movs	r3, #16
 8009814:	e7b0      	b.n	8009778 <_printf_i+0xfc>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	f043 0320 	orr.w	r3, r3, #32
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	2378      	movs	r3, #120	; 0x78
 8009820:	4828      	ldr	r0, [pc, #160]	; (80098c4 <_printf_i+0x248>)
 8009822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009826:	e7e3      	b.n	80097f0 <_printf_i+0x174>
 8009828:	0659      	lsls	r1, r3, #25
 800982a:	bf48      	it	mi
 800982c:	b2b6      	uxthmi	r6, r6
 800982e:	e7e6      	b.n	80097fe <_printf_i+0x182>
 8009830:	4615      	mov	r5, r2
 8009832:	e7bb      	b.n	80097ac <_printf_i+0x130>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	6826      	ldr	r6, [r4, #0]
 8009838:	6961      	ldr	r1, [r4, #20]
 800983a:	1d18      	adds	r0, r3, #4
 800983c:	6028      	str	r0, [r5, #0]
 800983e:	0635      	lsls	r5, r6, #24
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	d501      	bpl.n	8009848 <_printf_i+0x1cc>
 8009844:	6019      	str	r1, [r3, #0]
 8009846:	e002      	b.n	800984e <_printf_i+0x1d2>
 8009848:	0670      	lsls	r0, r6, #25
 800984a:	d5fb      	bpl.n	8009844 <_printf_i+0x1c8>
 800984c:	8019      	strh	r1, [r3, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	4615      	mov	r5, r2
 8009854:	e7ba      	b.n	80097cc <_printf_i+0x150>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	602a      	str	r2, [r5, #0]
 800985c:	681d      	ldr	r5, [r3, #0]
 800985e:	6862      	ldr	r2, [r4, #4]
 8009860:	2100      	movs	r1, #0
 8009862:	4628      	mov	r0, r5
 8009864:	f7f6 fcc4 	bl	80001f0 <memchr>
 8009868:	b108      	cbz	r0, 800986e <_printf_i+0x1f2>
 800986a:	1b40      	subs	r0, r0, r5
 800986c:	6060      	str	r0, [r4, #4]
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2300      	movs	r3, #0
 8009874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009878:	e7a8      	b.n	80097cc <_printf_i+0x150>
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	462a      	mov	r2, r5
 800987e:	4649      	mov	r1, r9
 8009880:	4640      	mov	r0, r8
 8009882:	47d0      	blx	sl
 8009884:	3001      	adds	r0, #1
 8009886:	d0ab      	beq.n	80097e0 <_printf_i+0x164>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	079b      	lsls	r3, r3, #30
 800988c:	d413      	bmi.n	80098b6 <_printf_i+0x23a>
 800988e:	68e0      	ldr	r0, [r4, #12]
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	4298      	cmp	r0, r3
 8009894:	bfb8      	it	lt
 8009896:	4618      	movlt	r0, r3
 8009898:	e7a4      	b.n	80097e4 <_printf_i+0x168>
 800989a:	2301      	movs	r3, #1
 800989c:	4632      	mov	r2, r6
 800989e:	4649      	mov	r1, r9
 80098a0:	4640      	mov	r0, r8
 80098a2:	47d0      	blx	sl
 80098a4:	3001      	adds	r0, #1
 80098a6:	d09b      	beq.n	80097e0 <_printf_i+0x164>
 80098a8:	3501      	adds	r5, #1
 80098aa:	68e3      	ldr	r3, [r4, #12]
 80098ac:	9903      	ldr	r1, [sp, #12]
 80098ae:	1a5b      	subs	r3, r3, r1
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dcf2      	bgt.n	800989a <_printf_i+0x21e>
 80098b4:	e7eb      	b.n	800988e <_printf_i+0x212>
 80098b6:	2500      	movs	r5, #0
 80098b8:	f104 0619 	add.w	r6, r4, #25
 80098bc:	e7f5      	b.n	80098aa <_printf_i+0x22e>
 80098be:	bf00      	nop
 80098c0:	0800c332 	.word	0x0800c332
 80098c4:	0800c343 	.word	0x0800c343

080098c8 <siprintf>:
 80098c8:	b40e      	push	{r1, r2, r3}
 80098ca:	b500      	push	{lr}
 80098cc:	b09c      	sub	sp, #112	; 0x70
 80098ce:	ab1d      	add	r3, sp, #116	; 0x74
 80098d0:	9002      	str	r0, [sp, #8]
 80098d2:	9006      	str	r0, [sp, #24]
 80098d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098d8:	4809      	ldr	r0, [pc, #36]	; (8009900 <siprintf+0x38>)
 80098da:	9107      	str	r1, [sp, #28]
 80098dc:	9104      	str	r1, [sp, #16]
 80098de:	4909      	ldr	r1, [pc, #36]	; (8009904 <siprintf+0x3c>)
 80098e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e4:	9105      	str	r1, [sp, #20]
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	a902      	add	r1, sp, #8
 80098ec:	f001 fb76 	bl	800afdc <_svfiprintf_r>
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	b01c      	add	sp, #112	; 0x70
 80098f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098fc:	b003      	add	sp, #12
 80098fe:	4770      	bx	lr
 8009900:	20000014 	.word	0x20000014
 8009904:	ffff0208 	.word	0xffff0208

08009908 <quorem>:
 8009908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	6903      	ldr	r3, [r0, #16]
 800990e:	690c      	ldr	r4, [r1, #16]
 8009910:	42a3      	cmp	r3, r4
 8009912:	4607      	mov	r7, r0
 8009914:	f2c0 8081 	blt.w	8009a1a <quorem+0x112>
 8009918:	3c01      	subs	r4, #1
 800991a:	f101 0814 	add.w	r8, r1, #20
 800991e:	f100 0514 	add.w	r5, r0, #20
 8009922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800992c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009930:	3301      	adds	r3, #1
 8009932:	429a      	cmp	r2, r3
 8009934:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009938:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800993c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009940:	d331      	bcc.n	80099a6 <quorem+0x9e>
 8009942:	f04f 0e00 	mov.w	lr, #0
 8009946:	4640      	mov	r0, r8
 8009948:	46ac      	mov	ip, r5
 800994a:	46f2      	mov	sl, lr
 800994c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009950:	b293      	uxth	r3, r2
 8009952:	fb06 e303 	mla	r3, r6, r3, lr
 8009956:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800995a:	b29b      	uxth	r3, r3
 800995c:	ebaa 0303 	sub.w	r3, sl, r3
 8009960:	f8dc a000 	ldr.w	sl, [ip]
 8009964:	0c12      	lsrs	r2, r2, #16
 8009966:	fa13 f38a 	uxtah	r3, r3, sl
 800996a:	fb06 e202 	mla	r2, r6, r2, lr
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009976:	b292      	uxth	r2, r2
 8009978:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800997c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009980:	f8bd 3000 	ldrh.w	r3, [sp]
 8009984:	4581      	cmp	r9, r0
 8009986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800998a:	f84c 3b04 	str.w	r3, [ip], #4
 800998e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009992:	d2db      	bcs.n	800994c <quorem+0x44>
 8009994:	f855 300b 	ldr.w	r3, [r5, fp]
 8009998:	b92b      	cbnz	r3, 80099a6 <quorem+0x9e>
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	3b04      	subs	r3, #4
 800999e:	429d      	cmp	r5, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	d32e      	bcc.n	8009a02 <quorem+0xfa>
 80099a4:	613c      	str	r4, [r7, #16]
 80099a6:	4638      	mov	r0, r7
 80099a8:	f001 f8c4 	bl	800ab34 <__mcmp>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	db24      	blt.n	80099fa <quorem+0xf2>
 80099b0:	3601      	adds	r6, #1
 80099b2:	4628      	mov	r0, r5
 80099b4:	f04f 0c00 	mov.w	ip, #0
 80099b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80099bc:	f8d0 e000 	ldr.w	lr, [r0]
 80099c0:	b293      	uxth	r3, r2
 80099c2:	ebac 0303 	sub.w	r3, ip, r3
 80099c6:	0c12      	lsrs	r2, r2, #16
 80099c8:	fa13 f38e 	uxtah	r3, r3, lr
 80099cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099da:	45c1      	cmp	r9, r8
 80099dc:	f840 3b04 	str.w	r3, [r0], #4
 80099e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099e4:	d2e8      	bcs.n	80099b8 <quorem+0xb0>
 80099e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ee:	b922      	cbnz	r2, 80099fa <quorem+0xf2>
 80099f0:	3b04      	subs	r3, #4
 80099f2:	429d      	cmp	r5, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	d30a      	bcc.n	8009a0e <quorem+0x106>
 80099f8:	613c      	str	r4, [r7, #16]
 80099fa:	4630      	mov	r0, r6
 80099fc:	b003      	add	sp, #12
 80099fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	3b04      	subs	r3, #4
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	d1cc      	bne.n	80099a4 <quorem+0x9c>
 8009a0a:	3c01      	subs	r4, #1
 8009a0c:	e7c7      	b.n	800999e <quorem+0x96>
 8009a0e:	6812      	ldr	r2, [r2, #0]
 8009a10:	3b04      	subs	r3, #4
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	d1f0      	bne.n	80099f8 <quorem+0xf0>
 8009a16:	3c01      	subs	r4, #1
 8009a18:	e7eb      	b.n	80099f2 <quorem+0xea>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e7ee      	b.n	80099fc <quorem+0xf4>
	...

08009a20 <_dtoa_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	ed2d 8b04 	vpush	{d8-d9}
 8009a28:	ec57 6b10 	vmov	r6, r7, d0
 8009a2c:	b093      	sub	sp, #76	; 0x4c
 8009a2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a34:	9106      	str	r1, [sp, #24]
 8009a36:	ee10 aa10 	vmov	sl, s0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a40:	46bb      	mov	fp, r7
 8009a42:	b975      	cbnz	r5, 8009a62 <_dtoa_r+0x42>
 8009a44:	2010      	movs	r0, #16
 8009a46:	f000 fddd 	bl	800a604 <malloc>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a4e:	b920      	cbnz	r0, 8009a5a <_dtoa_r+0x3a>
 8009a50:	4ba7      	ldr	r3, [pc, #668]	; (8009cf0 <_dtoa_r+0x2d0>)
 8009a52:	21ea      	movs	r1, #234	; 0xea
 8009a54:	48a7      	ldr	r0, [pc, #668]	; (8009cf4 <_dtoa_r+0x2d4>)
 8009a56:	f001 fbd1 	bl	800b1fc <__assert_func>
 8009a5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a5e:	6005      	str	r5, [r0, #0]
 8009a60:	60c5      	str	r5, [r0, #12]
 8009a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a64:	6819      	ldr	r1, [r3, #0]
 8009a66:	b151      	cbz	r1, 8009a7e <_dtoa_r+0x5e>
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	604a      	str	r2, [r1, #4]
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4093      	lsls	r3, r2
 8009a70:	608b      	str	r3, [r1, #8]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fe1c 	bl	800a6b0 <_Bfree>
 8009a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	1e3b      	subs	r3, r7, #0
 8009a80:	bfaa      	itet	ge
 8009a82:	2300      	movge	r3, #0
 8009a84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a88:	f8c8 3000 	strge.w	r3, [r8]
 8009a8c:	4b9a      	ldr	r3, [pc, #616]	; (8009cf8 <_dtoa_r+0x2d8>)
 8009a8e:	bfbc      	itt	lt
 8009a90:	2201      	movlt	r2, #1
 8009a92:	f8c8 2000 	strlt.w	r2, [r8]
 8009a96:	ea33 030b 	bics.w	r3, r3, fp
 8009a9a:	d11b      	bne.n	8009ad4 <_dtoa_r+0xb4>
 8009a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa8:	4333      	orrs	r3, r6
 8009aaa:	f000 8592 	beq.w	800a5d2 <_dtoa_r+0xbb2>
 8009aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab0:	b963      	cbnz	r3, 8009acc <_dtoa_r+0xac>
 8009ab2:	4b92      	ldr	r3, [pc, #584]	; (8009cfc <_dtoa_r+0x2dc>)
 8009ab4:	e022      	b.n	8009afc <_dtoa_r+0xdc>
 8009ab6:	4b92      	ldr	r3, [pc, #584]	; (8009d00 <_dtoa_r+0x2e0>)
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	3308      	adds	r3, #8
 8009abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	9801      	ldr	r0, [sp, #4]
 8009ac2:	b013      	add	sp, #76	; 0x4c
 8009ac4:	ecbd 8b04 	vpop	{d8-d9}
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	4b8b      	ldr	r3, [pc, #556]	; (8009cfc <_dtoa_r+0x2dc>)
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	3303      	adds	r3, #3
 8009ad2:	e7f3      	b.n	8009abc <_dtoa_r+0x9c>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4659      	mov	r1, fp
 8009adc:	f7f6 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ae0:	ec4b ab19 	vmov	d9, sl, fp
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	b158      	cbz	r0, 8009b00 <_dtoa_r+0xe0>
 8009ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aea:	2301      	movs	r3, #1
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 856b 	beq.w	800a5cc <_dtoa_r+0xbac>
 8009af6:	4883      	ldr	r0, [pc, #524]	; (8009d04 <_dtoa_r+0x2e4>)
 8009af8:	6018      	str	r0, [r3, #0]
 8009afa:	1e43      	subs	r3, r0, #1
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	e7df      	b.n	8009ac0 <_dtoa_r+0xa0>
 8009b00:	ec4b ab10 	vmov	d0, sl, fp
 8009b04:	aa10      	add	r2, sp, #64	; 0x40
 8009b06:	a911      	add	r1, sp, #68	; 0x44
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f001 f8b9 	bl	800ac80 <__d2b>
 8009b0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b12:	ee08 0a10 	vmov	s16, r0
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	f000 8084 	beq.w	8009c24 <_dtoa_r+0x204>
 8009b1c:	ee19 3a90 	vmov	r3, s19
 8009b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b28:	4656      	mov	r6, sl
 8009b2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b36:	4b74      	ldr	r3, [pc, #464]	; (8009d08 <_dtoa_r+0x2e8>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fbab 	bl	8000298 <__aeabi_dsub>
 8009b42:	a365      	add	r3, pc, #404	; (adr r3, 8009cd8 <_dtoa_r+0x2b8>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fd5e 	bl	8000608 <__aeabi_dmul>
 8009b4c:	a364      	add	r3, pc, #400	; (adr r3, 8009ce0 <_dtoa_r+0x2c0>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 fba3 	bl	800029c <__adddf3>
 8009b56:	4606      	mov	r6, r0
 8009b58:	4628      	mov	r0, r5
 8009b5a:	460f      	mov	r7, r1
 8009b5c:	f7f6 fcea 	bl	8000534 <__aeabi_i2d>
 8009b60:	a361      	add	r3, pc, #388	; (adr r3, 8009ce8 <_dtoa_r+0x2c8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fd4f 	bl	8000608 <__aeabi_dmul>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4630      	mov	r0, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	f7f6 fb93 	bl	800029c <__adddf3>
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	f7f6 fff5 	bl	8000b68 <__aeabi_d2iz>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	9000      	str	r0, [sp, #0]
 8009b82:	2300      	movs	r3, #0
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 ffb0 	bl	8000aec <__aeabi_dcmplt>
 8009b8c:	b150      	cbz	r0, 8009ba4 <_dtoa_r+0x184>
 8009b8e:	9800      	ldr	r0, [sp, #0]
 8009b90:	f7f6 fcd0 	bl	8000534 <__aeabi_i2d>
 8009b94:	4632      	mov	r2, r6
 8009b96:	463b      	mov	r3, r7
 8009b98:	f7f6 ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b9c:	b910      	cbnz	r0, 8009ba4 <_dtoa_r+0x184>
 8009b9e:	9b00      	ldr	r3, [sp, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	9b00      	ldr	r3, [sp, #0]
 8009ba6:	2b16      	cmp	r3, #22
 8009ba8:	d85a      	bhi.n	8009c60 <_dtoa_r+0x240>
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	4b57      	ldr	r3, [pc, #348]	; (8009d0c <_dtoa_r+0x2ec>)
 8009bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	ec51 0b19 	vmov	r0, r1, d9
 8009bba:	f7f6 ff97 	bl	8000aec <__aeabi_dcmplt>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d050      	beq.n	8009c64 <_dtoa_r+0x244>
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bce:	1b5d      	subs	r5, r3, r5
 8009bd0:	1e6b      	subs	r3, r5, #1
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	bf45      	ittet	mi
 8009bd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bda:	9304      	strmi	r3, [sp, #16]
 8009bdc:	2300      	movpl	r3, #0
 8009bde:	2300      	movmi	r3, #0
 8009be0:	bf4c      	ite	mi
 8009be2:	9305      	strmi	r3, [sp, #20]
 8009be4:	9304      	strpl	r3, [sp, #16]
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db3d      	blt.n	8009c68 <_dtoa_r+0x248>
 8009bec:	9b05      	ldr	r3, [sp, #20]
 8009bee:	9a00      	ldr	r2, [sp, #0]
 8009bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8009bf2:	4413      	add	r3, r2
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	2b09      	cmp	r3, #9
 8009bfe:	f200 8089 	bhi.w	8009d14 <_dtoa_r+0x2f4>
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	bfc4      	itt	gt
 8009c06:	3b04      	subgt	r3, #4
 8009c08:	9306      	strgt	r3, [sp, #24]
 8009c0a:	9b06      	ldr	r3, [sp, #24]
 8009c0c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c10:	bfcc      	ite	gt
 8009c12:	2500      	movgt	r5, #0
 8009c14:	2501      	movle	r5, #1
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	f200 8087 	bhi.w	8009d2a <_dtoa_r+0x30a>
 8009c1c:	e8df f003 	tbb	[pc, r3]
 8009c20:	59383a2d 	.word	0x59383a2d
 8009c24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c28:	441d      	add	r5, r3
 8009c2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	bfc1      	itttt	gt
 8009c32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c42:	bfda      	itte	le
 8009c44:	f1c3 0320 	rsble	r3, r3, #32
 8009c48:	fa06 f003 	lslle.w	r0, r6, r3
 8009c4c:	4318      	orrgt	r0, r3
 8009c4e:	f7f6 fc61 	bl	8000514 <__aeabi_ui2d>
 8009c52:	2301      	movs	r3, #1
 8009c54:	4606      	mov	r6, r0
 8009c56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c5a:	3d01      	subs	r5, #1
 8009c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c5e:	e76a      	b.n	8009b36 <_dtoa_r+0x116>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e7b2      	b.n	8009bca <_dtoa_r+0x1aa>
 8009c64:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c66:	e7b1      	b.n	8009bcc <_dtoa_r+0x1ac>
 8009c68:	9b04      	ldr	r3, [sp, #16]
 8009c6a:	9a00      	ldr	r2, [sp, #0]
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	4253      	negs	r3, r2
 8009c72:	9307      	str	r3, [sp, #28]
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
 8009c78:	e7bf      	b.n	8009bfa <_dtoa_r+0x1da>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dc55      	bgt.n	8009d30 <_dtoa_r+0x310>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8e:	e00c      	b.n	8009caa <_dtoa_r+0x28a>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e7f3      	b.n	8009c7c <_dtoa_r+0x25c>
 8009c94:	2300      	movs	r3, #0
 8009c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	9b00      	ldr	r3, [sp, #0]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	9303      	str	r3, [sp, #12]
 8009ca6:	bfb8      	it	lt
 8009ca8:	2301      	movlt	r3, #1
 8009caa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cac:	2200      	movs	r2, #0
 8009cae:	6042      	str	r2, [r0, #4]
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	f102 0614 	add.w	r6, r2, #20
 8009cb6:	429e      	cmp	r6, r3
 8009cb8:	6841      	ldr	r1, [r0, #4]
 8009cba:	d93d      	bls.n	8009d38 <_dtoa_r+0x318>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fcb7 	bl	800a630 <_Balloc>
 8009cc2:	9001      	str	r0, [sp, #4]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d13b      	bne.n	8009d40 <_dtoa_r+0x320>
 8009cc8:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <_dtoa_r+0x2f0>)
 8009cca:	4602      	mov	r2, r0
 8009ccc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cd0:	e6c0      	b.n	8009a54 <_dtoa_r+0x34>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e7df      	b.n	8009c96 <_dtoa_r+0x276>
 8009cd6:	bf00      	nop
 8009cd8:	636f4361 	.word	0x636f4361
 8009cdc:	3fd287a7 	.word	0x3fd287a7
 8009ce0:	8b60c8b3 	.word	0x8b60c8b3
 8009ce4:	3fc68a28 	.word	0x3fc68a28
 8009ce8:	509f79fb 	.word	0x509f79fb
 8009cec:	3fd34413 	.word	0x3fd34413
 8009cf0:	0800c361 	.word	0x0800c361
 8009cf4:	0800c378 	.word	0x0800c378
 8009cf8:	7ff00000 	.word	0x7ff00000
 8009cfc:	0800c35d 	.word	0x0800c35d
 8009d00:	0800c354 	.word	0x0800c354
 8009d04:	0800c331 	.word	0x0800c331
 8009d08:	3ff80000 	.word	0x3ff80000
 8009d0c:	0800c468 	.word	0x0800c468
 8009d10:	0800c3d3 	.word	0x0800c3d3
 8009d14:	2501      	movs	r5, #1
 8009d16:	2300      	movs	r3, #0
 8009d18:	9306      	str	r3, [sp, #24]
 8009d1a:	9508      	str	r5, [sp, #32]
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	2312      	movs	r3, #18
 8009d28:	e7b0      	b.n	8009c8c <_dtoa_r+0x26c>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	9308      	str	r3, [sp, #32]
 8009d2e:	e7f5      	b.n	8009d1c <_dtoa_r+0x2fc>
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d36:	e7b8      	b.n	8009caa <_dtoa_r+0x28a>
 8009d38:	3101      	adds	r1, #1
 8009d3a:	6041      	str	r1, [r0, #4]
 8009d3c:	0052      	lsls	r2, r2, #1
 8009d3e:	e7b8      	b.n	8009cb2 <_dtoa_r+0x292>
 8009d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d42:	9a01      	ldr	r2, [sp, #4]
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	2b0e      	cmp	r3, #14
 8009d4a:	f200 809d 	bhi.w	8009e88 <_dtoa_r+0x468>
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	f000 809a 	beq.w	8009e88 <_dtoa_r+0x468>
 8009d54:	9b00      	ldr	r3, [sp, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	dd32      	ble.n	8009dc0 <_dtoa_r+0x3a0>
 8009d5a:	4ab7      	ldr	r2, [pc, #732]	; (800a038 <_dtoa_r+0x618>)
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d68:	9b00      	ldr	r3, [sp, #0]
 8009d6a:	05d8      	lsls	r0, r3, #23
 8009d6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d70:	d516      	bpl.n	8009da0 <_dtoa_r+0x380>
 8009d72:	4bb2      	ldr	r3, [pc, #712]	; (800a03c <_dtoa_r+0x61c>)
 8009d74:	ec51 0b19 	vmov	r0, r1, d9
 8009d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d7c:	f7f6 fd6e 	bl	800085c <__aeabi_ddiv>
 8009d80:	f007 070f 	and.w	r7, r7, #15
 8009d84:	4682      	mov	sl, r0
 8009d86:	468b      	mov	fp, r1
 8009d88:	2503      	movs	r5, #3
 8009d8a:	4eac      	ldr	r6, [pc, #688]	; (800a03c <_dtoa_r+0x61c>)
 8009d8c:	b957      	cbnz	r7, 8009da4 <_dtoa_r+0x384>
 8009d8e:	4642      	mov	r2, r8
 8009d90:	464b      	mov	r3, r9
 8009d92:	4650      	mov	r0, sl
 8009d94:	4659      	mov	r1, fp
 8009d96:	f7f6 fd61 	bl	800085c <__aeabi_ddiv>
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	e028      	b.n	8009df2 <_dtoa_r+0x3d2>
 8009da0:	2502      	movs	r5, #2
 8009da2:	e7f2      	b.n	8009d8a <_dtoa_r+0x36a>
 8009da4:	07f9      	lsls	r1, r7, #31
 8009da6:	d508      	bpl.n	8009dba <_dtoa_r+0x39a>
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009db0:	f7f6 fc2a 	bl	8000608 <__aeabi_dmul>
 8009db4:	3501      	adds	r5, #1
 8009db6:	4680      	mov	r8, r0
 8009db8:	4689      	mov	r9, r1
 8009dba:	107f      	asrs	r7, r7, #1
 8009dbc:	3608      	adds	r6, #8
 8009dbe:	e7e5      	b.n	8009d8c <_dtoa_r+0x36c>
 8009dc0:	f000 809b 	beq.w	8009efa <_dtoa_r+0x4da>
 8009dc4:	9b00      	ldr	r3, [sp, #0]
 8009dc6:	4f9d      	ldr	r7, [pc, #628]	; (800a03c <_dtoa_r+0x61c>)
 8009dc8:	425e      	negs	r6, r3
 8009dca:	4b9b      	ldr	r3, [pc, #620]	; (800a038 <_dtoa_r+0x618>)
 8009dcc:	f006 020f 	and.w	r2, r6, #15
 8009dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	ec51 0b19 	vmov	r0, r1, d9
 8009ddc:	f7f6 fc14 	bl	8000608 <__aeabi_dmul>
 8009de0:	1136      	asrs	r6, r6, #4
 8009de2:	4682      	mov	sl, r0
 8009de4:	468b      	mov	fp, r1
 8009de6:	2300      	movs	r3, #0
 8009de8:	2502      	movs	r5, #2
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d17a      	bne.n	8009ee4 <_dtoa_r+0x4c4>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1d3      	bne.n	8009d9a <_dtoa_r+0x37a>
 8009df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8082 	beq.w	8009efe <_dtoa_r+0x4de>
 8009dfa:	4b91      	ldr	r3, [pc, #580]	; (800a040 <_dtoa_r+0x620>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4650      	mov	r0, sl
 8009e00:	4659      	mov	r1, fp
 8009e02:	f7f6 fe73 	bl	8000aec <__aeabi_dcmplt>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d079      	beq.n	8009efe <_dtoa_r+0x4de>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d076      	beq.n	8009efe <_dtoa_r+0x4de>
 8009e10:	9b02      	ldr	r3, [sp, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dd36      	ble.n	8009e84 <_dtoa_r+0x464>
 8009e16:	9b00      	ldr	r3, [sp, #0]
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	1e5f      	subs	r7, r3, #1
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4b88      	ldr	r3, [pc, #544]	; (800a044 <_dtoa_r+0x624>)
 8009e22:	f7f6 fbf1 	bl	8000608 <__aeabi_dmul>
 8009e26:	9e02      	ldr	r6, [sp, #8]
 8009e28:	4682      	mov	sl, r0
 8009e2a:	468b      	mov	fp, r1
 8009e2c:	3501      	adds	r5, #1
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7f6 fb80 	bl	8000534 <__aeabi_i2d>
 8009e34:	4652      	mov	r2, sl
 8009e36:	465b      	mov	r3, fp
 8009e38:	f7f6 fbe6 	bl	8000608 <__aeabi_dmul>
 8009e3c:	4b82      	ldr	r3, [pc, #520]	; (800a048 <_dtoa_r+0x628>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f7f6 fa2c 	bl	800029c <__adddf3>
 8009e44:	46d0      	mov	r8, sl
 8009e46:	46d9      	mov	r9, fp
 8009e48:	4682      	mov	sl, r0
 8009e4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	d158      	bne.n	8009f04 <_dtoa_r+0x4e4>
 8009e52:	4b7e      	ldr	r3, [pc, #504]	; (800a04c <_dtoa_r+0x62c>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	4640      	mov	r0, r8
 8009e58:	4649      	mov	r1, r9
 8009e5a:	f7f6 fa1d 	bl	8000298 <__aeabi_dsub>
 8009e5e:	4652      	mov	r2, sl
 8009e60:	465b      	mov	r3, fp
 8009e62:	4680      	mov	r8, r0
 8009e64:	4689      	mov	r9, r1
 8009e66:	f7f6 fe5f 	bl	8000b28 <__aeabi_dcmpgt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f040 8295 	bne.w	800a39a <_dtoa_r+0x97a>
 8009e70:	4652      	mov	r2, sl
 8009e72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	f7f6 fe37 	bl	8000aec <__aeabi_dcmplt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f040 8289 	bne.w	800a396 <_dtoa_r+0x976>
 8009e84:	ec5b ab19 	vmov	sl, fp, d9
 8009e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f2c0 8148 	blt.w	800a120 <_dtoa_r+0x700>
 8009e90:	9a00      	ldr	r2, [sp, #0]
 8009e92:	2a0e      	cmp	r2, #14
 8009e94:	f300 8144 	bgt.w	800a120 <_dtoa_r+0x700>
 8009e98:	4b67      	ldr	r3, [pc, #412]	; (800a038 <_dtoa_r+0x618>)
 8009e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f280 80d5 	bge.w	800a054 <_dtoa_r+0x634>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f300 80d1 	bgt.w	800a054 <_dtoa_r+0x634>
 8009eb2:	f040 826f 	bne.w	800a394 <_dtoa_r+0x974>
 8009eb6:	4b65      	ldr	r3, [pc, #404]	; (800a04c <_dtoa_r+0x62c>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 fba3 	bl	8000608 <__aeabi_dmul>
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	465b      	mov	r3, fp
 8009ec6:	f7f6 fe25 	bl	8000b14 <__aeabi_dcmpge>
 8009eca:	9e03      	ldr	r6, [sp, #12]
 8009ecc:	4637      	mov	r7, r6
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f040 8245 	bne.w	800a35e <_dtoa_r+0x93e>
 8009ed4:	9d01      	ldr	r5, [sp, #4]
 8009ed6:	2331      	movs	r3, #49	; 0x31
 8009ed8:	f805 3b01 	strb.w	r3, [r5], #1
 8009edc:	9b00      	ldr	r3, [sp, #0]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	e240      	b.n	800a366 <_dtoa_r+0x946>
 8009ee4:	07f2      	lsls	r2, r6, #31
 8009ee6:	d505      	bpl.n	8009ef4 <_dtoa_r+0x4d4>
 8009ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eec:	f7f6 fb8c 	bl	8000608 <__aeabi_dmul>
 8009ef0:	3501      	adds	r5, #1
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	1076      	asrs	r6, r6, #1
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	e777      	b.n	8009dea <_dtoa_r+0x3ca>
 8009efa:	2502      	movs	r5, #2
 8009efc:	e779      	b.n	8009df2 <_dtoa_r+0x3d2>
 8009efe:	9f00      	ldr	r7, [sp, #0]
 8009f00:	9e03      	ldr	r6, [sp, #12]
 8009f02:	e794      	b.n	8009e2e <_dtoa_r+0x40e>
 8009f04:	9901      	ldr	r1, [sp, #4]
 8009f06:	4b4c      	ldr	r3, [pc, #304]	; (800a038 <_dtoa_r+0x618>)
 8009f08:	4431      	add	r1, r6
 8009f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f0c:	9908      	ldr	r1, [sp, #32]
 8009f0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d043      	beq.n	8009fa2 <_dtoa_r+0x582>
 8009f1a:	494d      	ldr	r1, [pc, #308]	; (800a050 <_dtoa_r+0x630>)
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f7f6 fc9d 	bl	800085c <__aeabi_ddiv>
 8009f22:	4652      	mov	r2, sl
 8009f24:	465b      	mov	r3, fp
 8009f26:	f7f6 f9b7 	bl	8000298 <__aeabi_dsub>
 8009f2a:	9d01      	ldr	r5, [sp, #4]
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	468b      	mov	fp, r1
 8009f30:	4649      	mov	r1, r9
 8009f32:	4640      	mov	r0, r8
 8009f34:	f7f6 fe18 	bl	8000b68 <__aeabi_d2iz>
 8009f38:	4606      	mov	r6, r0
 8009f3a:	f7f6 fafb 	bl	8000534 <__aeabi_i2d>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4640      	mov	r0, r8
 8009f44:	4649      	mov	r1, r9
 8009f46:	f7f6 f9a7 	bl	8000298 <__aeabi_dsub>
 8009f4a:	3630      	adds	r6, #48	; 0x30
 8009f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f50:	4652      	mov	r2, sl
 8009f52:	465b      	mov	r3, fp
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	f7f6 fdc8 	bl	8000aec <__aeabi_dcmplt>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d163      	bne.n	800a028 <_dtoa_r+0x608>
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	4936      	ldr	r1, [pc, #216]	; (800a040 <_dtoa_r+0x620>)
 8009f66:	2000      	movs	r0, #0
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	465b      	mov	r3, fp
 8009f70:	f7f6 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f040 80b5 	bne.w	800a0e4 <_dtoa_r+0x6c4>
 8009f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	d081      	beq.n	8009e84 <_dtoa_r+0x464>
 8009f80:	4b30      	ldr	r3, [pc, #192]	; (800a044 <_dtoa_r+0x624>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	4650      	mov	r0, sl
 8009f86:	4659      	mov	r1, fp
 8009f88:	f7f6 fb3e 	bl	8000608 <__aeabi_dmul>
 8009f8c:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <_dtoa_r+0x624>)
 8009f8e:	4682      	mov	sl, r0
 8009f90:	468b      	mov	fp, r1
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	2200      	movs	r2, #0
 8009f98:	f7f6 fb36 	bl	8000608 <__aeabi_dmul>
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	4689      	mov	r9, r1
 8009fa0:	e7c6      	b.n	8009f30 <_dtoa_r+0x510>
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	f7f6 fb2f 	bl	8000608 <__aeabi_dmul>
 8009faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fac:	9d01      	ldr	r5, [sp, #4]
 8009fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	f7f6 fdd6 	bl	8000b68 <__aeabi_d2iz>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	f7f6 fab9 	bl	8000534 <__aeabi_i2d>
 8009fc2:	3630      	adds	r6, #48	; 0x30
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4640      	mov	r0, r8
 8009fca:	4649      	mov	r1, r9
 8009fcc:	f7f6 f964 	bl	8000298 <__aeabi_dsub>
 8009fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	4680      	mov	r8, r0
 8009fda:	4689      	mov	r9, r1
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	d124      	bne.n	800a02c <_dtoa_r+0x60c>
 8009fe2:	4b1b      	ldr	r3, [pc, #108]	; (800a050 <_dtoa_r+0x630>)
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	4659      	mov	r1, fp
 8009fe8:	f7f6 f958 	bl	800029c <__adddf3>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	f7f6 fd98 	bl	8000b28 <__aeabi_dcmpgt>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d173      	bne.n	800a0e4 <_dtoa_r+0x6c4>
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	465b      	mov	r3, fp
 800a000:	4913      	ldr	r1, [pc, #76]	; (800a050 <_dtoa_r+0x630>)
 800a002:	2000      	movs	r0, #0
 800a004:	f7f6 f948 	bl	8000298 <__aeabi_dsub>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4640      	mov	r0, r8
 800a00e:	4649      	mov	r1, r9
 800a010:	f7f6 fd6c 	bl	8000aec <__aeabi_dcmplt>
 800a014:	2800      	cmp	r0, #0
 800a016:	f43f af35 	beq.w	8009e84 <_dtoa_r+0x464>
 800a01a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a01c:	1e6b      	subs	r3, r5, #1
 800a01e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a020:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a024:	2b30      	cmp	r3, #48	; 0x30
 800a026:	d0f8      	beq.n	800a01a <_dtoa_r+0x5fa>
 800a028:	9700      	str	r7, [sp, #0]
 800a02a:	e049      	b.n	800a0c0 <_dtoa_r+0x6a0>
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <_dtoa_r+0x624>)
 800a02e:	f7f6 faeb 	bl	8000608 <__aeabi_dmul>
 800a032:	4680      	mov	r8, r0
 800a034:	4689      	mov	r9, r1
 800a036:	e7bd      	b.n	8009fb4 <_dtoa_r+0x594>
 800a038:	0800c468 	.word	0x0800c468
 800a03c:	0800c440 	.word	0x0800c440
 800a040:	3ff00000 	.word	0x3ff00000
 800a044:	40240000 	.word	0x40240000
 800a048:	401c0000 	.word	0x401c0000
 800a04c:	40140000 	.word	0x40140000
 800a050:	3fe00000 	.word	0x3fe00000
 800a054:	9d01      	ldr	r5, [sp, #4]
 800a056:	4656      	mov	r6, sl
 800a058:	465f      	mov	r7, fp
 800a05a:	4642      	mov	r2, r8
 800a05c:	464b      	mov	r3, r9
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fbfb 	bl	800085c <__aeabi_ddiv>
 800a066:	f7f6 fd7f 	bl	8000b68 <__aeabi_d2iz>
 800a06a:	4682      	mov	sl, r0
 800a06c:	f7f6 fa62 	bl	8000534 <__aeabi_i2d>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	f7f6 fac8 	bl	8000608 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a084:	f7f6 f908 	bl	8000298 <__aeabi_dsub>
 800a088:	f805 6b01 	strb.w	r6, [r5], #1
 800a08c:	9e01      	ldr	r6, [sp, #4]
 800a08e:	9f03      	ldr	r7, [sp, #12]
 800a090:	1bae      	subs	r6, r5, r6
 800a092:	42b7      	cmp	r7, r6
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	d135      	bne.n	800a106 <_dtoa_r+0x6e6>
 800a09a:	f7f6 f8ff 	bl	800029c <__adddf3>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	f7f6 fd3f 	bl	8000b28 <__aeabi_dcmpgt>
 800a0aa:	b9d0      	cbnz	r0, 800a0e2 <_dtoa_r+0x6c2>
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b8:	b110      	cbz	r0, 800a0c0 <_dtoa_r+0x6a0>
 800a0ba:	f01a 0f01 	tst.w	sl, #1
 800a0be:	d110      	bne.n	800a0e2 <_dtoa_r+0x6c2>
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	ee18 1a10 	vmov	r1, s16
 800a0c6:	f000 faf3 	bl	800a6b0 <_Bfree>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9800      	ldr	r0, [sp, #0]
 800a0ce:	702b      	strb	r3, [r5, #0]
 800a0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	6018      	str	r0, [r3, #0]
 800a0d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f43f acf1 	beq.w	8009ac0 <_dtoa_r+0xa0>
 800a0de:	601d      	str	r5, [r3, #0]
 800a0e0:	e4ee      	b.n	8009ac0 <_dtoa_r+0xa0>
 800a0e2:	9f00      	ldr	r7, [sp, #0]
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ec:	2a39      	cmp	r2, #57	; 0x39
 800a0ee:	d106      	bne.n	800a0fe <_dtoa_r+0x6de>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1f7      	bne.n	800a0e6 <_dtoa_r+0x6c6>
 800a0f6:	9901      	ldr	r1, [sp, #4]
 800a0f8:	2230      	movs	r2, #48	; 0x30
 800a0fa:	3701      	adds	r7, #1
 800a0fc:	700a      	strb	r2, [r1, #0]
 800a0fe:	781a      	ldrb	r2, [r3, #0]
 800a100:	3201      	adds	r2, #1
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	e790      	b.n	800a028 <_dtoa_r+0x608>
 800a106:	4ba6      	ldr	r3, [pc, #664]	; (800a3a0 <_dtoa_r+0x980>)
 800a108:	2200      	movs	r2, #0
 800a10a:	f7f6 fa7d 	bl	8000608 <__aeabi_dmul>
 800a10e:	2200      	movs	r2, #0
 800a110:	2300      	movs	r3, #0
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	f7f6 fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d09d      	beq.n	800a05a <_dtoa_r+0x63a>
 800a11e:	e7cf      	b.n	800a0c0 <_dtoa_r+0x6a0>
 800a120:	9a08      	ldr	r2, [sp, #32]
 800a122:	2a00      	cmp	r2, #0
 800a124:	f000 80d7 	beq.w	800a2d6 <_dtoa_r+0x8b6>
 800a128:	9a06      	ldr	r2, [sp, #24]
 800a12a:	2a01      	cmp	r2, #1
 800a12c:	f300 80ba 	bgt.w	800a2a4 <_dtoa_r+0x884>
 800a130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a132:	2a00      	cmp	r2, #0
 800a134:	f000 80b2 	beq.w	800a29c <_dtoa_r+0x87c>
 800a138:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a13c:	9e07      	ldr	r6, [sp, #28]
 800a13e:	9d04      	ldr	r5, [sp, #16]
 800a140:	9a04      	ldr	r2, [sp, #16]
 800a142:	441a      	add	r2, r3
 800a144:	9204      	str	r2, [sp, #16]
 800a146:	9a05      	ldr	r2, [sp, #20]
 800a148:	2101      	movs	r1, #1
 800a14a:	441a      	add	r2, r3
 800a14c:	4620      	mov	r0, r4
 800a14e:	9205      	str	r2, [sp, #20]
 800a150:	f000 fb66 	bl	800a820 <__i2b>
 800a154:	4607      	mov	r7, r0
 800a156:	2d00      	cmp	r5, #0
 800a158:	dd0c      	ble.n	800a174 <_dtoa_r+0x754>
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd09      	ble.n	800a174 <_dtoa_r+0x754>
 800a160:	42ab      	cmp	r3, r5
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	bfa8      	it	ge
 800a166:	462b      	movge	r3, r5
 800a168:	1ad2      	subs	r2, r2, r3
 800a16a:	9204      	str	r2, [sp, #16]
 800a16c:	9a05      	ldr	r2, [sp, #20]
 800a16e:	1aed      	subs	r5, r5, r3
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	9b07      	ldr	r3, [sp, #28]
 800a176:	b31b      	cbz	r3, 800a1c0 <_dtoa_r+0x7a0>
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 80af 	beq.w	800a2de <_dtoa_r+0x8be>
 800a180:	2e00      	cmp	r6, #0
 800a182:	dd13      	ble.n	800a1ac <_dtoa_r+0x78c>
 800a184:	4639      	mov	r1, r7
 800a186:	4632      	mov	r2, r6
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fc09 	bl	800a9a0 <__pow5mult>
 800a18e:	ee18 2a10 	vmov	r2, s16
 800a192:	4601      	mov	r1, r0
 800a194:	4607      	mov	r7, r0
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fb58 	bl	800a84c <__multiply>
 800a19c:	ee18 1a10 	vmov	r1, s16
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fa84 	bl	800a6b0 <_Bfree>
 800a1a8:	ee08 8a10 	vmov	s16, r8
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	1b9a      	subs	r2, r3, r6
 800a1b0:	d006      	beq.n	800a1c0 <_dtoa_r+0x7a0>
 800a1b2:	ee18 1a10 	vmov	r1, s16
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f000 fbf2 	bl	800a9a0 <__pow5mult>
 800a1bc:	ee08 0a10 	vmov	s16, r0
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fb2c 	bl	800a820 <__i2b>
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	f340 8088 	ble.w	800a2e2 <_dtoa_r+0x8c2>
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4601      	mov	r1, r0
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 fbe2 	bl	800a9a0 <__pow5mult>
 800a1dc:	9b06      	ldr	r3, [sp, #24]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	f340 8081 	ble.w	800a2e8 <_dtoa_r+0x8c8>
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	6933      	ldr	r3, [r6, #16]
 800a1ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1f0:	6918      	ldr	r0, [r3, #16]
 800a1f2:	f000 fac5 	bl	800a780 <__hi0bits>
 800a1f6:	f1c0 0020 	rsb	r0, r0, #32
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	4418      	add	r0, r3
 800a1fe:	f010 001f 	ands.w	r0, r0, #31
 800a202:	f000 8092 	beq.w	800a32a <_dtoa_r+0x90a>
 800a206:	f1c0 0320 	rsb	r3, r0, #32
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	f340 808a 	ble.w	800a324 <_dtoa_r+0x904>
 800a210:	f1c0 001c 	rsb	r0, r0, #28
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	4403      	add	r3, r0
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	4403      	add	r3, r0
 800a21e:	4405      	add	r5, r0
 800a220:	9305      	str	r3, [sp, #20]
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd07      	ble.n	800a238 <_dtoa_r+0x818>
 800a228:	ee18 1a10 	vmov	r1, s16
 800a22c:	461a      	mov	r2, r3
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 fc10 	bl	800aa54 <__lshift>
 800a234:	ee08 0a10 	vmov	s16, r0
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dd05      	ble.n	800a24a <_dtoa_r+0x82a>
 800a23e:	4631      	mov	r1, r6
 800a240:	461a      	mov	r2, r3
 800a242:	4620      	mov	r0, r4
 800a244:	f000 fc06 	bl	800aa54 <__lshift>
 800a248:	4606      	mov	r6, r0
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d06e      	beq.n	800a32e <_dtoa_r+0x90e>
 800a250:	ee18 0a10 	vmov	r0, s16
 800a254:	4631      	mov	r1, r6
 800a256:	f000 fc6d 	bl	800ab34 <__mcmp>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	da67      	bge.n	800a32e <_dtoa_r+0x90e>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	3b01      	subs	r3, #1
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	220a      	movs	r2, #10
 800a26a:	2300      	movs	r3, #0
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fa41 	bl	800a6f4 <__multadd>
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	ee08 0a10 	vmov	s16, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 81b1 	beq.w	800a5e0 <_dtoa_r+0xbc0>
 800a27e:	2300      	movs	r3, #0
 800a280:	4639      	mov	r1, r7
 800a282:	220a      	movs	r2, #10
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fa35 	bl	800a6f4 <__multadd>
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	4607      	mov	r7, r0
 800a290:	f300 808e 	bgt.w	800a3b0 <_dtoa_r+0x990>
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	2b02      	cmp	r3, #2
 800a298:	dc51      	bgt.n	800a33e <_dtoa_r+0x91e>
 800a29a:	e089      	b.n	800a3b0 <_dtoa_r+0x990>
 800a29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a29e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2a2:	e74b      	b.n	800a13c <_dtoa_r+0x71c>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	1e5e      	subs	r6, r3, #1
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	42b3      	cmp	r3, r6
 800a2ac:	bfbf      	itttt	lt
 800a2ae:	9b07      	ldrlt	r3, [sp, #28]
 800a2b0:	9607      	strlt	r6, [sp, #28]
 800a2b2:	1af2      	sublt	r2, r6, r3
 800a2b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2b6:	bfb6      	itet	lt
 800a2b8:	189b      	addlt	r3, r3, r2
 800a2ba:	1b9e      	subge	r6, r3, r6
 800a2bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	bfb8      	it	lt
 800a2c2:	2600      	movlt	r6, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bfb7      	itett	lt
 800a2c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2d0:	1a9d      	sublt	r5, r3, r2
 800a2d2:	2300      	movlt	r3, #0
 800a2d4:	e734      	b.n	800a140 <_dtoa_r+0x720>
 800a2d6:	9e07      	ldr	r6, [sp, #28]
 800a2d8:	9d04      	ldr	r5, [sp, #16]
 800a2da:	9f08      	ldr	r7, [sp, #32]
 800a2dc:	e73b      	b.n	800a156 <_dtoa_r+0x736>
 800a2de:	9a07      	ldr	r2, [sp, #28]
 800a2e0:	e767      	b.n	800a1b2 <_dtoa_r+0x792>
 800a2e2:	9b06      	ldr	r3, [sp, #24]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	dc18      	bgt.n	800a31a <_dtoa_r+0x8fa>
 800a2e8:	f1ba 0f00 	cmp.w	sl, #0
 800a2ec:	d115      	bne.n	800a31a <_dtoa_r+0x8fa>
 800a2ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2f2:	b993      	cbnz	r3, 800a31a <_dtoa_r+0x8fa>
 800a2f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2f8:	0d1b      	lsrs	r3, r3, #20
 800a2fa:	051b      	lsls	r3, r3, #20
 800a2fc:	b183      	cbz	r3, 800a320 <_dtoa_r+0x900>
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	3301      	adds	r3, #1
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	9b05      	ldr	r3, [sp, #20]
 800a306:	3301      	adds	r3, #1
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	f04f 0801 	mov.w	r8, #1
 800a30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	f47f af6a 	bne.w	800a1ea <_dtoa_r+0x7ca>
 800a316:	2001      	movs	r0, #1
 800a318:	e76f      	b.n	800a1fa <_dtoa_r+0x7da>
 800a31a:	f04f 0800 	mov.w	r8, #0
 800a31e:	e7f6      	b.n	800a30e <_dtoa_r+0x8ee>
 800a320:	4698      	mov	r8, r3
 800a322:	e7f4      	b.n	800a30e <_dtoa_r+0x8ee>
 800a324:	f43f af7d 	beq.w	800a222 <_dtoa_r+0x802>
 800a328:	4618      	mov	r0, r3
 800a32a:	301c      	adds	r0, #28
 800a32c:	e772      	b.n	800a214 <_dtoa_r+0x7f4>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc37      	bgt.n	800a3a4 <_dtoa_r+0x984>
 800a334:	9b06      	ldr	r3, [sp, #24]
 800a336:	2b02      	cmp	r3, #2
 800a338:	dd34      	ble.n	800a3a4 <_dtoa_r+0x984>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	9302      	str	r3, [sp, #8]
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	b96b      	cbnz	r3, 800a35e <_dtoa_r+0x93e>
 800a342:	4631      	mov	r1, r6
 800a344:	2205      	movs	r2, #5
 800a346:	4620      	mov	r0, r4
 800a348:	f000 f9d4 	bl	800a6f4 <__multadd>
 800a34c:	4601      	mov	r1, r0
 800a34e:	4606      	mov	r6, r0
 800a350:	ee18 0a10 	vmov	r0, s16
 800a354:	f000 fbee 	bl	800ab34 <__mcmp>
 800a358:	2800      	cmp	r0, #0
 800a35a:	f73f adbb 	bgt.w	8009ed4 <_dtoa_r+0x4b4>
 800a35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a360:	9d01      	ldr	r5, [sp, #4]
 800a362:	43db      	mvns	r3, r3
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f04f 0800 	mov.w	r8, #0
 800a36a:	4631      	mov	r1, r6
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f99f 	bl	800a6b0 <_Bfree>
 800a372:	2f00      	cmp	r7, #0
 800a374:	f43f aea4 	beq.w	800a0c0 <_dtoa_r+0x6a0>
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	d005      	beq.n	800a38a <_dtoa_r+0x96a>
 800a37e:	45b8      	cmp	r8, r7
 800a380:	d003      	beq.n	800a38a <_dtoa_r+0x96a>
 800a382:	4641      	mov	r1, r8
 800a384:	4620      	mov	r0, r4
 800a386:	f000 f993 	bl	800a6b0 <_Bfree>
 800a38a:	4639      	mov	r1, r7
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 f98f 	bl	800a6b0 <_Bfree>
 800a392:	e695      	b.n	800a0c0 <_dtoa_r+0x6a0>
 800a394:	2600      	movs	r6, #0
 800a396:	4637      	mov	r7, r6
 800a398:	e7e1      	b.n	800a35e <_dtoa_r+0x93e>
 800a39a:	9700      	str	r7, [sp, #0]
 800a39c:	4637      	mov	r7, r6
 800a39e:	e599      	b.n	8009ed4 <_dtoa_r+0x4b4>
 800a3a0:	40240000 	.word	0x40240000
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80ca 	beq.w	800a540 <_dtoa_r+0xb20>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	9302      	str	r3, [sp, #8]
 800a3b0:	2d00      	cmp	r5, #0
 800a3b2:	dd05      	ble.n	800a3c0 <_dtoa_r+0x9a0>
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fb4b 	bl	800aa54 <__lshift>
 800a3be:	4607      	mov	r7, r0
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	d05b      	beq.n	800a47e <_dtoa_r+0xa5e>
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 f931 	bl	800a630 <_Balloc>
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	b928      	cbnz	r0, 800a3de <_dtoa_r+0x9be>
 800a3d2:	4b87      	ldr	r3, [pc, #540]	; (800a5f0 <_dtoa_r+0xbd0>)
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3da:	f7ff bb3b 	b.w	8009a54 <_dtoa_r+0x34>
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	3202      	adds	r2, #2
 800a3e2:	0092      	lsls	r2, r2, #2
 800a3e4:	f107 010c 	add.w	r1, r7, #12
 800a3e8:	300c      	adds	r0, #12
 800a3ea:	f000 f913 	bl	800a614 <memcpy>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 fb2e 	bl	800aa54 <__lshift>
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	f103 0901 	add.w	r9, r3, #1
 800a3fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a402:	4413      	add	r3, r2
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	f00a 0301 	and.w	r3, sl, #1
 800a40a:	46b8      	mov	r8, r7
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	4607      	mov	r7, r0
 800a410:	4631      	mov	r1, r6
 800a412:	ee18 0a10 	vmov	r0, s16
 800a416:	f7ff fa77 	bl	8009908 <quorem>
 800a41a:	4641      	mov	r1, r8
 800a41c:	9002      	str	r0, [sp, #8]
 800a41e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a422:	ee18 0a10 	vmov	r0, s16
 800a426:	f000 fb85 	bl	800ab34 <__mcmp>
 800a42a:	463a      	mov	r2, r7
 800a42c:	9003      	str	r0, [sp, #12]
 800a42e:	4631      	mov	r1, r6
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fb9b 	bl	800ab6c <__mdiff>
 800a436:	68c2      	ldr	r2, [r0, #12]
 800a438:	f109 3bff 	add.w	fp, r9, #4294967295
 800a43c:	4605      	mov	r5, r0
 800a43e:	bb02      	cbnz	r2, 800a482 <_dtoa_r+0xa62>
 800a440:	4601      	mov	r1, r0
 800a442:	ee18 0a10 	vmov	r0, s16
 800a446:	f000 fb75 	bl	800ab34 <__mcmp>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4629      	mov	r1, r5
 800a44e:	4620      	mov	r0, r4
 800a450:	9207      	str	r2, [sp, #28]
 800a452:	f000 f92d 	bl	800a6b0 <_Bfree>
 800a456:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a45a:	ea43 0102 	orr.w	r1, r3, r2
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	430b      	orrs	r3, r1
 800a462:	464d      	mov	r5, r9
 800a464:	d10f      	bne.n	800a486 <_dtoa_r+0xa66>
 800a466:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a46a:	d02a      	beq.n	800a4c2 <_dtoa_r+0xaa2>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd02      	ble.n	800a478 <_dtoa_r+0xa58>
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a478:	f88b a000 	strb.w	sl, [fp]
 800a47c:	e775      	b.n	800a36a <_dtoa_r+0x94a>
 800a47e:	4638      	mov	r0, r7
 800a480:	e7ba      	b.n	800a3f8 <_dtoa_r+0x9d8>
 800a482:	2201      	movs	r2, #1
 800a484:	e7e2      	b.n	800a44c <_dtoa_r+0xa2c>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	db04      	blt.n	800a496 <_dtoa_r+0xa76>
 800a48c:	9906      	ldr	r1, [sp, #24]
 800a48e:	430b      	orrs	r3, r1
 800a490:	9904      	ldr	r1, [sp, #16]
 800a492:	430b      	orrs	r3, r1
 800a494:	d122      	bne.n	800a4dc <_dtoa_r+0xabc>
 800a496:	2a00      	cmp	r2, #0
 800a498:	ddee      	ble.n	800a478 <_dtoa_r+0xa58>
 800a49a:	ee18 1a10 	vmov	r1, s16
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fad7 	bl	800aa54 <__lshift>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	ee08 0a10 	vmov	s16, r0
 800a4ac:	f000 fb42 	bl	800ab34 <__mcmp>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	dc03      	bgt.n	800a4bc <_dtoa_r+0xa9c>
 800a4b4:	d1e0      	bne.n	800a478 <_dtoa_r+0xa58>
 800a4b6:	f01a 0f01 	tst.w	sl, #1
 800a4ba:	d0dd      	beq.n	800a478 <_dtoa_r+0xa58>
 800a4bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4c0:	d1d7      	bne.n	800a472 <_dtoa_r+0xa52>
 800a4c2:	2339      	movs	r3, #57	; 0x39
 800a4c4:	f88b 3000 	strb.w	r3, [fp]
 800a4c8:	462b      	mov	r3, r5
 800a4ca:	461d      	mov	r5, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4d2:	2a39      	cmp	r2, #57	; 0x39
 800a4d4:	d071      	beq.n	800a5ba <_dtoa_r+0xb9a>
 800a4d6:	3201      	adds	r2, #1
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e746      	b.n	800a36a <_dtoa_r+0x94a>
 800a4dc:	2a00      	cmp	r2, #0
 800a4de:	dd07      	ble.n	800a4f0 <_dtoa_r+0xad0>
 800a4e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4e4:	d0ed      	beq.n	800a4c2 <_dtoa_r+0xaa2>
 800a4e6:	f10a 0301 	add.w	r3, sl, #1
 800a4ea:	f88b 3000 	strb.w	r3, [fp]
 800a4ee:	e73c      	b.n	800a36a <_dtoa_r+0x94a>
 800a4f0:	9b05      	ldr	r3, [sp, #20]
 800a4f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4f6:	4599      	cmp	r9, r3
 800a4f8:	d047      	beq.n	800a58a <_dtoa_r+0xb6a>
 800a4fa:	ee18 1a10 	vmov	r1, s16
 800a4fe:	2300      	movs	r3, #0
 800a500:	220a      	movs	r2, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f8f6 	bl	800a6f4 <__multadd>
 800a508:	45b8      	cmp	r8, r7
 800a50a:	ee08 0a10 	vmov	s16, r0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	f04f 020a 	mov.w	r2, #10
 800a516:	4641      	mov	r1, r8
 800a518:	4620      	mov	r0, r4
 800a51a:	d106      	bne.n	800a52a <_dtoa_r+0xb0a>
 800a51c:	f000 f8ea 	bl	800a6f4 <__multadd>
 800a520:	4680      	mov	r8, r0
 800a522:	4607      	mov	r7, r0
 800a524:	f109 0901 	add.w	r9, r9, #1
 800a528:	e772      	b.n	800a410 <_dtoa_r+0x9f0>
 800a52a:	f000 f8e3 	bl	800a6f4 <__multadd>
 800a52e:	4639      	mov	r1, r7
 800a530:	4680      	mov	r8, r0
 800a532:	2300      	movs	r3, #0
 800a534:	220a      	movs	r2, #10
 800a536:	4620      	mov	r0, r4
 800a538:	f000 f8dc 	bl	800a6f4 <__multadd>
 800a53c:	4607      	mov	r7, r0
 800a53e:	e7f1      	b.n	800a524 <_dtoa_r+0xb04>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	9302      	str	r3, [sp, #8]
 800a544:	9d01      	ldr	r5, [sp, #4]
 800a546:	ee18 0a10 	vmov	r0, s16
 800a54a:	4631      	mov	r1, r6
 800a54c:	f7ff f9dc 	bl	8009908 <quorem>
 800a550:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a554:	9b01      	ldr	r3, [sp, #4]
 800a556:	f805 ab01 	strb.w	sl, [r5], #1
 800a55a:	1aea      	subs	r2, r5, r3
 800a55c:	9b02      	ldr	r3, [sp, #8]
 800a55e:	4293      	cmp	r3, r2
 800a560:	dd09      	ble.n	800a576 <_dtoa_r+0xb56>
 800a562:	ee18 1a10 	vmov	r1, s16
 800a566:	2300      	movs	r3, #0
 800a568:	220a      	movs	r2, #10
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 f8c2 	bl	800a6f4 <__multadd>
 800a570:	ee08 0a10 	vmov	s16, r0
 800a574:	e7e7      	b.n	800a546 <_dtoa_r+0xb26>
 800a576:	9b02      	ldr	r3, [sp, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bfc8      	it	gt
 800a57c:	461d      	movgt	r5, r3
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	bfd8      	it	le
 800a582:	2501      	movle	r5, #1
 800a584:	441d      	add	r5, r3
 800a586:	f04f 0800 	mov.w	r8, #0
 800a58a:	ee18 1a10 	vmov	r1, s16
 800a58e:	2201      	movs	r2, #1
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fa5f 	bl	800aa54 <__lshift>
 800a596:	4631      	mov	r1, r6
 800a598:	ee08 0a10 	vmov	s16, r0
 800a59c:	f000 faca 	bl	800ab34 <__mcmp>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	dc91      	bgt.n	800a4c8 <_dtoa_r+0xaa8>
 800a5a4:	d102      	bne.n	800a5ac <_dtoa_r+0xb8c>
 800a5a6:	f01a 0f01 	tst.w	sl, #1
 800a5aa:	d18d      	bne.n	800a4c8 <_dtoa_r+0xaa8>
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	461d      	mov	r5, r3
 800a5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b4:	2a30      	cmp	r2, #48	; 0x30
 800a5b6:	d0fa      	beq.n	800a5ae <_dtoa_r+0xb8e>
 800a5b8:	e6d7      	b.n	800a36a <_dtoa_r+0x94a>
 800a5ba:	9a01      	ldr	r2, [sp, #4]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d184      	bne.n	800a4ca <_dtoa_r+0xaaa>
 800a5c0:	9b00      	ldr	r3, [sp, #0]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2331      	movs	r3, #49	; 0x31
 800a5c8:	7013      	strb	r3, [r2, #0]
 800a5ca:	e6ce      	b.n	800a36a <_dtoa_r+0x94a>
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <_dtoa_r+0xbd4>)
 800a5ce:	f7ff ba95 	b.w	8009afc <_dtoa_r+0xdc>
 800a5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f47f aa6e 	bne.w	8009ab6 <_dtoa_r+0x96>
 800a5da:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <_dtoa_r+0xbd8>)
 800a5dc:	f7ff ba8e 	b.w	8009afc <_dtoa_r+0xdc>
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dcae      	bgt.n	800a544 <_dtoa_r+0xb24>
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	f73f aea8 	bgt.w	800a33e <_dtoa_r+0x91e>
 800a5ee:	e7a9      	b.n	800a544 <_dtoa_r+0xb24>
 800a5f0:	0800c3d3 	.word	0x0800c3d3
 800a5f4:	0800c330 	.word	0x0800c330
 800a5f8:	0800c354 	.word	0x0800c354

0800a5fc <_localeconv_r>:
 800a5fc:	4800      	ldr	r0, [pc, #0]	; (800a600 <_localeconv_r+0x4>)
 800a5fe:	4770      	bx	lr
 800a600:	20000168 	.word	0x20000168

0800a604 <malloc>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <malloc+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f000 bc17 	b.w	800ae3c <_malloc_r>
 800a60e:	bf00      	nop
 800a610:	20000014 	.word	0x20000014

0800a614 <memcpy>:
 800a614:	440a      	add	r2, r1
 800a616:	4291      	cmp	r1, r2
 800a618:	f100 33ff 	add.w	r3, r0, #4294967295
 800a61c:	d100      	bne.n	800a620 <memcpy+0xc>
 800a61e:	4770      	bx	lr
 800a620:	b510      	push	{r4, lr}
 800a622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a62a:	4291      	cmp	r1, r2
 800a62c:	d1f9      	bne.n	800a622 <memcpy+0xe>
 800a62e:	bd10      	pop	{r4, pc}

0800a630 <_Balloc>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a634:	4604      	mov	r4, r0
 800a636:	460d      	mov	r5, r1
 800a638:	b976      	cbnz	r6, 800a658 <_Balloc+0x28>
 800a63a:	2010      	movs	r0, #16
 800a63c:	f7ff ffe2 	bl	800a604 <malloc>
 800a640:	4602      	mov	r2, r0
 800a642:	6260      	str	r0, [r4, #36]	; 0x24
 800a644:	b920      	cbnz	r0, 800a650 <_Balloc+0x20>
 800a646:	4b18      	ldr	r3, [pc, #96]	; (800a6a8 <_Balloc+0x78>)
 800a648:	4818      	ldr	r0, [pc, #96]	; (800a6ac <_Balloc+0x7c>)
 800a64a:	2166      	movs	r1, #102	; 0x66
 800a64c:	f000 fdd6 	bl	800b1fc <__assert_func>
 800a650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a654:	6006      	str	r6, [r0, #0]
 800a656:	60c6      	str	r6, [r0, #12]
 800a658:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a65a:	68f3      	ldr	r3, [r6, #12]
 800a65c:	b183      	cbz	r3, 800a680 <_Balloc+0x50>
 800a65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a666:	b9b8      	cbnz	r0, 800a698 <_Balloc+0x68>
 800a668:	2101      	movs	r1, #1
 800a66a:	fa01 f605 	lsl.w	r6, r1, r5
 800a66e:	1d72      	adds	r2, r6, #5
 800a670:	0092      	lsls	r2, r2, #2
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fb60 	bl	800ad38 <_calloc_r>
 800a678:	b160      	cbz	r0, 800a694 <_Balloc+0x64>
 800a67a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a67e:	e00e      	b.n	800a69e <_Balloc+0x6e>
 800a680:	2221      	movs	r2, #33	; 0x21
 800a682:	2104      	movs	r1, #4
 800a684:	4620      	mov	r0, r4
 800a686:	f000 fb57 	bl	800ad38 <_calloc_r>
 800a68a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a68c:	60f0      	str	r0, [r6, #12]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e4      	bne.n	800a65e <_Balloc+0x2e>
 800a694:	2000      	movs	r0, #0
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	6802      	ldr	r2, [r0, #0]
 800a69a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6a4:	e7f7      	b.n	800a696 <_Balloc+0x66>
 800a6a6:	bf00      	nop
 800a6a8:	0800c361 	.word	0x0800c361
 800a6ac:	0800c3e4 	.word	0x0800c3e4

0800a6b0 <_Bfree>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	b976      	cbnz	r6, 800a6d8 <_Bfree+0x28>
 800a6ba:	2010      	movs	r0, #16
 800a6bc:	f7ff ffa2 	bl	800a604 <malloc>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	6268      	str	r0, [r5, #36]	; 0x24
 800a6c4:	b920      	cbnz	r0, 800a6d0 <_Bfree+0x20>
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <_Bfree+0x3c>)
 800a6c8:	4809      	ldr	r0, [pc, #36]	; (800a6f0 <_Bfree+0x40>)
 800a6ca:	218a      	movs	r1, #138	; 0x8a
 800a6cc:	f000 fd96 	bl	800b1fc <__assert_func>
 800a6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6d4:	6006      	str	r6, [r0, #0]
 800a6d6:	60c6      	str	r6, [r0, #12]
 800a6d8:	b13c      	cbz	r4, 800a6ea <_Bfree+0x3a>
 800a6da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6e4:	6021      	str	r1, [r4, #0]
 800a6e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	0800c361 	.word	0x0800c361
 800a6f0:	0800c3e4 	.word	0x0800c3e4

0800a6f4 <__multadd>:
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	690d      	ldr	r5, [r1, #16]
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	461e      	mov	r6, r3
 800a700:	f101 0c14 	add.w	ip, r1, #20
 800a704:	2000      	movs	r0, #0
 800a706:	f8dc 3000 	ldr.w	r3, [ip]
 800a70a:	b299      	uxth	r1, r3
 800a70c:	fb02 6101 	mla	r1, r2, r1, r6
 800a710:	0c1e      	lsrs	r6, r3, #16
 800a712:	0c0b      	lsrs	r3, r1, #16
 800a714:	fb02 3306 	mla	r3, r2, r6, r3
 800a718:	b289      	uxth	r1, r1
 800a71a:	3001      	adds	r0, #1
 800a71c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a720:	4285      	cmp	r5, r0
 800a722:	f84c 1b04 	str.w	r1, [ip], #4
 800a726:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a72a:	dcec      	bgt.n	800a706 <__multadd+0x12>
 800a72c:	b30e      	cbz	r6, 800a772 <__multadd+0x7e>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	42ab      	cmp	r3, r5
 800a732:	dc19      	bgt.n	800a768 <__multadd+0x74>
 800a734:	6861      	ldr	r1, [r4, #4]
 800a736:	4638      	mov	r0, r7
 800a738:	3101      	adds	r1, #1
 800a73a:	f7ff ff79 	bl	800a630 <_Balloc>
 800a73e:	4680      	mov	r8, r0
 800a740:	b928      	cbnz	r0, 800a74e <__multadd+0x5a>
 800a742:	4602      	mov	r2, r0
 800a744:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <__multadd+0x84>)
 800a746:	480d      	ldr	r0, [pc, #52]	; (800a77c <__multadd+0x88>)
 800a748:	21b5      	movs	r1, #181	; 0xb5
 800a74a:	f000 fd57 	bl	800b1fc <__assert_func>
 800a74e:	6922      	ldr	r2, [r4, #16]
 800a750:	3202      	adds	r2, #2
 800a752:	f104 010c 	add.w	r1, r4, #12
 800a756:	0092      	lsls	r2, r2, #2
 800a758:	300c      	adds	r0, #12
 800a75a:	f7ff ff5b 	bl	800a614 <memcpy>
 800a75e:	4621      	mov	r1, r4
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff ffa5 	bl	800a6b0 <_Bfree>
 800a766:	4644      	mov	r4, r8
 800a768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a76c:	3501      	adds	r5, #1
 800a76e:	615e      	str	r6, [r3, #20]
 800a770:	6125      	str	r5, [r4, #16]
 800a772:	4620      	mov	r0, r4
 800a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a778:	0800c3d3 	.word	0x0800c3d3
 800a77c:	0800c3e4 	.word	0x0800c3e4

0800a780 <__hi0bits>:
 800a780:	0c03      	lsrs	r3, r0, #16
 800a782:	041b      	lsls	r3, r3, #16
 800a784:	b9d3      	cbnz	r3, 800a7bc <__hi0bits+0x3c>
 800a786:	0400      	lsls	r0, r0, #16
 800a788:	2310      	movs	r3, #16
 800a78a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a78e:	bf04      	itt	eq
 800a790:	0200      	lsleq	r0, r0, #8
 800a792:	3308      	addeq	r3, #8
 800a794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a798:	bf04      	itt	eq
 800a79a:	0100      	lsleq	r0, r0, #4
 800a79c:	3304      	addeq	r3, #4
 800a79e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7a2:	bf04      	itt	eq
 800a7a4:	0080      	lsleq	r0, r0, #2
 800a7a6:	3302      	addeq	r3, #2
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	db05      	blt.n	800a7b8 <__hi0bits+0x38>
 800a7ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7b0:	f103 0301 	add.w	r3, r3, #1
 800a7b4:	bf08      	it	eq
 800a7b6:	2320      	moveq	r3, #32
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	4770      	bx	lr
 800a7bc:	2300      	movs	r3, #0
 800a7be:	e7e4      	b.n	800a78a <__hi0bits+0xa>

0800a7c0 <__lo0bits>:
 800a7c0:	6803      	ldr	r3, [r0, #0]
 800a7c2:	f013 0207 	ands.w	r2, r3, #7
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	d00b      	beq.n	800a7e2 <__lo0bits+0x22>
 800a7ca:	07da      	lsls	r2, r3, #31
 800a7cc:	d423      	bmi.n	800a816 <__lo0bits+0x56>
 800a7ce:	0798      	lsls	r0, r3, #30
 800a7d0:	bf49      	itett	mi
 800a7d2:	085b      	lsrmi	r3, r3, #1
 800a7d4:	089b      	lsrpl	r3, r3, #2
 800a7d6:	2001      	movmi	r0, #1
 800a7d8:	600b      	strmi	r3, [r1, #0]
 800a7da:	bf5c      	itt	pl
 800a7dc:	600b      	strpl	r3, [r1, #0]
 800a7de:	2002      	movpl	r0, #2
 800a7e0:	4770      	bx	lr
 800a7e2:	b298      	uxth	r0, r3
 800a7e4:	b9a8      	cbnz	r0, 800a812 <__lo0bits+0x52>
 800a7e6:	0c1b      	lsrs	r3, r3, #16
 800a7e8:	2010      	movs	r0, #16
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	b90a      	cbnz	r2, 800a7f2 <__lo0bits+0x32>
 800a7ee:	3008      	adds	r0, #8
 800a7f0:	0a1b      	lsrs	r3, r3, #8
 800a7f2:	071a      	lsls	r2, r3, #28
 800a7f4:	bf04      	itt	eq
 800a7f6:	091b      	lsreq	r3, r3, #4
 800a7f8:	3004      	addeq	r0, #4
 800a7fa:	079a      	lsls	r2, r3, #30
 800a7fc:	bf04      	itt	eq
 800a7fe:	089b      	lsreq	r3, r3, #2
 800a800:	3002      	addeq	r0, #2
 800a802:	07da      	lsls	r2, r3, #31
 800a804:	d403      	bmi.n	800a80e <__lo0bits+0x4e>
 800a806:	085b      	lsrs	r3, r3, #1
 800a808:	f100 0001 	add.w	r0, r0, #1
 800a80c:	d005      	beq.n	800a81a <__lo0bits+0x5a>
 800a80e:	600b      	str	r3, [r1, #0]
 800a810:	4770      	bx	lr
 800a812:	4610      	mov	r0, r2
 800a814:	e7e9      	b.n	800a7ea <__lo0bits+0x2a>
 800a816:	2000      	movs	r0, #0
 800a818:	4770      	bx	lr
 800a81a:	2020      	movs	r0, #32
 800a81c:	4770      	bx	lr
	...

0800a820 <__i2b>:
 800a820:	b510      	push	{r4, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	2101      	movs	r1, #1
 800a826:	f7ff ff03 	bl	800a630 <_Balloc>
 800a82a:	4602      	mov	r2, r0
 800a82c:	b928      	cbnz	r0, 800a83a <__i2b+0x1a>
 800a82e:	4b05      	ldr	r3, [pc, #20]	; (800a844 <__i2b+0x24>)
 800a830:	4805      	ldr	r0, [pc, #20]	; (800a848 <__i2b+0x28>)
 800a832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a836:	f000 fce1 	bl	800b1fc <__assert_func>
 800a83a:	2301      	movs	r3, #1
 800a83c:	6144      	str	r4, [r0, #20]
 800a83e:	6103      	str	r3, [r0, #16]
 800a840:	bd10      	pop	{r4, pc}
 800a842:	bf00      	nop
 800a844:	0800c3d3 	.word	0x0800c3d3
 800a848:	0800c3e4 	.word	0x0800c3e4

0800a84c <__multiply>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	4691      	mov	r9, r2
 800a852:	690a      	ldr	r2, [r1, #16]
 800a854:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a858:	429a      	cmp	r2, r3
 800a85a:	bfb8      	it	lt
 800a85c:	460b      	movlt	r3, r1
 800a85e:	460c      	mov	r4, r1
 800a860:	bfbc      	itt	lt
 800a862:	464c      	movlt	r4, r9
 800a864:	4699      	movlt	r9, r3
 800a866:	6927      	ldr	r7, [r4, #16]
 800a868:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	6861      	ldr	r1, [r4, #4]
 800a870:	eb07 060a 	add.w	r6, r7, sl
 800a874:	42b3      	cmp	r3, r6
 800a876:	b085      	sub	sp, #20
 800a878:	bfb8      	it	lt
 800a87a:	3101      	addlt	r1, #1
 800a87c:	f7ff fed8 	bl	800a630 <_Balloc>
 800a880:	b930      	cbnz	r0, 800a890 <__multiply+0x44>
 800a882:	4602      	mov	r2, r0
 800a884:	4b44      	ldr	r3, [pc, #272]	; (800a998 <__multiply+0x14c>)
 800a886:	4845      	ldr	r0, [pc, #276]	; (800a99c <__multiply+0x150>)
 800a888:	f240 115d 	movw	r1, #349	; 0x15d
 800a88c:	f000 fcb6 	bl	800b1fc <__assert_func>
 800a890:	f100 0514 	add.w	r5, r0, #20
 800a894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a898:	462b      	mov	r3, r5
 800a89a:	2200      	movs	r2, #0
 800a89c:	4543      	cmp	r3, r8
 800a89e:	d321      	bcc.n	800a8e4 <__multiply+0x98>
 800a8a0:	f104 0314 	add.w	r3, r4, #20
 800a8a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8a8:	f109 0314 	add.w	r3, r9, #20
 800a8ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8b0:	9202      	str	r2, [sp, #8]
 800a8b2:	1b3a      	subs	r2, r7, r4
 800a8b4:	3a15      	subs	r2, #21
 800a8b6:	f022 0203 	bic.w	r2, r2, #3
 800a8ba:	3204      	adds	r2, #4
 800a8bc:	f104 0115 	add.w	r1, r4, #21
 800a8c0:	428f      	cmp	r7, r1
 800a8c2:	bf38      	it	cc
 800a8c4:	2204      	movcc	r2, #4
 800a8c6:	9201      	str	r2, [sp, #4]
 800a8c8:	9a02      	ldr	r2, [sp, #8]
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d80c      	bhi.n	800a8ea <__multiply+0x9e>
 800a8d0:	2e00      	cmp	r6, #0
 800a8d2:	dd03      	ble.n	800a8dc <__multiply+0x90>
 800a8d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d05a      	beq.n	800a992 <__multiply+0x146>
 800a8dc:	6106      	str	r6, [r0, #16]
 800a8de:	b005      	add	sp, #20
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	f843 2b04 	str.w	r2, [r3], #4
 800a8e8:	e7d8      	b.n	800a89c <__multiply+0x50>
 800a8ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8ee:	f1ba 0f00 	cmp.w	sl, #0
 800a8f2:	d024      	beq.n	800a93e <__multiply+0xf2>
 800a8f4:	f104 0e14 	add.w	lr, r4, #20
 800a8f8:	46a9      	mov	r9, r5
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a902:	f8d9 1000 	ldr.w	r1, [r9]
 800a906:	fa1f fb82 	uxth.w	fp, r2
 800a90a:	b289      	uxth	r1, r1
 800a90c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a910:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a914:	f8d9 2000 	ldr.w	r2, [r9]
 800a918:	4461      	add	r1, ip
 800a91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a91e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a926:	b289      	uxth	r1, r1
 800a928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a92c:	4577      	cmp	r7, lr
 800a92e:	f849 1b04 	str.w	r1, [r9], #4
 800a932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a936:	d8e2      	bhi.n	800a8fe <__multiply+0xb2>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	f845 c002 	str.w	ip, [r5, r2]
 800a93e:	9a03      	ldr	r2, [sp, #12]
 800a940:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a944:	3304      	adds	r3, #4
 800a946:	f1b9 0f00 	cmp.w	r9, #0
 800a94a:	d020      	beq.n	800a98e <__multiply+0x142>
 800a94c:	6829      	ldr	r1, [r5, #0]
 800a94e:	f104 0c14 	add.w	ip, r4, #20
 800a952:	46ae      	mov	lr, r5
 800a954:	f04f 0a00 	mov.w	sl, #0
 800a958:	f8bc b000 	ldrh.w	fp, [ip]
 800a95c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a960:	fb09 220b 	mla	r2, r9, fp, r2
 800a964:	4492      	add	sl, r2
 800a966:	b289      	uxth	r1, r1
 800a968:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a96c:	f84e 1b04 	str.w	r1, [lr], #4
 800a970:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a974:	f8be 1000 	ldrh.w	r1, [lr]
 800a978:	0c12      	lsrs	r2, r2, #16
 800a97a:	fb09 1102 	mla	r1, r9, r2, r1
 800a97e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a982:	4567      	cmp	r7, ip
 800a984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a988:	d8e6      	bhi.n	800a958 <__multiply+0x10c>
 800a98a:	9a01      	ldr	r2, [sp, #4]
 800a98c:	50a9      	str	r1, [r5, r2]
 800a98e:	3504      	adds	r5, #4
 800a990:	e79a      	b.n	800a8c8 <__multiply+0x7c>
 800a992:	3e01      	subs	r6, #1
 800a994:	e79c      	b.n	800a8d0 <__multiply+0x84>
 800a996:	bf00      	nop
 800a998:	0800c3d3 	.word	0x0800c3d3
 800a99c:	0800c3e4 	.word	0x0800c3e4

0800a9a0 <__pow5mult>:
 800a9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	4615      	mov	r5, r2
 800a9a6:	f012 0203 	ands.w	r2, r2, #3
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	d007      	beq.n	800a9c0 <__pow5mult+0x20>
 800a9b0:	4c25      	ldr	r4, [pc, #148]	; (800aa48 <__pow5mult+0xa8>)
 800a9b2:	3a01      	subs	r2, #1
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9ba:	f7ff fe9b 	bl	800a6f4 <__multadd>
 800a9be:	4607      	mov	r7, r0
 800a9c0:	10ad      	asrs	r5, r5, #2
 800a9c2:	d03d      	beq.n	800aa40 <__pow5mult+0xa0>
 800a9c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9c6:	b97c      	cbnz	r4, 800a9e8 <__pow5mult+0x48>
 800a9c8:	2010      	movs	r0, #16
 800a9ca:	f7ff fe1b 	bl	800a604 <malloc>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800a9d2:	b928      	cbnz	r0, 800a9e0 <__pow5mult+0x40>
 800a9d4:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <__pow5mult+0xac>)
 800a9d6:	481e      	ldr	r0, [pc, #120]	; (800aa50 <__pow5mult+0xb0>)
 800a9d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9dc:	f000 fc0e 	bl	800b1fc <__assert_func>
 800a9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	60c4      	str	r4, [r0, #12]
 800a9e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9f0:	b94c      	cbnz	r4, 800aa06 <__pow5mult+0x66>
 800a9f2:	f240 2171 	movw	r1, #625	; 0x271
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7ff ff12 	bl	800a820 <__i2b>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa02:	4604      	mov	r4, r0
 800aa04:	6003      	str	r3, [r0, #0]
 800aa06:	f04f 0900 	mov.w	r9, #0
 800aa0a:	07eb      	lsls	r3, r5, #31
 800aa0c:	d50a      	bpl.n	800aa24 <__pow5mult+0x84>
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4622      	mov	r2, r4
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff ff1a 	bl	800a84c <__multiply>
 800aa18:	4639      	mov	r1, r7
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f7ff fe47 	bl	800a6b0 <_Bfree>
 800aa22:	4647      	mov	r7, r8
 800aa24:	106d      	asrs	r5, r5, #1
 800aa26:	d00b      	beq.n	800aa40 <__pow5mult+0xa0>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	b938      	cbnz	r0, 800aa3c <__pow5mult+0x9c>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7ff ff0b 	bl	800a84c <__multiply>
 800aa36:	6020      	str	r0, [r4, #0]
 800aa38:	f8c0 9000 	str.w	r9, [r0]
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	e7e4      	b.n	800aa0a <__pow5mult+0x6a>
 800aa40:	4638      	mov	r0, r7
 800aa42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa46:	bf00      	nop
 800aa48:	0800c530 	.word	0x0800c530
 800aa4c:	0800c361 	.word	0x0800c361
 800aa50:	0800c3e4 	.word	0x0800c3e4

0800aa54 <__lshift>:
 800aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	460c      	mov	r4, r1
 800aa5a:	6849      	ldr	r1, [r1, #4]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	4607      	mov	r7, r0
 800aa66:	4691      	mov	r9, r2
 800aa68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa6c:	f108 0601 	add.w	r6, r8, #1
 800aa70:	42b3      	cmp	r3, r6
 800aa72:	db0b      	blt.n	800aa8c <__lshift+0x38>
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff fddb 	bl	800a630 <_Balloc>
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	b948      	cbnz	r0, 800aa92 <__lshift+0x3e>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <__lshift+0xd8>)
 800aa82:	482b      	ldr	r0, [pc, #172]	; (800ab30 <__lshift+0xdc>)
 800aa84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa88:	f000 fbb8 	bl	800b1fc <__assert_func>
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	e7ee      	b.n	800aa70 <__lshift+0x1c>
 800aa92:	2300      	movs	r3, #0
 800aa94:	f100 0114 	add.w	r1, r0, #20
 800aa98:	f100 0210 	add.w	r2, r0, #16
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	4553      	cmp	r3, sl
 800aaa0:	db37      	blt.n	800ab12 <__lshift+0xbe>
 800aaa2:	6920      	ldr	r0, [r4, #16]
 800aaa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaa8:	f104 0314 	add.w	r3, r4, #20
 800aaac:	f019 091f 	ands.w	r9, r9, #31
 800aab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aab8:	d02f      	beq.n	800ab1a <__lshift+0xc6>
 800aaba:	f1c9 0e20 	rsb	lr, r9, #32
 800aabe:	468a      	mov	sl, r1
 800aac0:	f04f 0c00 	mov.w	ip, #0
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	fa02 f209 	lsl.w	r2, r2, r9
 800aaca:	ea42 020c 	orr.w	r2, r2, ip
 800aace:	f84a 2b04 	str.w	r2, [sl], #4
 800aad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad6:	4298      	cmp	r0, r3
 800aad8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aadc:	d8f2      	bhi.n	800aac4 <__lshift+0x70>
 800aade:	1b03      	subs	r3, r0, r4
 800aae0:	3b15      	subs	r3, #21
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	3304      	adds	r3, #4
 800aae8:	f104 0215 	add.w	r2, r4, #21
 800aaec:	4290      	cmp	r0, r2
 800aaee:	bf38      	it	cc
 800aaf0:	2304      	movcc	r3, #4
 800aaf2:	f841 c003 	str.w	ip, [r1, r3]
 800aaf6:	f1bc 0f00 	cmp.w	ip, #0
 800aafa:	d001      	beq.n	800ab00 <__lshift+0xac>
 800aafc:	f108 0602 	add.w	r6, r8, #2
 800ab00:	3e01      	subs	r6, #1
 800ab02:	4638      	mov	r0, r7
 800ab04:	612e      	str	r6, [r5, #16]
 800ab06:	4621      	mov	r1, r4
 800ab08:	f7ff fdd2 	bl	800a6b0 <_Bfree>
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab12:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab16:	3301      	adds	r3, #1
 800ab18:	e7c1      	b.n	800aa9e <__lshift+0x4a>
 800ab1a:	3904      	subs	r1, #4
 800ab1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab20:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab24:	4298      	cmp	r0, r3
 800ab26:	d8f9      	bhi.n	800ab1c <__lshift+0xc8>
 800ab28:	e7ea      	b.n	800ab00 <__lshift+0xac>
 800ab2a:	bf00      	nop
 800ab2c:	0800c3d3 	.word	0x0800c3d3
 800ab30:	0800c3e4 	.word	0x0800c3e4

0800ab34 <__mcmp>:
 800ab34:	b530      	push	{r4, r5, lr}
 800ab36:	6902      	ldr	r2, [r0, #16]
 800ab38:	690c      	ldr	r4, [r1, #16]
 800ab3a:	1b12      	subs	r2, r2, r4
 800ab3c:	d10e      	bne.n	800ab5c <__mcmp+0x28>
 800ab3e:	f100 0314 	add.w	r3, r0, #20
 800ab42:	3114      	adds	r1, #20
 800ab44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab54:	42a5      	cmp	r5, r4
 800ab56:	d003      	beq.n	800ab60 <__mcmp+0x2c>
 800ab58:	d305      	bcc.n	800ab66 <__mcmp+0x32>
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	4283      	cmp	r3, r0
 800ab62:	d3f3      	bcc.n	800ab4c <__mcmp+0x18>
 800ab64:	e7fa      	b.n	800ab5c <__mcmp+0x28>
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6a:	e7f7      	b.n	800ab5c <__mcmp+0x28>

0800ab6c <__mdiff>:
 800ab6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	460c      	mov	r4, r1
 800ab72:	4606      	mov	r6, r0
 800ab74:	4611      	mov	r1, r2
 800ab76:	4620      	mov	r0, r4
 800ab78:	4690      	mov	r8, r2
 800ab7a:	f7ff ffdb 	bl	800ab34 <__mcmp>
 800ab7e:	1e05      	subs	r5, r0, #0
 800ab80:	d110      	bne.n	800aba4 <__mdiff+0x38>
 800ab82:	4629      	mov	r1, r5
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff fd53 	bl	800a630 <_Balloc>
 800ab8a:	b930      	cbnz	r0, 800ab9a <__mdiff+0x2e>
 800ab8c:	4b3a      	ldr	r3, [pc, #232]	; (800ac78 <__mdiff+0x10c>)
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f240 2132 	movw	r1, #562	; 0x232
 800ab94:	4839      	ldr	r0, [pc, #228]	; (800ac7c <__mdiff+0x110>)
 800ab96:	f000 fb31 	bl	800b1fc <__assert_func>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	bfa4      	itt	ge
 800aba6:	4643      	movge	r3, r8
 800aba8:	46a0      	movge	r8, r4
 800abaa:	4630      	mov	r0, r6
 800abac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abb0:	bfa6      	itte	ge
 800abb2:	461c      	movge	r4, r3
 800abb4:	2500      	movge	r5, #0
 800abb6:	2501      	movlt	r5, #1
 800abb8:	f7ff fd3a 	bl	800a630 <_Balloc>
 800abbc:	b920      	cbnz	r0, 800abc8 <__mdiff+0x5c>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__mdiff+0x10c>)
 800abc0:	4602      	mov	r2, r0
 800abc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abc6:	e7e5      	b.n	800ab94 <__mdiff+0x28>
 800abc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abcc:	6926      	ldr	r6, [r4, #16]
 800abce:	60c5      	str	r5, [r0, #12]
 800abd0:	f104 0914 	add.w	r9, r4, #20
 800abd4:	f108 0514 	add.w	r5, r8, #20
 800abd8:	f100 0e14 	add.w	lr, r0, #20
 800abdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abe4:	f108 0210 	add.w	r2, r8, #16
 800abe8:	46f2      	mov	sl, lr
 800abea:	2100      	movs	r1, #0
 800abec:	f859 3b04 	ldr.w	r3, [r9], #4
 800abf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abf4:	fa1f f883 	uxth.w	r8, r3
 800abf8:	fa11 f18b 	uxtah	r1, r1, fp
 800abfc:	0c1b      	lsrs	r3, r3, #16
 800abfe:	eba1 0808 	sub.w	r8, r1, r8
 800ac02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac0a:	fa1f f888 	uxth.w	r8, r8
 800ac0e:	1419      	asrs	r1, r3, #16
 800ac10:	454e      	cmp	r6, r9
 800ac12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac16:	f84a 3b04 	str.w	r3, [sl], #4
 800ac1a:	d8e7      	bhi.n	800abec <__mdiff+0x80>
 800ac1c:	1b33      	subs	r3, r6, r4
 800ac1e:	3b15      	subs	r3, #21
 800ac20:	f023 0303 	bic.w	r3, r3, #3
 800ac24:	3304      	adds	r3, #4
 800ac26:	3415      	adds	r4, #21
 800ac28:	42a6      	cmp	r6, r4
 800ac2a:	bf38      	it	cc
 800ac2c:	2304      	movcc	r3, #4
 800ac2e:	441d      	add	r5, r3
 800ac30:	4473      	add	r3, lr
 800ac32:	469e      	mov	lr, r3
 800ac34:	462e      	mov	r6, r5
 800ac36:	4566      	cmp	r6, ip
 800ac38:	d30e      	bcc.n	800ac58 <__mdiff+0xec>
 800ac3a:	f10c 0203 	add.w	r2, ip, #3
 800ac3e:	1b52      	subs	r2, r2, r5
 800ac40:	f022 0203 	bic.w	r2, r2, #3
 800ac44:	3d03      	subs	r5, #3
 800ac46:	45ac      	cmp	ip, r5
 800ac48:	bf38      	it	cc
 800ac4a:	2200      	movcc	r2, #0
 800ac4c:	441a      	add	r2, r3
 800ac4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac52:	b17b      	cbz	r3, 800ac74 <__mdiff+0x108>
 800ac54:	6107      	str	r7, [r0, #16]
 800ac56:	e7a3      	b.n	800aba0 <__mdiff+0x34>
 800ac58:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac5c:	fa11 f288 	uxtah	r2, r1, r8
 800ac60:	1414      	asrs	r4, r2, #16
 800ac62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac66:	b292      	uxth	r2, r2
 800ac68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac6c:	f84e 2b04 	str.w	r2, [lr], #4
 800ac70:	1421      	asrs	r1, r4, #16
 800ac72:	e7e0      	b.n	800ac36 <__mdiff+0xca>
 800ac74:	3f01      	subs	r7, #1
 800ac76:	e7ea      	b.n	800ac4e <__mdiff+0xe2>
 800ac78:	0800c3d3 	.word	0x0800c3d3
 800ac7c:	0800c3e4 	.word	0x0800c3e4

0800ac80 <__d2b>:
 800ac80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac84:	4689      	mov	r9, r1
 800ac86:	2101      	movs	r1, #1
 800ac88:	ec57 6b10 	vmov	r6, r7, d0
 800ac8c:	4690      	mov	r8, r2
 800ac8e:	f7ff fccf 	bl	800a630 <_Balloc>
 800ac92:	4604      	mov	r4, r0
 800ac94:	b930      	cbnz	r0, 800aca4 <__d2b+0x24>
 800ac96:	4602      	mov	r2, r0
 800ac98:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <__d2b+0xb0>)
 800ac9a:	4826      	ldr	r0, [pc, #152]	; (800ad34 <__d2b+0xb4>)
 800ac9c:	f240 310a 	movw	r1, #778	; 0x30a
 800aca0:	f000 faac 	bl	800b1fc <__assert_func>
 800aca4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acac:	bb35      	cbnz	r5, 800acfc <__d2b+0x7c>
 800acae:	2e00      	cmp	r6, #0
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	d028      	beq.n	800ad06 <__d2b+0x86>
 800acb4:	4668      	mov	r0, sp
 800acb6:	9600      	str	r6, [sp, #0]
 800acb8:	f7ff fd82 	bl	800a7c0 <__lo0bits>
 800acbc:	9900      	ldr	r1, [sp, #0]
 800acbe:	b300      	cbz	r0, 800ad02 <__d2b+0x82>
 800acc0:	9a01      	ldr	r2, [sp, #4]
 800acc2:	f1c0 0320 	rsb	r3, r0, #32
 800acc6:	fa02 f303 	lsl.w	r3, r2, r3
 800acca:	430b      	orrs	r3, r1
 800accc:	40c2      	lsrs	r2, r0
 800acce:	6163      	str	r3, [r4, #20]
 800acd0:	9201      	str	r2, [sp, #4]
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	61a3      	str	r3, [r4, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bf14      	ite	ne
 800acda:	2202      	movne	r2, #2
 800acdc:	2201      	moveq	r2, #1
 800acde:	6122      	str	r2, [r4, #16]
 800ace0:	b1d5      	cbz	r5, 800ad18 <__d2b+0x98>
 800ace2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ace6:	4405      	add	r5, r0
 800ace8:	f8c9 5000 	str.w	r5, [r9]
 800acec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acf0:	f8c8 0000 	str.w	r0, [r8]
 800acf4:	4620      	mov	r0, r4
 800acf6:	b003      	add	sp, #12
 800acf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad00:	e7d5      	b.n	800acae <__d2b+0x2e>
 800ad02:	6161      	str	r1, [r4, #20]
 800ad04:	e7e5      	b.n	800acd2 <__d2b+0x52>
 800ad06:	a801      	add	r0, sp, #4
 800ad08:	f7ff fd5a 	bl	800a7c0 <__lo0bits>
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	6163      	str	r3, [r4, #20]
 800ad10:	2201      	movs	r2, #1
 800ad12:	6122      	str	r2, [r4, #16]
 800ad14:	3020      	adds	r0, #32
 800ad16:	e7e3      	b.n	800ace0 <__d2b+0x60>
 800ad18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad20:	f8c9 0000 	str.w	r0, [r9]
 800ad24:	6918      	ldr	r0, [r3, #16]
 800ad26:	f7ff fd2b 	bl	800a780 <__hi0bits>
 800ad2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad2e:	e7df      	b.n	800acf0 <__d2b+0x70>
 800ad30:	0800c3d3 	.word	0x0800c3d3
 800ad34:	0800c3e4 	.word	0x0800c3e4

0800ad38 <_calloc_r>:
 800ad38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad3a:	fba1 2402 	umull	r2, r4, r1, r2
 800ad3e:	b94c      	cbnz	r4, 800ad54 <_calloc_r+0x1c>
 800ad40:	4611      	mov	r1, r2
 800ad42:	9201      	str	r2, [sp, #4]
 800ad44:	f000 f87a 	bl	800ae3c <_malloc_r>
 800ad48:	9a01      	ldr	r2, [sp, #4]
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	b930      	cbnz	r0, 800ad5c <_calloc_r+0x24>
 800ad4e:	4628      	mov	r0, r5
 800ad50:	b003      	add	sp, #12
 800ad52:	bd30      	pop	{r4, r5, pc}
 800ad54:	220c      	movs	r2, #12
 800ad56:	6002      	str	r2, [r0, #0]
 800ad58:	2500      	movs	r5, #0
 800ad5a:	e7f8      	b.n	800ad4e <_calloc_r+0x16>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	f7fe f941 	bl	8008fe4 <memset>
 800ad62:	e7f4      	b.n	800ad4e <_calloc_r+0x16>

0800ad64 <_free_r>:
 800ad64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad66:	2900      	cmp	r1, #0
 800ad68:	d044      	beq.n	800adf4 <_free_r+0x90>
 800ad6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6e:	9001      	str	r0, [sp, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f1a1 0404 	sub.w	r4, r1, #4
 800ad76:	bfb8      	it	lt
 800ad78:	18e4      	addlt	r4, r4, r3
 800ad7a:	f000 fa9b 	bl	800b2b4 <__malloc_lock>
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	; (800adf8 <_free_r+0x94>)
 800ad80:	9801      	ldr	r0, [sp, #4]
 800ad82:	6813      	ldr	r3, [r2, #0]
 800ad84:	b933      	cbnz	r3, 800ad94 <_free_r+0x30>
 800ad86:	6063      	str	r3, [r4, #4]
 800ad88:	6014      	str	r4, [r2, #0]
 800ad8a:	b003      	add	sp, #12
 800ad8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad90:	f000 ba96 	b.w	800b2c0 <__malloc_unlock>
 800ad94:	42a3      	cmp	r3, r4
 800ad96:	d908      	bls.n	800adaa <_free_r+0x46>
 800ad98:	6825      	ldr	r5, [r4, #0]
 800ad9a:	1961      	adds	r1, r4, r5
 800ad9c:	428b      	cmp	r3, r1
 800ad9e:	bf01      	itttt	eq
 800ada0:	6819      	ldreq	r1, [r3, #0]
 800ada2:	685b      	ldreq	r3, [r3, #4]
 800ada4:	1949      	addeq	r1, r1, r5
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	e7ed      	b.n	800ad86 <_free_r+0x22>
 800adaa:	461a      	mov	r2, r3
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	b10b      	cbz	r3, 800adb4 <_free_r+0x50>
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	d9fa      	bls.n	800adaa <_free_r+0x46>
 800adb4:	6811      	ldr	r1, [r2, #0]
 800adb6:	1855      	adds	r5, r2, r1
 800adb8:	42a5      	cmp	r5, r4
 800adba:	d10b      	bne.n	800add4 <_free_r+0x70>
 800adbc:	6824      	ldr	r4, [r4, #0]
 800adbe:	4421      	add	r1, r4
 800adc0:	1854      	adds	r4, r2, r1
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	6011      	str	r1, [r2, #0]
 800adc6:	d1e0      	bne.n	800ad8a <_free_r+0x26>
 800adc8:	681c      	ldr	r4, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	6053      	str	r3, [r2, #4]
 800adce:	4421      	add	r1, r4
 800add0:	6011      	str	r1, [r2, #0]
 800add2:	e7da      	b.n	800ad8a <_free_r+0x26>
 800add4:	d902      	bls.n	800addc <_free_r+0x78>
 800add6:	230c      	movs	r3, #12
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	e7d6      	b.n	800ad8a <_free_r+0x26>
 800addc:	6825      	ldr	r5, [r4, #0]
 800adde:	1961      	adds	r1, r4, r5
 800ade0:	428b      	cmp	r3, r1
 800ade2:	bf04      	itt	eq
 800ade4:	6819      	ldreq	r1, [r3, #0]
 800ade6:	685b      	ldreq	r3, [r3, #4]
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	bf04      	itt	eq
 800adec:	1949      	addeq	r1, r1, r5
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	6054      	str	r4, [r2, #4]
 800adf2:	e7ca      	b.n	800ad8a <_free_r+0x26>
 800adf4:	b003      	add	sp, #12
 800adf6:	bd30      	pop	{r4, r5, pc}
 800adf8:	20000514 	.word	0x20000514

0800adfc <sbrk_aligned>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4e0e      	ldr	r6, [pc, #56]	; (800ae38 <sbrk_aligned+0x3c>)
 800ae00:	460c      	mov	r4, r1
 800ae02:	6831      	ldr	r1, [r6, #0]
 800ae04:	4605      	mov	r5, r0
 800ae06:	b911      	cbnz	r1, 800ae0e <sbrk_aligned+0x12>
 800ae08:	f000 f9e8 	bl	800b1dc <_sbrk_r>
 800ae0c:	6030      	str	r0, [r6, #0]
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4628      	mov	r0, r5
 800ae12:	f000 f9e3 	bl	800b1dc <_sbrk_r>
 800ae16:	1c43      	adds	r3, r0, #1
 800ae18:	d00a      	beq.n	800ae30 <sbrk_aligned+0x34>
 800ae1a:	1cc4      	adds	r4, r0, #3
 800ae1c:	f024 0403 	bic.w	r4, r4, #3
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d007      	beq.n	800ae34 <sbrk_aligned+0x38>
 800ae24:	1a21      	subs	r1, r4, r0
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 f9d8 	bl	800b1dc <_sbrk_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d101      	bne.n	800ae34 <sbrk_aligned+0x38>
 800ae30:	f04f 34ff 	mov.w	r4, #4294967295
 800ae34:	4620      	mov	r0, r4
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	20000518 	.word	0x20000518

0800ae3c <_malloc_r>:
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	1ccd      	adds	r5, r1, #3
 800ae42:	f025 0503 	bic.w	r5, r5, #3
 800ae46:	3508      	adds	r5, #8
 800ae48:	2d0c      	cmp	r5, #12
 800ae4a:	bf38      	it	cc
 800ae4c:	250c      	movcc	r5, #12
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	4607      	mov	r7, r0
 800ae52:	db01      	blt.n	800ae58 <_malloc_r+0x1c>
 800ae54:	42a9      	cmp	r1, r5
 800ae56:	d905      	bls.n	800ae64 <_malloc_r+0x28>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	2600      	movs	r6, #0
 800ae5e:	4630      	mov	r0, r6
 800ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae64:	4e2e      	ldr	r6, [pc, #184]	; (800af20 <_malloc_r+0xe4>)
 800ae66:	f000 fa25 	bl	800b2b4 <__malloc_lock>
 800ae6a:	6833      	ldr	r3, [r6, #0]
 800ae6c:	461c      	mov	r4, r3
 800ae6e:	bb34      	cbnz	r4, 800aebe <_malloc_r+0x82>
 800ae70:	4629      	mov	r1, r5
 800ae72:	4638      	mov	r0, r7
 800ae74:	f7ff ffc2 	bl	800adfc <sbrk_aligned>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	d14d      	bne.n	800af1a <_malloc_r+0xde>
 800ae7e:	6834      	ldr	r4, [r6, #0]
 800ae80:	4626      	mov	r6, r4
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	d140      	bne.n	800af08 <_malloc_r+0xcc>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	eb04 0803 	add.w	r8, r4, r3
 800ae90:	f000 f9a4 	bl	800b1dc <_sbrk_r>
 800ae94:	4580      	cmp	r8, r0
 800ae96:	d13a      	bne.n	800af0e <_malloc_r+0xd2>
 800ae98:	6821      	ldr	r1, [r4, #0]
 800ae9a:	3503      	adds	r5, #3
 800ae9c:	1a6d      	subs	r5, r5, r1
 800ae9e:	f025 0503 	bic.w	r5, r5, #3
 800aea2:	3508      	adds	r5, #8
 800aea4:	2d0c      	cmp	r5, #12
 800aea6:	bf38      	it	cc
 800aea8:	250c      	movcc	r5, #12
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ffa5 	bl	800adfc <sbrk_aligned>
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	d02b      	beq.n	800af0e <_malloc_r+0xd2>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	442b      	add	r3, r5
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	e00e      	b.n	800aedc <_malloc_r+0xa0>
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	1b52      	subs	r2, r2, r5
 800aec2:	d41e      	bmi.n	800af02 <_malloc_r+0xc6>
 800aec4:	2a0b      	cmp	r2, #11
 800aec6:	d916      	bls.n	800aef6 <_malloc_r+0xba>
 800aec8:	1961      	adds	r1, r4, r5
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	6025      	str	r5, [r4, #0]
 800aece:	bf18      	it	ne
 800aed0:	6059      	strne	r1, [r3, #4]
 800aed2:	6863      	ldr	r3, [r4, #4]
 800aed4:	bf08      	it	eq
 800aed6:	6031      	streq	r1, [r6, #0]
 800aed8:	5162      	str	r2, [r4, r5]
 800aeda:	604b      	str	r3, [r1, #4]
 800aedc:	4638      	mov	r0, r7
 800aede:	f104 060b 	add.w	r6, r4, #11
 800aee2:	f000 f9ed 	bl	800b2c0 <__malloc_unlock>
 800aee6:	f026 0607 	bic.w	r6, r6, #7
 800aeea:	1d23      	adds	r3, r4, #4
 800aeec:	1af2      	subs	r2, r6, r3
 800aeee:	d0b6      	beq.n	800ae5e <_malloc_r+0x22>
 800aef0:	1b9b      	subs	r3, r3, r6
 800aef2:	50a3      	str	r3, [r4, r2]
 800aef4:	e7b3      	b.n	800ae5e <_malloc_r+0x22>
 800aef6:	6862      	ldr	r2, [r4, #4]
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	bf0c      	ite	eq
 800aefc:	6032      	streq	r2, [r6, #0]
 800aefe:	605a      	strne	r2, [r3, #4]
 800af00:	e7ec      	b.n	800aedc <_malloc_r+0xa0>
 800af02:	4623      	mov	r3, r4
 800af04:	6864      	ldr	r4, [r4, #4]
 800af06:	e7b2      	b.n	800ae6e <_malloc_r+0x32>
 800af08:	4634      	mov	r4, r6
 800af0a:	6876      	ldr	r6, [r6, #4]
 800af0c:	e7b9      	b.n	800ae82 <_malloc_r+0x46>
 800af0e:	230c      	movs	r3, #12
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	4638      	mov	r0, r7
 800af14:	f000 f9d4 	bl	800b2c0 <__malloc_unlock>
 800af18:	e7a1      	b.n	800ae5e <_malloc_r+0x22>
 800af1a:	6025      	str	r5, [r4, #0]
 800af1c:	e7de      	b.n	800aedc <_malloc_r+0xa0>
 800af1e:	bf00      	nop
 800af20:	20000514 	.word	0x20000514

0800af24 <__ssputs_r>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	688e      	ldr	r6, [r1, #8]
 800af2a:	429e      	cmp	r6, r3
 800af2c:	4682      	mov	sl, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	4690      	mov	r8, r2
 800af32:	461f      	mov	r7, r3
 800af34:	d838      	bhi.n	800afa8 <__ssputs_r+0x84>
 800af36:	898a      	ldrh	r2, [r1, #12]
 800af38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af3c:	d032      	beq.n	800afa4 <__ssputs_r+0x80>
 800af3e:	6825      	ldr	r5, [r4, #0]
 800af40:	6909      	ldr	r1, [r1, #16]
 800af42:	eba5 0901 	sub.w	r9, r5, r1
 800af46:	6965      	ldr	r5, [r4, #20]
 800af48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af50:	3301      	adds	r3, #1
 800af52:	444b      	add	r3, r9
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	429d      	cmp	r5, r3
 800af58:	bf38      	it	cc
 800af5a:	461d      	movcc	r5, r3
 800af5c:	0553      	lsls	r3, r2, #21
 800af5e:	d531      	bpl.n	800afc4 <__ssputs_r+0xa0>
 800af60:	4629      	mov	r1, r5
 800af62:	f7ff ff6b 	bl	800ae3c <_malloc_r>
 800af66:	4606      	mov	r6, r0
 800af68:	b950      	cbnz	r0, 800af80 <__ssputs_r+0x5c>
 800af6a:	230c      	movs	r3, #12
 800af6c:	f8ca 3000 	str.w	r3, [sl]
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af80:	6921      	ldr	r1, [r4, #16]
 800af82:	464a      	mov	r2, r9
 800af84:	f7ff fb46 	bl	800a614 <memcpy>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	6126      	str	r6, [r4, #16]
 800af96:	6165      	str	r5, [r4, #20]
 800af98:	444e      	add	r6, r9
 800af9a:	eba5 0509 	sub.w	r5, r5, r9
 800af9e:	6026      	str	r6, [r4, #0]
 800afa0:	60a5      	str	r5, [r4, #8]
 800afa2:	463e      	mov	r6, r7
 800afa4:	42be      	cmp	r6, r7
 800afa6:	d900      	bls.n	800afaa <__ssputs_r+0x86>
 800afa8:	463e      	mov	r6, r7
 800afaa:	6820      	ldr	r0, [r4, #0]
 800afac:	4632      	mov	r2, r6
 800afae:	4641      	mov	r1, r8
 800afb0:	f000 f966 	bl	800b280 <memmove>
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	1b9b      	subs	r3, r3, r6
 800afb8:	60a3      	str	r3, [r4, #8]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	4433      	add	r3, r6
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	2000      	movs	r0, #0
 800afc2:	e7db      	b.n	800af7c <__ssputs_r+0x58>
 800afc4:	462a      	mov	r2, r5
 800afc6:	f000 f981 	bl	800b2cc <_realloc_r>
 800afca:	4606      	mov	r6, r0
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1e1      	bne.n	800af94 <__ssputs_r+0x70>
 800afd0:	6921      	ldr	r1, [r4, #16]
 800afd2:	4650      	mov	r0, sl
 800afd4:	f7ff fec6 	bl	800ad64 <_free_r>
 800afd8:	e7c7      	b.n	800af6a <__ssputs_r+0x46>
	...

0800afdc <_svfiprintf_r>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	4698      	mov	r8, r3
 800afe2:	898b      	ldrh	r3, [r1, #12]
 800afe4:	061b      	lsls	r3, r3, #24
 800afe6:	b09d      	sub	sp, #116	; 0x74
 800afe8:	4607      	mov	r7, r0
 800afea:	460d      	mov	r5, r1
 800afec:	4614      	mov	r4, r2
 800afee:	d50e      	bpl.n	800b00e <_svfiprintf_r+0x32>
 800aff0:	690b      	ldr	r3, [r1, #16]
 800aff2:	b963      	cbnz	r3, 800b00e <_svfiprintf_r+0x32>
 800aff4:	2140      	movs	r1, #64	; 0x40
 800aff6:	f7ff ff21 	bl	800ae3c <_malloc_r>
 800affa:	6028      	str	r0, [r5, #0]
 800affc:	6128      	str	r0, [r5, #16]
 800affe:	b920      	cbnz	r0, 800b00a <_svfiprintf_r+0x2e>
 800b000:	230c      	movs	r3, #12
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e0d1      	b.n	800b1ae <_svfiprintf_r+0x1d2>
 800b00a:	2340      	movs	r3, #64	; 0x40
 800b00c:	616b      	str	r3, [r5, #20]
 800b00e:	2300      	movs	r3, #0
 800b010:	9309      	str	r3, [sp, #36]	; 0x24
 800b012:	2320      	movs	r3, #32
 800b014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b018:	f8cd 800c 	str.w	r8, [sp, #12]
 800b01c:	2330      	movs	r3, #48	; 0x30
 800b01e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1c8 <_svfiprintf_r+0x1ec>
 800b022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b026:	f04f 0901 	mov.w	r9, #1
 800b02a:	4623      	mov	r3, r4
 800b02c:	469a      	mov	sl, r3
 800b02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b032:	b10a      	cbz	r2, 800b038 <_svfiprintf_r+0x5c>
 800b034:	2a25      	cmp	r2, #37	; 0x25
 800b036:	d1f9      	bne.n	800b02c <_svfiprintf_r+0x50>
 800b038:	ebba 0b04 	subs.w	fp, sl, r4
 800b03c:	d00b      	beq.n	800b056 <_svfiprintf_r+0x7a>
 800b03e:	465b      	mov	r3, fp
 800b040:	4622      	mov	r2, r4
 800b042:	4629      	mov	r1, r5
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff ff6d 	bl	800af24 <__ssputs_r>
 800b04a:	3001      	adds	r0, #1
 800b04c:	f000 80aa 	beq.w	800b1a4 <_svfiprintf_r+0x1c8>
 800b050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b052:	445a      	add	r2, fp
 800b054:	9209      	str	r2, [sp, #36]	; 0x24
 800b056:	f89a 3000 	ldrb.w	r3, [sl]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 80a2 	beq.w	800b1a4 <_svfiprintf_r+0x1c8>
 800b060:	2300      	movs	r3, #0
 800b062:	f04f 32ff 	mov.w	r2, #4294967295
 800b066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b06a:	f10a 0a01 	add.w	sl, sl, #1
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	9307      	str	r3, [sp, #28]
 800b072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b076:	931a      	str	r3, [sp, #104]	; 0x68
 800b078:	4654      	mov	r4, sl
 800b07a:	2205      	movs	r2, #5
 800b07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b080:	4851      	ldr	r0, [pc, #324]	; (800b1c8 <_svfiprintf_r+0x1ec>)
 800b082:	f7f5 f8b5 	bl	80001f0 <memchr>
 800b086:	9a04      	ldr	r2, [sp, #16]
 800b088:	b9d8      	cbnz	r0, 800b0c2 <_svfiprintf_r+0xe6>
 800b08a:	06d0      	lsls	r0, r2, #27
 800b08c:	bf44      	itt	mi
 800b08e:	2320      	movmi	r3, #32
 800b090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b094:	0711      	lsls	r1, r2, #28
 800b096:	bf44      	itt	mi
 800b098:	232b      	movmi	r3, #43	; 0x2b
 800b09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09e:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a4:	d015      	beq.n	800b0d2 <_svfiprintf_r+0xf6>
 800b0a6:	9a07      	ldr	r2, [sp, #28]
 800b0a8:	4654      	mov	r4, sl
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f04f 0c0a 	mov.w	ip, #10
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b6:	3b30      	subs	r3, #48	; 0x30
 800b0b8:	2b09      	cmp	r3, #9
 800b0ba:	d94e      	bls.n	800b15a <_svfiprintf_r+0x17e>
 800b0bc:	b1b0      	cbz	r0, 800b0ec <_svfiprintf_r+0x110>
 800b0be:	9207      	str	r2, [sp, #28]
 800b0c0:	e014      	b.n	800b0ec <_svfiprintf_r+0x110>
 800b0c2:	eba0 0308 	sub.w	r3, r0, r8
 800b0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	46a2      	mov	sl, r4
 800b0d0:	e7d2      	b.n	800b078 <_svfiprintf_r+0x9c>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	1d19      	adds	r1, r3, #4
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	9103      	str	r1, [sp, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfbb      	ittet	lt
 800b0de:	425b      	neglt	r3, r3
 800b0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e4:	9307      	strge	r3, [sp, #28]
 800b0e6:	9307      	strlt	r3, [sp, #28]
 800b0e8:	bfb8      	it	lt
 800b0ea:	9204      	strlt	r2, [sp, #16]
 800b0ec:	7823      	ldrb	r3, [r4, #0]
 800b0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f0:	d10c      	bne.n	800b10c <_svfiprintf_r+0x130>
 800b0f2:	7863      	ldrb	r3, [r4, #1]
 800b0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f6:	d135      	bne.n	800b164 <_svfiprintf_r+0x188>
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	1d1a      	adds	r2, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	9203      	str	r2, [sp, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfb8      	it	lt
 800b104:	f04f 33ff 	movlt.w	r3, #4294967295
 800b108:	3402      	adds	r4, #2
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1d8 <_svfiprintf_r+0x1fc>
 800b110:	7821      	ldrb	r1, [r4, #0]
 800b112:	2203      	movs	r2, #3
 800b114:	4650      	mov	r0, sl
 800b116:	f7f5 f86b 	bl	80001f0 <memchr>
 800b11a:	b140      	cbz	r0, 800b12e <_svfiprintf_r+0x152>
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	eba0 000a 	sub.w	r0, r0, sl
 800b122:	fa03 f000 	lsl.w	r0, r3, r0
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	4303      	orrs	r3, r0
 800b12a:	3401      	adds	r4, #1
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b132:	4826      	ldr	r0, [pc, #152]	; (800b1cc <_svfiprintf_r+0x1f0>)
 800b134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b138:	2206      	movs	r2, #6
 800b13a:	f7f5 f859 	bl	80001f0 <memchr>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d038      	beq.n	800b1b4 <_svfiprintf_r+0x1d8>
 800b142:	4b23      	ldr	r3, [pc, #140]	; (800b1d0 <_svfiprintf_r+0x1f4>)
 800b144:	bb1b      	cbnz	r3, 800b18e <_svfiprintf_r+0x1b2>
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	3307      	adds	r3, #7
 800b14a:	f023 0307 	bic.w	r3, r3, #7
 800b14e:	3308      	adds	r3, #8
 800b150:	9303      	str	r3, [sp, #12]
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	4433      	add	r3, r6
 800b156:	9309      	str	r3, [sp, #36]	; 0x24
 800b158:	e767      	b.n	800b02a <_svfiprintf_r+0x4e>
 800b15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b15e:	460c      	mov	r4, r1
 800b160:	2001      	movs	r0, #1
 800b162:	e7a5      	b.n	800b0b0 <_svfiprintf_r+0xd4>
 800b164:	2300      	movs	r3, #0
 800b166:	3401      	adds	r4, #1
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	4619      	mov	r1, r3
 800b16c:	f04f 0c0a 	mov.w	ip, #10
 800b170:	4620      	mov	r0, r4
 800b172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b176:	3a30      	subs	r2, #48	; 0x30
 800b178:	2a09      	cmp	r2, #9
 800b17a:	d903      	bls.n	800b184 <_svfiprintf_r+0x1a8>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0c5      	beq.n	800b10c <_svfiprintf_r+0x130>
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	e7c3      	b.n	800b10c <_svfiprintf_r+0x130>
 800b184:	fb0c 2101 	mla	r1, ip, r1, r2
 800b188:	4604      	mov	r4, r0
 800b18a:	2301      	movs	r3, #1
 800b18c:	e7f0      	b.n	800b170 <_svfiprintf_r+0x194>
 800b18e:	ab03      	add	r3, sp, #12
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	462a      	mov	r2, r5
 800b194:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <_svfiprintf_r+0x1f8>)
 800b196:	a904      	add	r1, sp, #16
 800b198:	4638      	mov	r0, r7
 800b19a:	f7fd ffcb 	bl	8009134 <_printf_float>
 800b19e:	1c42      	adds	r2, r0, #1
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	d1d6      	bne.n	800b152 <_svfiprintf_r+0x176>
 800b1a4:	89ab      	ldrh	r3, [r5, #12]
 800b1a6:	065b      	lsls	r3, r3, #25
 800b1a8:	f53f af2c 	bmi.w	800b004 <_svfiprintf_r+0x28>
 800b1ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ae:	b01d      	add	sp, #116	; 0x74
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	ab03      	add	r3, sp, #12
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <_svfiprintf_r+0x1f8>)
 800b1bc:	a904      	add	r1, sp, #16
 800b1be:	4638      	mov	r0, r7
 800b1c0:	f7fe fa5c 	bl	800967c <_printf_i>
 800b1c4:	e7eb      	b.n	800b19e <_svfiprintf_r+0x1c2>
 800b1c6:	bf00      	nop
 800b1c8:	0800c53c 	.word	0x0800c53c
 800b1cc:	0800c546 	.word	0x0800c546
 800b1d0:	08009135 	.word	0x08009135
 800b1d4:	0800af25 	.word	0x0800af25
 800b1d8:	0800c542 	.word	0x0800c542

0800b1dc <_sbrk_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d06      	ldr	r5, [pc, #24]	; (800b1f8 <_sbrk_r+0x1c>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	f7f7 fe08 	bl	8002dfc <_sbrk>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_sbrk_r+0x1a>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_sbrk_r+0x1a>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	2000051c 	.word	0x2000051c

0800b1fc <__assert_func>:
 800b1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1fe:	4614      	mov	r4, r2
 800b200:	461a      	mov	r2, r3
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <__assert_func+0x2c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4605      	mov	r5, r0
 800b208:	68d8      	ldr	r0, [r3, #12]
 800b20a:	b14c      	cbz	r4, 800b220 <__assert_func+0x24>
 800b20c:	4b07      	ldr	r3, [pc, #28]	; (800b22c <__assert_func+0x30>)
 800b20e:	9100      	str	r1, [sp, #0]
 800b210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b214:	4906      	ldr	r1, [pc, #24]	; (800b230 <__assert_func+0x34>)
 800b216:	462b      	mov	r3, r5
 800b218:	f000 f80e 	bl	800b238 <fiprintf>
 800b21c:	f000 faac 	bl	800b778 <abort>
 800b220:	4b04      	ldr	r3, [pc, #16]	; (800b234 <__assert_func+0x38>)
 800b222:	461c      	mov	r4, r3
 800b224:	e7f3      	b.n	800b20e <__assert_func+0x12>
 800b226:	bf00      	nop
 800b228:	20000014 	.word	0x20000014
 800b22c:	0800c54d 	.word	0x0800c54d
 800b230:	0800c55a 	.word	0x0800c55a
 800b234:	0800c588 	.word	0x0800c588

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	; (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f897 	bl	800b37c <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	20000014 	.word	0x20000014

0800b25c <__ascii_mbtowc>:
 800b25c:	b082      	sub	sp, #8
 800b25e:	b901      	cbnz	r1, 800b262 <__ascii_mbtowc+0x6>
 800b260:	a901      	add	r1, sp, #4
 800b262:	b142      	cbz	r2, 800b276 <__ascii_mbtowc+0x1a>
 800b264:	b14b      	cbz	r3, 800b27a <__ascii_mbtowc+0x1e>
 800b266:	7813      	ldrb	r3, [r2, #0]
 800b268:	600b      	str	r3, [r1, #0]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	1e10      	subs	r0, r2, #0
 800b26e:	bf18      	it	ne
 800b270:	2001      	movne	r0, #1
 800b272:	b002      	add	sp, #8
 800b274:	4770      	bx	lr
 800b276:	4610      	mov	r0, r2
 800b278:	e7fb      	b.n	800b272 <__ascii_mbtowc+0x16>
 800b27a:	f06f 0001 	mvn.w	r0, #1
 800b27e:	e7f8      	b.n	800b272 <__ascii_mbtowc+0x16>

0800b280 <memmove>:
 800b280:	4288      	cmp	r0, r1
 800b282:	b510      	push	{r4, lr}
 800b284:	eb01 0402 	add.w	r4, r1, r2
 800b288:	d902      	bls.n	800b290 <memmove+0x10>
 800b28a:	4284      	cmp	r4, r0
 800b28c:	4623      	mov	r3, r4
 800b28e:	d807      	bhi.n	800b2a0 <memmove+0x20>
 800b290:	1e43      	subs	r3, r0, #1
 800b292:	42a1      	cmp	r1, r4
 800b294:	d008      	beq.n	800b2a8 <memmove+0x28>
 800b296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b29e:	e7f8      	b.n	800b292 <memmove+0x12>
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	428a      	cmp	r2, r1
 800b2a6:	d100      	bne.n	800b2aa <memmove+0x2a>
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2b2:	e7f7      	b.n	800b2a4 <memmove+0x24>

0800b2b4 <__malloc_lock>:
 800b2b4:	4801      	ldr	r0, [pc, #4]	; (800b2bc <__malloc_lock+0x8>)
 800b2b6:	f000 bc1f 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800b2ba:	bf00      	nop
 800b2bc:	20000520 	.word	0x20000520

0800b2c0 <__malloc_unlock>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	; (800b2c8 <__malloc_unlock+0x8>)
 800b2c2:	f000 bc1a 	b.w	800bafa <__retarget_lock_release_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	20000520 	.word	0x20000520

0800b2cc <_realloc_r>:
 800b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	4614      	mov	r4, r2
 800b2d4:	460e      	mov	r6, r1
 800b2d6:	b921      	cbnz	r1, 800b2e2 <_realloc_r+0x16>
 800b2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	4611      	mov	r1, r2
 800b2de:	f7ff bdad 	b.w	800ae3c <_malloc_r>
 800b2e2:	b92a      	cbnz	r2, 800b2f0 <_realloc_r+0x24>
 800b2e4:	f7ff fd3e 	bl	800ad64 <_free_r>
 800b2e8:	4625      	mov	r5, r4
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f0:	f000 fc6a 	bl	800bbc8 <_malloc_usable_size_r>
 800b2f4:	4284      	cmp	r4, r0
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	d802      	bhi.n	800b300 <_realloc_r+0x34>
 800b2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2fe:	d812      	bhi.n	800b326 <_realloc_r+0x5a>
 800b300:	4621      	mov	r1, r4
 800b302:	4640      	mov	r0, r8
 800b304:	f7ff fd9a 	bl	800ae3c <_malloc_r>
 800b308:	4605      	mov	r5, r0
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0ed      	beq.n	800b2ea <_realloc_r+0x1e>
 800b30e:	42bc      	cmp	r4, r7
 800b310:	4622      	mov	r2, r4
 800b312:	4631      	mov	r1, r6
 800b314:	bf28      	it	cs
 800b316:	463a      	movcs	r2, r7
 800b318:	f7ff f97c 	bl	800a614 <memcpy>
 800b31c:	4631      	mov	r1, r6
 800b31e:	4640      	mov	r0, r8
 800b320:	f7ff fd20 	bl	800ad64 <_free_r>
 800b324:	e7e1      	b.n	800b2ea <_realloc_r+0x1e>
 800b326:	4635      	mov	r5, r6
 800b328:	e7df      	b.n	800b2ea <_realloc_r+0x1e>

0800b32a <__sfputc_r>:
 800b32a:	6893      	ldr	r3, [r2, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	b410      	push	{r4}
 800b332:	6093      	str	r3, [r2, #8]
 800b334:	da08      	bge.n	800b348 <__sfputc_r+0x1e>
 800b336:	6994      	ldr	r4, [r2, #24]
 800b338:	42a3      	cmp	r3, r4
 800b33a:	db01      	blt.n	800b340 <__sfputc_r+0x16>
 800b33c:	290a      	cmp	r1, #10
 800b33e:	d103      	bne.n	800b348 <__sfputc_r+0x1e>
 800b340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b344:	f000 b94a 	b.w	800b5dc <__swbuf_r>
 800b348:	6813      	ldr	r3, [r2, #0]
 800b34a:	1c58      	adds	r0, r3, #1
 800b34c:	6010      	str	r0, [r2, #0]
 800b34e:	7019      	strb	r1, [r3, #0]
 800b350:	4608      	mov	r0, r1
 800b352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <__sfputs_r>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	4606      	mov	r6, r0
 800b35c:	460f      	mov	r7, r1
 800b35e:	4614      	mov	r4, r2
 800b360:	18d5      	adds	r5, r2, r3
 800b362:	42ac      	cmp	r4, r5
 800b364:	d101      	bne.n	800b36a <__sfputs_r+0x12>
 800b366:	2000      	movs	r0, #0
 800b368:	e007      	b.n	800b37a <__sfputs_r+0x22>
 800b36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36e:	463a      	mov	r2, r7
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff ffda 	bl	800b32a <__sfputc_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d1f3      	bne.n	800b362 <__sfputs_r+0xa>
 800b37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b37c <_vfiprintf_r>:
 800b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	460d      	mov	r5, r1
 800b382:	b09d      	sub	sp, #116	; 0x74
 800b384:	4614      	mov	r4, r2
 800b386:	4698      	mov	r8, r3
 800b388:	4606      	mov	r6, r0
 800b38a:	b118      	cbz	r0, 800b394 <_vfiprintf_r+0x18>
 800b38c:	6983      	ldr	r3, [r0, #24]
 800b38e:	b90b      	cbnz	r3, 800b394 <_vfiprintf_r+0x18>
 800b390:	f000 fb14 	bl	800b9bc <__sinit>
 800b394:	4b89      	ldr	r3, [pc, #548]	; (800b5bc <_vfiprintf_r+0x240>)
 800b396:	429d      	cmp	r5, r3
 800b398:	d11b      	bne.n	800b3d2 <_vfiprintf_r+0x56>
 800b39a:	6875      	ldr	r5, [r6, #4]
 800b39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b39e:	07d9      	lsls	r1, r3, #31
 800b3a0:	d405      	bmi.n	800b3ae <_vfiprintf_r+0x32>
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d402      	bmi.n	800b3ae <_vfiprintf_r+0x32>
 800b3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3aa:	f000 fba5 	bl	800baf8 <__retarget_lock_acquire_recursive>
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	071b      	lsls	r3, r3, #28
 800b3b2:	d501      	bpl.n	800b3b8 <_vfiprintf_r+0x3c>
 800b3b4:	692b      	ldr	r3, [r5, #16]
 800b3b6:	b9eb      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x78>
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f000 f96e 	bl	800b69c <__swsetup_r>
 800b3c0:	b1c0      	cbz	r0, 800b3f4 <_vfiprintf_r+0x78>
 800b3c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3c4:	07dc      	lsls	r4, r3, #31
 800b3c6:	d50e      	bpl.n	800b3e6 <_vfiprintf_r+0x6a>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	b01d      	add	sp, #116	; 0x74
 800b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d2:	4b7b      	ldr	r3, [pc, #492]	; (800b5c0 <_vfiprintf_r+0x244>)
 800b3d4:	429d      	cmp	r5, r3
 800b3d6:	d101      	bne.n	800b3dc <_vfiprintf_r+0x60>
 800b3d8:	68b5      	ldr	r5, [r6, #8]
 800b3da:	e7df      	b.n	800b39c <_vfiprintf_r+0x20>
 800b3dc:	4b79      	ldr	r3, [pc, #484]	; (800b5c4 <_vfiprintf_r+0x248>)
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	bf08      	it	eq
 800b3e2:	68f5      	ldreq	r5, [r6, #12]
 800b3e4:	e7da      	b.n	800b39c <_vfiprintf_r+0x20>
 800b3e6:	89ab      	ldrh	r3, [r5, #12]
 800b3e8:	0598      	lsls	r0, r3, #22
 800b3ea:	d4ed      	bmi.n	800b3c8 <_vfiprintf_r+0x4c>
 800b3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ee:	f000 fb84 	bl	800bafa <__retarget_lock_release_recursive>
 800b3f2:	e7e9      	b.n	800b3c8 <_vfiprintf_r+0x4c>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	2320      	movs	r3, #32
 800b3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b402:	2330      	movs	r3, #48	; 0x30
 800b404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5c8 <_vfiprintf_r+0x24c>
 800b408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b40c:	f04f 0901 	mov.w	r9, #1
 800b410:	4623      	mov	r3, r4
 800b412:	469a      	mov	sl, r3
 800b414:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b418:	b10a      	cbz	r2, 800b41e <_vfiprintf_r+0xa2>
 800b41a:	2a25      	cmp	r2, #37	; 0x25
 800b41c:	d1f9      	bne.n	800b412 <_vfiprintf_r+0x96>
 800b41e:	ebba 0b04 	subs.w	fp, sl, r4
 800b422:	d00b      	beq.n	800b43c <_vfiprintf_r+0xc0>
 800b424:	465b      	mov	r3, fp
 800b426:	4622      	mov	r2, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f7ff ff94 	bl	800b358 <__sfputs_r>
 800b430:	3001      	adds	r0, #1
 800b432:	f000 80aa 	beq.w	800b58a <_vfiprintf_r+0x20e>
 800b436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b438:	445a      	add	r2, fp
 800b43a:	9209      	str	r2, [sp, #36]	; 0x24
 800b43c:	f89a 3000 	ldrb.w	r3, [sl]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 80a2 	beq.w	800b58a <_vfiprintf_r+0x20e>
 800b446:	2300      	movs	r3, #0
 800b448:	f04f 32ff 	mov.w	r2, #4294967295
 800b44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b450:	f10a 0a01 	add.w	sl, sl, #1
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	9307      	str	r3, [sp, #28]
 800b458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b45c:	931a      	str	r3, [sp, #104]	; 0x68
 800b45e:	4654      	mov	r4, sl
 800b460:	2205      	movs	r2, #5
 800b462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b466:	4858      	ldr	r0, [pc, #352]	; (800b5c8 <_vfiprintf_r+0x24c>)
 800b468:	f7f4 fec2 	bl	80001f0 <memchr>
 800b46c:	9a04      	ldr	r2, [sp, #16]
 800b46e:	b9d8      	cbnz	r0, 800b4a8 <_vfiprintf_r+0x12c>
 800b470:	06d1      	lsls	r1, r2, #27
 800b472:	bf44      	itt	mi
 800b474:	2320      	movmi	r3, #32
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b47a:	0713      	lsls	r3, r2, #28
 800b47c:	bf44      	itt	mi
 800b47e:	232b      	movmi	r3, #43	; 0x2b
 800b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b484:	f89a 3000 	ldrb.w	r3, [sl]
 800b488:	2b2a      	cmp	r3, #42	; 0x2a
 800b48a:	d015      	beq.n	800b4b8 <_vfiprintf_r+0x13c>
 800b48c:	9a07      	ldr	r2, [sp, #28]
 800b48e:	4654      	mov	r4, sl
 800b490:	2000      	movs	r0, #0
 800b492:	f04f 0c0a 	mov.w	ip, #10
 800b496:	4621      	mov	r1, r4
 800b498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b49c:	3b30      	subs	r3, #48	; 0x30
 800b49e:	2b09      	cmp	r3, #9
 800b4a0:	d94e      	bls.n	800b540 <_vfiprintf_r+0x1c4>
 800b4a2:	b1b0      	cbz	r0, 800b4d2 <_vfiprintf_r+0x156>
 800b4a4:	9207      	str	r2, [sp, #28]
 800b4a6:	e014      	b.n	800b4d2 <_vfiprintf_r+0x156>
 800b4a8:	eba0 0308 	sub.w	r3, r0, r8
 800b4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	46a2      	mov	sl, r4
 800b4b6:	e7d2      	b.n	800b45e <_vfiprintf_r+0xe2>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	1d19      	adds	r1, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9103      	str	r1, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfbb      	ittet	lt
 800b4c4:	425b      	neglt	r3, r3
 800b4c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ca:	9307      	strge	r3, [sp, #28]
 800b4cc:	9307      	strlt	r3, [sp, #28]
 800b4ce:	bfb8      	it	lt
 800b4d0:	9204      	strlt	r2, [sp, #16]
 800b4d2:	7823      	ldrb	r3, [r4, #0]
 800b4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4d6:	d10c      	bne.n	800b4f2 <_vfiprintf_r+0x176>
 800b4d8:	7863      	ldrb	r3, [r4, #1]
 800b4da:	2b2a      	cmp	r3, #42	; 0x2a
 800b4dc:	d135      	bne.n	800b54a <_vfiprintf_r+0x1ce>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	1d1a      	adds	r2, r3, #4
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	9203      	str	r2, [sp, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bfb8      	it	lt
 800b4ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ee:	3402      	adds	r4, #2
 800b4f0:	9305      	str	r3, [sp, #20]
 800b4f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5d8 <_vfiprintf_r+0x25c>
 800b4f6:	7821      	ldrb	r1, [r4, #0]
 800b4f8:	2203      	movs	r2, #3
 800b4fa:	4650      	mov	r0, sl
 800b4fc:	f7f4 fe78 	bl	80001f0 <memchr>
 800b500:	b140      	cbz	r0, 800b514 <_vfiprintf_r+0x198>
 800b502:	2340      	movs	r3, #64	; 0x40
 800b504:	eba0 000a 	sub.w	r0, r0, sl
 800b508:	fa03 f000 	lsl.w	r0, r3, r0
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	4303      	orrs	r3, r0
 800b510:	3401      	adds	r4, #1
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b518:	482c      	ldr	r0, [pc, #176]	; (800b5cc <_vfiprintf_r+0x250>)
 800b51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b51e:	2206      	movs	r2, #6
 800b520:	f7f4 fe66 	bl	80001f0 <memchr>
 800b524:	2800      	cmp	r0, #0
 800b526:	d03f      	beq.n	800b5a8 <_vfiprintf_r+0x22c>
 800b528:	4b29      	ldr	r3, [pc, #164]	; (800b5d0 <_vfiprintf_r+0x254>)
 800b52a:	bb1b      	cbnz	r3, 800b574 <_vfiprintf_r+0x1f8>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	3307      	adds	r3, #7
 800b530:	f023 0307 	bic.w	r3, r3, #7
 800b534:	3308      	adds	r3, #8
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53a:	443b      	add	r3, r7
 800b53c:	9309      	str	r3, [sp, #36]	; 0x24
 800b53e:	e767      	b.n	800b410 <_vfiprintf_r+0x94>
 800b540:	fb0c 3202 	mla	r2, ip, r2, r3
 800b544:	460c      	mov	r4, r1
 800b546:	2001      	movs	r0, #1
 800b548:	e7a5      	b.n	800b496 <_vfiprintf_r+0x11a>
 800b54a:	2300      	movs	r3, #0
 800b54c:	3401      	adds	r4, #1
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4619      	mov	r1, r3
 800b552:	f04f 0c0a 	mov.w	ip, #10
 800b556:	4620      	mov	r0, r4
 800b558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b55c:	3a30      	subs	r2, #48	; 0x30
 800b55e:	2a09      	cmp	r2, #9
 800b560:	d903      	bls.n	800b56a <_vfiprintf_r+0x1ee>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0c5      	beq.n	800b4f2 <_vfiprintf_r+0x176>
 800b566:	9105      	str	r1, [sp, #20]
 800b568:	e7c3      	b.n	800b4f2 <_vfiprintf_r+0x176>
 800b56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b56e:	4604      	mov	r4, r0
 800b570:	2301      	movs	r3, #1
 800b572:	e7f0      	b.n	800b556 <_vfiprintf_r+0x1da>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b16      	ldr	r3, [pc, #88]	; (800b5d4 <_vfiprintf_r+0x258>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4630      	mov	r0, r6
 800b580:	f7fd fdd8 	bl	8009134 <_printf_float>
 800b584:	4607      	mov	r7, r0
 800b586:	1c78      	adds	r0, r7, #1
 800b588:	d1d6      	bne.n	800b538 <_vfiprintf_r+0x1bc>
 800b58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b58c:	07d9      	lsls	r1, r3, #31
 800b58e:	d405      	bmi.n	800b59c <_vfiprintf_r+0x220>
 800b590:	89ab      	ldrh	r3, [r5, #12]
 800b592:	059a      	lsls	r2, r3, #22
 800b594:	d402      	bmi.n	800b59c <_vfiprintf_r+0x220>
 800b596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b598:	f000 faaf 	bl	800bafa <__retarget_lock_release_recursive>
 800b59c:	89ab      	ldrh	r3, [r5, #12]
 800b59e:	065b      	lsls	r3, r3, #25
 800b5a0:	f53f af12 	bmi.w	800b3c8 <_vfiprintf_r+0x4c>
 800b5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5a6:	e711      	b.n	800b3cc <_vfiprintf_r+0x50>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <_vfiprintf_r+0x258>)
 800b5b0:	a904      	add	r1, sp, #16
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7fe f862 	bl	800967c <_printf_i>
 800b5b8:	e7e4      	b.n	800b584 <_vfiprintf_r+0x208>
 800b5ba:	bf00      	nop
 800b5bc:	0800c6b4 	.word	0x0800c6b4
 800b5c0:	0800c6d4 	.word	0x0800c6d4
 800b5c4:	0800c694 	.word	0x0800c694
 800b5c8:	0800c53c 	.word	0x0800c53c
 800b5cc:	0800c546 	.word	0x0800c546
 800b5d0:	08009135 	.word	0x08009135
 800b5d4:	0800b359 	.word	0x0800b359
 800b5d8:	0800c542 	.word	0x0800c542

0800b5dc <__swbuf_r>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	460e      	mov	r6, r1
 800b5e0:	4614      	mov	r4, r2
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	b118      	cbz	r0, 800b5ee <__swbuf_r+0x12>
 800b5e6:	6983      	ldr	r3, [r0, #24]
 800b5e8:	b90b      	cbnz	r3, 800b5ee <__swbuf_r+0x12>
 800b5ea:	f000 f9e7 	bl	800b9bc <__sinit>
 800b5ee:	4b21      	ldr	r3, [pc, #132]	; (800b674 <__swbuf_r+0x98>)
 800b5f0:	429c      	cmp	r4, r3
 800b5f2:	d12b      	bne.n	800b64c <__swbuf_r+0x70>
 800b5f4:	686c      	ldr	r4, [r5, #4]
 800b5f6:	69a3      	ldr	r3, [r4, #24]
 800b5f8:	60a3      	str	r3, [r4, #8]
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	071a      	lsls	r2, r3, #28
 800b5fe:	d52f      	bpl.n	800b660 <__swbuf_r+0x84>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	b36b      	cbz	r3, 800b660 <__swbuf_r+0x84>
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	6820      	ldr	r0, [r4, #0]
 800b608:	1ac0      	subs	r0, r0, r3
 800b60a:	6963      	ldr	r3, [r4, #20]
 800b60c:	b2f6      	uxtb	r6, r6
 800b60e:	4283      	cmp	r3, r0
 800b610:	4637      	mov	r7, r6
 800b612:	dc04      	bgt.n	800b61e <__swbuf_r+0x42>
 800b614:	4621      	mov	r1, r4
 800b616:	4628      	mov	r0, r5
 800b618:	f000 f93c 	bl	800b894 <_fflush_r>
 800b61c:	bb30      	cbnz	r0, 800b66c <__swbuf_r+0x90>
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	3b01      	subs	r3, #1
 800b622:	60a3      	str	r3, [r4, #8]
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	6022      	str	r2, [r4, #0]
 800b62a:	701e      	strb	r6, [r3, #0]
 800b62c:	6963      	ldr	r3, [r4, #20]
 800b62e:	3001      	adds	r0, #1
 800b630:	4283      	cmp	r3, r0
 800b632:	d004      	beq.n	800b63e <__swbuf_r+0x62>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	07db      	lsls	r3, r3, #31
 800b638:	d506      	bpl.n	800b648 <__swbuf_r+0x6c>
 800b63a:	2e0a      	cmp	r6, #10
 800b63c:	d104      	bne.n	800b648 <__swbuf_r+0x6c>
 800b63e:	4621      	mov	r1, r4
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f927 	bl	800b894 <_fflush_r>
 800b646:	b988      	cbnz	r0, 800b66c <__swbuf_r+0x90>
 800b648:	4638      	mov	r0, r7
 800b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <__swbuf_r+0x9c>)
 800b64e:	429c      	cmp	r4, r3
 800b650:	d101      	bne.n	800b656 <__swbuf_r+0x7a>
 800b652:	68ac      	ldr	r4, [r5, #8]
 800b654:	e7cf      	b.n	800b5f6 <__swbuf_r+0x1a>
 800b656:	4b09      	ldr	r3, [pc, #36]	; (800b67c <__swbuf_r+0xa0>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	bf08      	it	eq
 800b65c:	68ec      	ldreq	r4, [r5, #12]
 800b65e:	e7ca      	b.n	800b5f6 <__swbuf_r+0x1a>
 800b660:	4621      	mov	r1, r4
 800b662:	4628      	mov	r0, r5
 800b664:	f000 f81a 	bl	800b69c <__swsetup_r>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d0cb      	beq.n	800b604 <__swbuf_r+0x28>
 800b66c:	f04f 37ff 	mov.w	r7, #4294967295
 800b670:	e7ea      	b.n	800b648 <__swbuf_r+0x6c>
 800b672:	bf00      	nop
 800b674:	0800c6b4 	.word	0x0800c6b4
 800b678:	0800c6d4 	.word	0x0800c6d4
 800b67c:	0800c694 	.word	0x0800c694

0800b680 <__ascii_wctomb>:
 800b680:	b149      	cbz	r1, 800b696 <__ascii_wctomb+0x16>
 800b682:	2aff      	cmp	r2, #255	; 0xff
 800b684:	bf85      	ittet	hi
 800b686:	238a      	movhi	r3, #138	; 0x8a
 800b688:	6003      	strhi	r3, [r0, #0]
 800b68a:	700a      	strbls	r2, [r1, #0]
 800b68c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b690:	bf98      	it	ls
 800b692:	2001      	movls	r0, #1
 800b694:	4770      	bx	lr
 800b696:	4608      	mov	r0, r1
 800b698:	4770      	bx	lr
	...

0800b69c <__swsetup_r>:
 800b69c:	4b32      	ldr	r3, [pc, #200]	; (800b768 <__swsetup_r+0xcc>)
 800b69e:	b570      	push	{r4, r5, r6, lr}
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	b125      	cbz	r5, 800b6b2 <__swsetup_r+0x16>
 800b6a8:	69ab      	ldr	r3, [r5, #24]
 800b6aa:	b913      	cbnz	r3, 800b6b2 <__swsetup_r+0x16>
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f000 f985 	bl	800b9bc <__sinit>
 800b6b2:	4b2e      	ldr	r3, [pc, #184]	; (800b76c <__swsetup_r+0xd0>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	d10f      	bne.n	800b6d8 <__swsetup_r+0x3c>
 800b6b8:	686c      	ldr	r4, [r5, #4]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c0:	0719      	lsls	r1, r3, #28
 800b6c2:	d42c      	bmi.n	800b71e <__swsetup_r+0x82>
 800b6c4:	06dd      	lsls	r5, r3, #27
 800b6c6:	d411      	bmi.n	800b6ec <__swsetup_r+0x50>
 800b6c8:	2309      	movs	r3, #9
 800b6ca:	6033      	str	r3, [r6, #0]
 800b6cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	e03e      	b.n	800b756 <__swsetup_r+0xba>
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <__swsetup_r+0xd4>)
 800b6da:	429c      	cmp	r4, r3
 800b6dc:	d101      	bne.n	800b6e2 <__swsetup_r+0x46>
 800b6de:	68ac      	ldr	r4, [r5, #8]
 800b6e0:	e7eb      	b.n	800b6ba <__swsetup_r+0x1e>
 800b6e2:	4b24      	ldr	r3, [pc, #144]	; (800b774 <__swsetup_r+0xd8>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	bf08      	it	eq
 800b6e8:	68ec      	ldreq	r4, [r5, #12]
 800b6ea:	e7e6      	b.n	800b6ba <__swsetup_r+0x1e>
 800b6ec:	0758      	lsls	r0, r3, #29
 800b6ee:	d512      	bpl.n	800b716 <__swsetup_r+0x7a>
 800b6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f2:	b141      	cbz	r1, 800b706 <__swsetup_r+0x6a>
 800b6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d002      	beq.n	800b702 <__swsetup_r+0x66>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fb31 	bl	800ad64 <_free_r>
 800b702:	2300      	movs	r3, #0
 800b704:	6363      	str	r3, [r4, #52]	; 0x34
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	2300      	movs	r3, #0
 800b710:	6063      	str	r3, [r4, #4]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f043 0308 	orr.w	r3, r3, #8
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	b94b      	cbnz	r3, 800b736 <__swsetup_r+0x9a>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72c:	d003      	beq.n	800b736 <__swsetup_r+0x9a>
 800b72e:	4621      	mov	r1, r4
 800b730:	4630      	mov	r0, r6
 800b732:	f000 fa09 	bl	800bb48 <__smakebuf_r>
 800b736:	89a0      	ldrh	r0, [r4, #12]
 800b738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b73c:	f010 0301 	ands.w	r3, r0, #1
 800b740:	d00a      	beq.n	800b758 <__swsetup_r+0xbc>
 800b742:	2300      	movs	r3, #0
 800b744:	60a3      	str	r3, [r4, #8]
 800b746:	6963      	ldr	r3, [r4, #20]
 800b748:	425b      	negs	r3, r3
 800b74a:	61a3      	str	r3, [r4, #24]
 800b74c:	6923      	ldr	r3, [r4, #16]
 800b74e:	b943      	cbnz	r3, 800b762 <__swsetup_r+0xc6>
 800b750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b754:	d1ba      	bne.n	800b6cc <__swsetup_r+0x30>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	0781      	lsls	r1, r0, #30
 800b75a:	bf58      	it	pl
 800b75c:	6963      	ldrpl	r3, [r4, #20]
 800b75e:	60a3      	str	r3, [r4, #8]
 800b760:	e7f4      	b.n	800b74c <__swsetup_r+0xb0>
 800b762:	2000      	movs	r0, #0
 800b764:	e7f7      	b.n	800b756 <__swsetup_r+0xba>
 800b766:	bf00      	nop
 800b768:	20000014 	.word	0x20000014
 800b76c:	0800c6b4 	.word	0x0800c6b4
 800b770:	0800c6d4 	.word	0x0800c6d4
 800b774:	0800c694 	.word	0x0800c694

0800b778 <abort>:
 800b778:	b508      	push	{r3, lr}
 800b77a:	2006      	movs	r0, #6
 800b77c:	f000 fa54 	bl	800bc28 <raise>
 800b780:	2001      	movs	r0, #1
 800b782:	f7f7 fac3 	bl	8002d0c <_exit>
	...

0800b788 <__sflush_r>:
 800b788:	898a      	ldrh	r2, [r1, #12]
 800b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78e:	4605      	mov	r5, r0
 800b790:	0710      	lsls	r0, r2, #28
 800b792:	460c      	mov	r4, r1
 800b794:	d458      	bmi.n	800b848 <__sflush_r+0xc0>
 800b796:	684b      	ldr	r3, [r1, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dc05      	bgt.n	800b7a8 <__sflush_r+0x20>
 800b79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dc02      	bgt.n	800b7a8 <__sflush_r+0x20>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	d0f9      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7b4:	682f      	ldr	r7, [r5, #0]
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	d032      	beq.n	800b820 <__sflush_r+0x98>
 800b7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	075a      	lsls	r2, r3, #29
 800b7c0:	d505      	bpl.n	800b7ce <__sflush_r+0x46>
 800b7c2:	6863      	ldr	r3, [r4, #4]
 800b7c4:	1ac0      	subs	r0, r0, r3
 800b7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7c8:	b10b      	cbz	r3, 800b7ce <__sflush_r+0x46>
 800b7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7cc:	1ac0      	subs	r0, r0, r3
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d4:	6a21      	ldr	r1, [r4, #32]
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	47b0      	blx	r6
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	d106      	bne.n	800b7ee <__sflush_r+0x66>
 800b7e0:	6829      	ldr	r1, [r5, #0]
 800b7e2:	291d      	cmp	r1, #29
 800b7e4:	d82c      	bhi.n	800b840 <__sflush_r+0xb8>
 800b7e6:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <__sflush_r+0x108>)
 800b7e8:	40ca      	lsrs	r2, r1
 800b7ea:	07d6      	lsls	r6, r2, #31
 800b7ec:	d528      	bpl.n	800b840 <__sflush_r+0xb8>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	6062      	str	r2, [r4, #4]
 800b7f2:	04d9      	lsls	r1, r3, #19
 800b7f4:	6922      	ldr	r2, [r4, #16]
 800b7f6:	6022      	str	r2, [r4, #0]
 800b7f8:	d504      	bpl.n	800b804 <__sflush_r+0x7c>
 800b7fa:	1c42      	adds	r2, r0, #1
 800b7fc:	d101      	bne.n	800b802 <__sflush_r+0x7a>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b903      	cbnz	r3, 800b804 <__sflush_r+0x7c>
 800b802:	6560      	str	r0, [r4, #84]	; 0x54
 800b804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b806:	602f      	str	r7, [r5, #0]
 800b808:	2900      	cmp	r1, #0
 800b80a:	d0ca      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b810:	4299      	cmp	r1, r3
 800b812:	d002      	beq.n	800b81a <__sflush_r+0x92>
 800b814:	4628      	mov	r0, r5
 800b816:	f7ff faa5 	bl	800ad64 <_free_r>
 800b81a:	2000      	movs	r0, #0
 800b81c:	6360      	str	r0, [r4, #52]	; 0x34
 800b81e:	e7c1      	b.n	800b7a4 <__sflush_r+0x1c>
 800b820:	6a21      	ldr	r1, [r4, #32]
 800b822:	2301      	movs	r3, #1
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	1c41      	adds	r1, r0, #1
 800b82a:	d1c7      	bne.n	800b7bc <__sflush_r+0x34>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0c4      	beq.n	800b7bc <__sflush_r+0x34>
 800b832:	2b1d      	cmp	r3, #29
 800b834:	d001      	beq.n	800b83a <__sflush_r+0xb2>
 800b836:	2b16      	cmp	r3, #22
 800b838:	d101      	bne.n	800b83e <__sflush_r+0xb6>
 800b83a:	602f      	str	r7, [r5, #0]
 800b83c:	e7b1      	b.n	800b7a2 <__sflush_r+0x1a>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	e7ad      	b.n	800b7a4 <__sflush_r+0x1c>
 800b848:	690f      	ldr	r7, [r1, #16]
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	d0a9      	beq.n	800b7a2 <__sflush_r+0x1a>
 800b84e:	0793      	lsls	r3, r2, #30
 800b850:	680e      	ldr	r6, [r1, #0]
 800b852:	bf08      	it	eq
 800b854:	694b      	ldreq	r3, [r1, #20]
 800b856:	600f      	str	r7, [r1, #0]
 800b858:	bf18      	it	ne
 800b85a:	2300      	movne	r3, #0
 800b85c:	eba6 0807 	sub.w	r8, r6, r7
 800b860:	608b      	str	r3, [r1, #8]
 800b862:	f1b8 0f00 	cmp.w	r8, #0
 800b866:	dd9c      	ble.n	800b7a2 <__sflush_r+0x1a>
 800b868:	6a21      	ldr	r1, [r4, #32]
 800b86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b86c:	4643      	mov	r3, r8
 800b86e:	463a      	mov	r2, r7
 800b870:	4628      	mov	r0, r5
 800b872:	47b0      	blx	r6
 800b874:	2800      	cmp	r0, #0
 800b876:	dc06      	bgt.n	800b886 <__sflush_r+0xfe>
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	e78e      	b.n	800b7a4 <__sflush_r+0x1c>
 800b886:	4407      	add	r7, r0
 800b888:	eba8 0800 	sub.w	r8, r8, r0
 800b88c:	e7e9      	b.n	800b862 <__sflush_r+0xda>
 800b88e:	bf00      	nop
 800b890:	20400001 	.word	0x20400001

0800b894 <_fflush_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	690b      	ldr	r3, [r1, #16]
 800b898:	4605      	mov	r5, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	b913      	cbnz	r3, 800b8a4 <_fflush_r+0x10>
 800b89e:	2500      	movs	r5, #0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	b118      	cbz	r0, 800b8ae <_fflush_r+0x1a>
 800b8a6:	6983      	ldr	r3, [r0, #24]
 800b8a8:	b90b      	cbnz	r3, 800b8ae <_fflush_r+0x1a>
 800b8aa:	f000 f887 	bl	800b9bc <__sinit>
 800b8ae:	4b14      	ldr	r3, [pc, #80]	; (800b900 <_fflush_r+0x6c>)
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	d11b      	bne.n	800b8ec <_fflush_r+0x58>
 800b8b4:	686c      	ldr	r4, [r5, #4]
 800b8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0ef      	beq.n	800b89e <_fflush_r+0xa>
 800b8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8c0:	07d0      	lsls	r0, r2, #31
 800b8c2:	d404      	bmi.n	800b8ce <_fflush_r+0x3a>
 800b8c4:	0599      	lsls	r1, r3, #22
 800b8c6:	d402      	bmi.n	800b8ce <_fflush_r+0x3a>
 800b8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ca:	f000 f915 	bl	800baf8 <__retarget_lock_acquire_recursive>
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f7ff ff59 	bl	800b788 <__sflush_r>
 800b8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d8:	07da      	lsls	r2, r3, #31
 800b8da:	4605      	mov	r5, r0
 800b8dc:	d4e0      	bmi.n	800b8a0 <_fflush_r+0xc>
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	059b      	lsls	r3, r3, #22
 800b8e2:	d4dd      	bmi.n	800b8a0 <_fflush_r+0xc>
 800b8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e6:	f000 f908 	bl	800bafa <__retarget_lock_release_recursive>
 800b8ea:	e7d9      	b.n	800b8a0 <_fflush_r+0xc>
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <_fflush_r+0x70>)
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d101      	bne.n	800b8f6 <_fflush_r+0x62>
 800b8f2:	68ac      	ldr	r4, [r5, #8]
 800b8f4:	e7df      	b.n	800b8b6 <_fflush_r+0x22>
 800b8f6:	4b04      	ldr	r3, [pc, #16]	; (800b908 <_fflush_r+0x74>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	bf08      	it	eq
 800b8fc:	68ec      	ldreq	r4, [r5, #12]
 800b8fe:	e7da      	b.n	800b8b6 <_fflush_r+0x22>
 800b900:	0800c6b4 	.word	0x0800c6b4
 800b904:	0800c6d4 	.word	0x0800c6d4
 800b908:	0800c694 	.word	0x0800c694

0800b90c <std>:
 800b90c:	2300      	movs	r3, #0
 800b90e:	b510      	push	{r4, lr}
 800b910:	4604      	mov	r4, r0
 800b912:	e9c0 3300 	strd	r3, r3, [r0]
 800b916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b91a:	6083      	str	r3, [r0, #8]
 800b91c:	8181      	strh	r1, [r0, #12]
 800b91e:	6643      	str	r3, [r0, #100]	; 0x64
 800b920:	81c2      	strh	r2, [r0, #14]
 800b922:	6183      	str	r3, [r0, #24]
 800b924:	4619      	mov	r1, r3
 800b926:	2208      	movs	r2, #8
 800b928:	305c      	adds	r0, #92	; 0x5c
 800b92a:	f7fd fb5b 	bl	8008fe4 <memset>
 800b92e:	4b05      	ldr	r3, [pc, #20]	; (800b944 <std+0x38>)
 800b930:	6263      	str	r3, [r4, #36]	; 0x24
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <std+0x3c>)
 800b934:	62a3      	str	r3, [r4, #40]	; 0x28
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x40>)
 800b938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x44>)
 800b93c:	6224      	str	r4, [r4, #32]
 800b93e:	6323      	str	r3, [r4, #48]	; 0x30
 800b940:	bd10      	pop	{r4, pc}
 800b942:	bf00      	nop
 800b944:	0800bc61 	.word	0x0800bc61
 800b948:	0800bc83 	.word	0x0800bc83
 800b94c:	0800bcbb 	.word	0x0800bcbb
 800b950:	0800bcdf 	.word	0x0800bcdf

0800b954 <_cleanup_r>:
 800b954:	4901      	ldr	r1, [pc, #4]	; (800b95c <_cleanup_r+0x8>)
 800b956:	f000 b8af 	b.w	800bab8 <_fwalk_reent>
 800b95a:	bf00      	nop
 800b95c:	0800b895 	.word	0x0800b895

0800b960 <__sfmoreglue>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	2268      	movs	r2, #104	; 0x68
 800b964:	1e4d      	subs	r5, r1, #1
 800b966:	4355      	muls	r5, r2
 800b968:	460e      	mov	r6, r1
 800b96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b96e:	f7ff fa65 	bl	800ae3c <_malloc_r>
 800b972:	4604      	mov	r4, r0
 800b974:	b140      	cbz	r0, 800b988 <__sfmoreglue+0x28>
 800b976:	2100      	movs	r1, #0
 800b978:	e9c0 1600 	strd	r1, r6, [r0]
 800b97c:	300c      	adds	r0, #12
 800b97e:	60a0      	str	r0, [r4, #8]
 800b980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b984:	f7fd fb2e 	bl	8008fe4 <memset>
 800b988:	4620      	mov	r0, r4
 800b98a:	bd70      	pop	{r4, r5, r6, pc}

0800b98c <__sfp_lock_acquire>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__sfp_lock_acquire+0x8>)
 800b98e:	f000 b8b3 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	20000521 	.word	0x20000521

0800b998 <__sfp_lock_release>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__sfp_lock_release+0x8>)
 800b99a:	f000 b8ae 	b.w	800bafa <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	20000521 	.word	0x20000521

0800b9a4 <__sinit_lock_acquire>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	; (800b9ac <__sinit_lock_acquire+0x8>)
 800b9a6:	f000 b8a7 	b.w	800baf8 <__retarget_lock_acquire_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	20000522 	.word	0x20000522

0800b9b0 <__sinit_lock_release>:
 800b9b0:	4801      	ldr	r0, [pc, #4]	; (800b9b8 <__sinit_lock_release+0x8>)
 800b9b2:	f000 b8a2 	b.w	800bafa <__retarget_lock_release_recursive>
 800b9b6:	bf00      	nop
 800b9b8:	20000522 	.word	0x20000522

0800b9bc <__sinit>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4604      	mov	r4, r0
 800b9c0:	f7ff fff0 	bl	800b9a4 <__sinit_lock_acquire>
 800b9c4:	69a3      	ldr	r3, [r4, #24]
 800b9c6:	b11b      	cbz	r3, 800b9d0 <__sinit+0x14>
 800b9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9cc:	f7ff bff0 	b.w	800b9b0 <__sinit_lock_release>
 800b9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b9d6:	4b13      	ldr	r3, [pc, #76]	; (800ba24 <__sinit+0x68>)
 800b9d8:	4a13      	ldr	r2, [pc, #76]	; (800ba28 <__sinit+0x6c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	bf04      	itt	eq
 800b9e2:	2301      	moveq	r3, #1
 800b9e4:	61a3      	streq	r3, [r4, #24]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f820 	bl	800ba2c <__sfp>
 800b9ec:	6060      	str	r0, [r4, #4]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f81c 	bl	800ba2c <__sfp>
 800b9f4:	60a0      	str	r0, [r4, #8]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 f818 	bl	800ba2c <__sfp>
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	60e0      	str	r0, [r4, #12]
 800ba00:	2104      	movs	r1, #4
 800ba02:	6860      	ldr	r0, [r4, #4]
 800ba04:	f7ff ff82 	bl	800b90c <std>
 800ba08:	68a0      	ldr	r0, [r4, #8]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	2109      	movs	r1, #9
 800ba0e:	f7ff ff7d 	bl	800b90c <std>
 800ba12:	68e0      	ldr	r0, [r4, #12]
 800ba14:	2202      	movs	r2, #2
 800ba16:	2112      	movs	r1, #18
 800ba18:	f7ff ff78 	bl	800b90c <std>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	61a3      	str	r3, [r4, #24]
 800ba20:	e7d2      	b.n	800b9c8 <__sinit+0xc>
 800ba22:	bf00      	nop
 800ba24:	0800c31c 	.word	0x0800c31c
 800ba28:	0800b955 	.word	0x0800b955

0800ba2c <__sfp>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	4607      	mov	r7, r0
 800ba30:	f7ff ffac 	bl	800b98c <__sfp_lock_acquire>
 800ba34:	4b1e      	ldr	r3, [pc, #120]	; (800bab0 <__sfp+0x84>)
 800ba36:	681e      	ldr	r6, [r3, #0]
 800ba38:	69b3      	ldr	r3, [r6, #24]
 800ba3a:	b913      	cbnz	r3, 800ba42 <__sfp+0x16>
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff ffbd 	bl	800b9bc <__sinit>
 800ba42:	3648      	adds	r6, #72	; 0x48
 800ba44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	d503      	bpl.n	800ba54 <__sfp+0x28>
 800ba4c:	6833      	ldr	r3, [r6, #0]
 800ba4e:	b30b      	cbz	r3, 800ba94 <__sfp+0x68>
 800ba50:	6836      	ldr	r6, [r6, #0]
 800ba52:	e7f7      	b.n	800ba44 <__sfp+0x18>
 800ba54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba58:	b9d5      	cbnz	r5, 800ba90 <__sfp+0x64>
 800ba5a:	4b16      	ldr	r3, [pc, #88]	; (800bab4 <__sfp+0x88>)
 800ba5c:	60e3      	str	r3, [r4, #12]
 800ba5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba62:	6665      	str	r5, [r4, #100]	; 0x64
 800ba64:	f000 f847 	bl	800baf6 <__retarget_lock_init_recursive>
 800ba68:	f7ff ff96 	bl	800b998 <__sfp_lock_release>
 800ba6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba74:	6025      	str	r5, [r4, #0]
 800ba76:	61a5      	str	r5, [r4, #24]
 800ba78:	2208      	movs	r2, #8
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba80:	f7fd fab0 	bl	8008fe4 <memset>
 800ba84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba90:	3468      	adds	r4, #104	; 0x68
 800ba92:	e7d9      	b.n	800ba48 <__sfp+0x1c>
 800ba94:	2104      	movs	r1, #4
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7ff ff62 	bl	800b960 <__sfmoreglue>
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	6030      	str	r0, [r6, #0]
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d1d5      	bne.n	800ba50 <__sfp+0x24>
 800baa4:	f7ff ff78 	bl	800b998 <__sfp_lock_release>
 800baa8:	230c      	movs	r3, #12
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	e7ee      	b.n	800ba8c <__sfp+0x60>
 800baae:	bf00      	nop
 800bab0:	0800c31c 	.word	0x0800c31c
 800bab4:	ffff0001 	.word	0xffff0001

0800bab8 <_fwalk_reent>:
 800bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800babc:	4606      	mov	r6, r0
 800babe:	4688      	mov	r8, r1
 800bac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bac4:	2700      	movs	r7, #0
 800bac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baca:	f1b9 0901 	subs.w	r9, r9, #1
 800bace:	d505      	bpl.n	800badc <_fwalk_reent+0x24>
 800bad0:	6824      	ldr	r4, [r4, #0]
 800bad2:	2c00      	cmp	r4, #0
 800bad4:	d1f7      	bne.n	800bac6 <_fwalk_reent+0xe>
 800bad6:	4638      	mov	r0, r7
 800bad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800badc:	89ab      	ldrh	r3, [r5, #12]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d907      	bls.n	800baf2 <_fwalk_reent+0x3a>
 800bae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bae6:	3301      	adds	r3, #1
 800bae8:	d003      	beq.n	800baf2 <_fwalk_reent+0x3a>
 800baea:	4629      	mov	r1, r5
 800baec:	4630      	mov	r0, r6
 800baee:	47c0      	blx	r8
 800baf0:	4307      	orrs	r7, r0
 800baf2:	3568      	adds	r5, #104	; 0x68
 800baf4:	e7e9      	b.n	800baca <_fwalk_reent+0x12>

0800baf6 <__retarget_lock_init_recursive>:
 800baf6:	4770      	bx	lr

0800baf8 <__retarget_lock_acquire_recursive>:
 800baf8:	4770      	bx	lr

0800bafa <__retarget_lock_release_recursive>:
 800bafa:	4770      	bx	lr

0800bafc <__swhatbuf_r>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	460e      	mov	r6, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	2900      	cmp	r1, #0
 800bb06:	b096      	sub	sp, #88	; 0x58
 800bb08:	4614      	mov	r4, r2
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	da08      	bge.n	800bb20 <__swhatbuf_r+0x24>
 800bb0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	602a      	str	r2, [r5, #0]
 800bb16:	061a      	lsls	r2, r3, #24
 800bb18:	d410      	bmi.n	800bb3c <__swhatbuf_r+0x40>
 800bb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1e:	e00e      	b.n	800bb3e <__swhatbuf_r+0x42>
 800bb20:	466a      	mov	r2, sp
 800bb22:	f000 f903 	bl	800bd2c <_fstat_r>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	dbf1      	blt.n	800bb0e <__swhatbuf_r+0x12>
 800bb2a:	9a01      	ldr	r2, [sp, #4]
 800bb2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb34:	425a      	negs	r2, r3
 800bb36:	415a      	adcs	r2, r3
 800bb38:	602a      	str	r2, [r5, #0]
 800bb3a:	e7ee      	b.n	800bb1a <__swhatbuf_r+0x1e>
 800bb3c:	2340      	movs	r3, #64	; 0x40
 800bb3e:	2000      	movs	r0, #0
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	b016      	add	sp, #88	; 0x58
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb48 <__smakebuf_r>:
 800bb48:	898b      	ldrh	r3, [r1, #12]
 800bb4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb4c:	079d      	lsls	r5, r3, #30
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	d507      	bpl.n	800bb64 <__smakebuf_r+0x1c>
 800bb54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	6123      	str	r3, [r4, #16]
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	6163      	str	r3, [r4, #20]
 800bb60:	b002      	add	sp, #8
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	ab01      	add	r3, sp, #4
 800bb66:	466a      	mov	r2, sp
 800bb68:	f7ff ffc8 	bl	800bafc <__swhatbuf_r>
 800bb6c:	9900      	ldr	r1, [sp, #0]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7ff f963 	bl	800ae3c <_malloc_r>
 800bb76:	b948      	cbnz	r0, 800bb8c <__smakebuf_r+0x44>
 800bb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7c:	059a      	lsls	r2, r3, #22
 800bb7e:	d4ef      	bmi.n	800bb60 <__smakebuf_r+0x18>
 800bb80:	f023 0303 	bic.w	r3, r3, #3
 800bb84:	f043 0302 	orr.w	r3, r3, #2
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	e7e3      	b.n	800bb54 <__smakebuf_r+0xc>
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <__smakebuf_r+0x7c>)
 800bb8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	6020      	str	r0, [r4, #0]
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	6163      	str	r3, [r4, #20]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	6120      	str	r0, [r4, #16]
 800bba2:	b15b      	cbz	r3, 800bbbc <__smakebuf_r+0x74>
 800bba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 f8d1 	bl	800bd50 <_isatty_r>
 800bbae:	b128      	cbz	r0, 800bbbc <__smakebuf_r+0x74>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	f043 0301 	orr.w	r3, r3, #1
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	89a0      	ldrh	r0, [r4, #12]
 800bbbe:	4305      	orrs	r5, r0
 800bbc0:	81a5      	strh	r5, [r4, #12]
 800bbc2:	e7cd      	b.n	800bb60 <__smakebuf_r+0x18>
 800bbc4:	0800b955 	.word	0x0800b955

0800bbc8 <_malloc_usable_size_r>:
 800bbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbcc:	1f18      	subs	r0, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bfbc      	itt	lt
 800bbd2:	580b      	ldrlt	r3, [r1, r0]
 800bbd4:	18c0      	addlt	r0, r0, r3
 800bbd6:	4770      	bx	lr

0800bbd8 <_raise_r>:
 800bbd8:	291f      	cmp	r1, #31
 800bbda:	b538      	push	{r3, r4, r5, lr}
 800bbdc:	4604      	mov	r4, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	d904      	bls.n	800bbec <_raise_r+0x14>
 800bbe2:	2316      	movs	r3, #22
 800bbe4:	6003      	str	r3, [r0, #0]
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbee:	b112      	cbz	r2, 800bbf6 <_raise_r+0x1e>
 800bbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbf4:	b94b      	cbnz	r3, 800bc0a <_raise_r+0x32>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 f830 	bl	800bc5c <_getpid_r>
 800bbfc:	462a      	mov	r2, r5
 800bbfe:	4601      	mov	r1, r0
 800bc00:	4620      	mov	r0, r4
 800bc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc06:	f000 b817 	b.w	800bc38 <_kill_r>
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d00a      	beq.n	800bc24 <_raise_r+0x4c>
 800bc0e:	1c59      	adds	r1, r3, #1
 800bc10:	d103      	bne.n	800bc1a <_raise_r+0x42>
 800bc12:	2316      	movs	r3, #22
 800bc14:	6003      	str	r3, [r0, #0]
 800bc16:	2001      	movs	r0, #1
 800bc18:	e7e7      	b.n	800bbea <_raise_r+0x12>
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc20:	4628      	mov	r0, r5
 800bc22:	4798      	blx	r3
 800bc24:	2000      	movs	r0, #0
 800bc26:	e7e0      	b.n	800bbea <_raise_r+0x12>

0800bc28 <raise>:
 800bc28:	4b02      	ldr	r3, [pc, #8]	; (800bc34 <raise+0xc>)
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f7ff bfd3 	b.w	800bbd8 <_raise_r>
 800bc32:	bf00      	nop
 800bc34:	20000014 	.word	0x20000014

0800bc38 <_kill_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d07      	ldr	r5, [pc, #28]	; (800bc58 <_kill_r+0x20>)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	4611      	mov	r1, r2
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	f7f7 f851 	bl	8002cec <_kill>
 800bc4a:	1c43      	adds	r3, r0, #1
 800bc4c:	d102      	bne.n	800bc54 <_kill_r+0x1c>
 800bc4e:	682b      	ldr	r3, [r5, #0]
 800bc50:	b103      	cbz	r3, 800bc54 <_kill_r+0x1c>
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	bf00      	nop
 800bc58:	2000051c 	.word	0x2000051c

0800bc5c <_getpid_r>:
 800bc5c:	f7f7 b83e 	b.w	8002cdc <_getpid>

0800bc60 <__sread>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	460c      	mov	r4, r1
 800bc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc68:	f000 f894 	bl	800bd94 <_read_r>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	bfab      	itete	ge
 800bc70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc72:	89a3      	ldrhlt	r3, [r4, #12]
 800bc74:	181b      	addge	r3, r3, r0
 800bc76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc7a:	bfac      	ite	ge
 800bc7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc7e:	81a3      	strhlt	r3, [r4, #12]
 800bc80:	bd10      	pop	{r4, pc}

0800bc82 <__swrite>:
 800bc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc86:	461f      	mov	r7, r3
 800bc88:	898b      	ldrh	r3, [r1, #12]
 800bc8a:	05db      	lsls	r3, r3, #23
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	4616      	mov	r6, r2
 800bc92:	d505      	bpl.n	800bca0 <__swrite+0x1e>
 800bc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc98:	2302      	movs	r3, #2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f000 f868 	bl	800bd70 <_lseek_r>
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcaa:	81a3      	strh	r3, [r4, #12]
 800bcac:	4632      	mov	r2, r6
 800bcae:	463b      	mov	r3, r7
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	f000 b817 	b.w	800bce8 <_write_r>

0800bcba <__sseek>:
 800bcba:	b510      	push	{r4, lr}
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc2:	f000 f855 	bl	800bd70 <_lseek_r>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	bf15      	itete	ne
 800bccc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcd6:	81a3      	strheq	r3, [r4, #12]
 800bcd8:	bf18      	it	ne
 800bcda:	81a3      	strhne	r3, [r4, #12]
 800bcdc:	bd10      	pop	{r4, pc}

0800bcde <__sclose>:
 800bcde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce2:	f000 b813 	b.w	800bd0c <_close_r>
	...

0800bce8 <_write_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	; (800bd08 <_write_r+0x20>)
 800bcec:	4604      	mov	r4, r0
 800bcee:	4608      	mov	r0, r1
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7f7 f82f 	bl	8002d5a <_write>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_write_r+0x1e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_write_r+0x1e>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	2000051c 	.word	0x2000051c

0800bd0c <_close_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d06      	ldr	r5, [pc, #24]	; (800bd28 <_close_r+0x1c>)
 800bd10:	2300      	movs	r3, #0
 800bd12:	4604      	mov	r4, r0
 800bd14:	4608      	mov	r0, r1
 800bd16:	602b      	str	r3, [r5, #0]
 800bd18:	f7f7 f83b 	bl	8002d92 <_close>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_close_r+0x1a>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_close_r+0x1a>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	2000051c 	.word	0x2000051c

0800bd2c <_fstat_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_fstat_r+0x20>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	4611      	mov	r1, r2
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	f7f7 f836 	bl	8002daa <_fstat>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d102      	bne.n	800bd48 <_fstat_r+0x1c>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b103      	cbz	r3, 800bd48 <_fstat_r+0x1c>
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	bf00      	nop
 800bd4c:	2000051c 	.word	0x2000051c

0800bd50 <_isatty_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_isatty_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f7 f835 	bl	8002dca <_isatty>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_isatty_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_isatty_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	2000051c 	.word	0x2000051c

0800bd70 <_lseek_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	; (800bd90 <_lseek_r+0x20>)
 800bd74:	4604      	mov	r4, r0
 800bd76:	4608      	mov	r0, r1
 800bd78:	4611      	mov	r1, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	602a      	str	r2, [r5, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f7f7 f82e 	bl	8002de0 <_lseek>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	d102      	bne.n	800bd8e <_lseek_r+0x1e>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	b103      	cbz	r3, 800bd8e <_lseek_r+0x1e>
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	2000051c 	.word	0x2000051c

0800bd94 <_read_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d07      	ldr	r5, [pc, #28]	; (800bdb4 <_read_r+0x20>)
 800bd98:	4604      	mov	r4, r0
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	2200      	movs	r2, #0
 800bda0:	602a      	str	r2, [r5, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f7f6 ffbc 	bl	8002d20 <_read>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_read_r+0x1e>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_read_r+0x1e>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	2000051c 	.word	0x2000051c

0800bdb8 <atan2>:
 800bdb8:	f000 b802 	b.w	800bdc0 <__ieee754_atan2>
 800bdbc:	0000      	movs	r0, r0
	...

0800bdc0 <__ieee754_atan2>:
 800bdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc4:	ec57 6b11 	vmov	r6, r7, d1
 800bdc8:	4273      	negs	r3, r6
 800bdca:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bf50 <__ieee754_atan2+0x190>
 800bdce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bdd2:	4333      	orrs	r3, r6
 800bdd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bdd8:	4573      	cmp	r3, lr
 800bdda:	ec51 0b10 	vmov	r0, r1, d0
 800bdde:	ee11 8a10 	vmov	r8, s2
 800bde2:	d80a      	bhi.n	800bdfa <__ieee754_atan2+0x3a>
 800bde4:	4244      	negs	r4, r0
 800bde6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdea:	4304      	orrs	r4, r0
 800bdec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bdf0:	4574      	cmp	r4, lr
 800bdf2:	ee10 9a10 	vmov	r9, s0
 800bdf6:	468c      	mov	ip, r1
 800bdf8:	d907      	bls.n	800be0a <__ieee754_atan2+0x4a>
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f7f4 fa4d 	bl	800029c <__adddf3>
 800be02:	ec41 0b10 	vmov	d0, r0, r1
 800be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800be0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be12:	4334      	orrs	r4, r6
 800be14:	d103      	bne.n	800be1e <__ieee754_atan2+0x5e>
 800be16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1a:	f000 b89d 	b.w	800bf58 <atan>
 800be1e:	17bc      	asrs	r4, r7, #30
 800be20:	f004 0402 	and.w	r4, r4, #2
 800be24:	ea53 0909 	orrs.w	r9, r3, r9
 800be28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800be2c:	d107      	bne.n	800be3e <__ieee754_atan2+0x7e>
 800be2e:	2c02      	cmp	r4, #2
 800be30:	d060      	beq.n	800bef4 <__ieee754_atan2+0x134>
 800be32:	2c03      	cmp	r4, #3
 800be34:	d1e5      	bne.n	800be02 <__ieee754_atan2+0x42>
 800be36:	a142      	add	r1, pc, #264	; (adr r1, 800bf40 <__ieee754_atan2+0x180>)
 800be38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be3c:	e7e1      	b.n	800be02 <__ieee754_atan2+0x42>
 800be3e:	ea52 0808 	orrs.w	r8, r2, r8
 800be42:	d106      	bne.n	800be52 <__ieee754_atan2+0x92>
 800be44:	f1bc 0f00 	cmp.w	ip, #0
 800be48:	da5f      	bge.n	800bf0a <__ieee754_atan2+0x14a>
 800be4a:	a13f      	add	r1, pc, #252	; (adr r1, 800bf48 <__ieee754_atan2+0x188>)
 800be4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be50:	e7d7      	b.n	800be02 <__ieee754_atan2+0x42>
 800be52:	4572      	cmp	r2, lr
 800be54:	d10f      	bne.n	800be76 <__ieee754_atan2+0xb6>
 800be56:	4293      	cmp	r3, r2
 800be58:	f104 34ff 	add.w	r4, r4, #4294967295
 800be5c:	d107      	bne.n	800be6e <__ieee754_atan2+0xae>
 800be5e:	2c02      	cmp	r4, #2
 800be60:	d84c      	bhi.n	800befc <__ieee754_atan2+0x13c>
 800be62:	4b35      	ldr	r3, [pc, #212]	; (800bf38 <__ieee754_atan2+0x178>)
 800be64:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800be68:	e9d4 0100 	ldrd	r0, r1, [r4]
 800be6c:	e7c9      	b.n	800be02 <__ieee754_atan2+0x42>
 800be6e:	2c02      	cmp	r4, #2
 800be70:	d848      	bhi.n	800bf04 <__ieee754_atan2+0x144>
 800be72:	4b32      	ldr	r3, [pc, #200]	; (800bf3c <__ieee754_atan2+0x17c>)
 800be74:	e7f6      	b.n	800be64 <__ieee754_atan2+0xa4>
 800be76:	4573      	cmp	r3, lr
 800be78:	d0e4      	beq.n	800be44 <__ieee754_atan2+0x84>
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800be80:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be84:	da1e      	bge.n	800bec4 <__ieee754_atan2+0x104>
 800be86:	2f00      	cmp	r7, #0
 800be88:	da01      	bge.n	800be8e <__ieee754_atan2+0xce>
 800be8a:	323c      	adds	r2, #60	; 0x3c
 800be8c:	db1e      	blt.n	800becc <__ieee754_atan2+0x10c>
 800be8e:	4632      	mov	r2, r6
 800be90:	463b      	mov	r3, r7
 800be92:	f7f4 fce3 	bl	800085c <__aeabi_ddiv>
 800be96:	ec41 0b10 	vmov	d0, r0, r1
 800be9a:	f000 f9fd 	bl	800c298 <fabs>
 800be9e:	f000 f85b 	bl	800bf58 <atan>
 800bea2:	ec51 0b10 	vmov	r0, r1, d0
 800bea6:	2c01      	cmp	r4, #1
 800bea8:	d013      	beq.n	800bed2 <__ieee754_atan2+0x112>
 800beaa:	2c02      	cmp	r4, #2
 800beac:	d015      	beq.n	800beda <__ieee754_atan2+0x11a>
 800beae:	2c00      	cmp	r4, #0
 800beb0:	d0a7      	beq.n	800be02 <__ieee754_atan2+0x42>
 800beb2:	a319      	add	r3, pc, #100	; (adr r3, 800bf18 <__ieee754_atan2+0x158>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f9ee 	bl	8000298 <__aeabi_dsub>
 800bebc:	a318      	add	r3, pc, #96	; (adr r3, 800bf20 <__ieee754_atan2+0x160>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	e014      	b.n	800beee <__ieee754_atan2+0x12e>
 800bec4:	a118      	add	r1, pc, #96	; (adr r1, 800bf28 <__ieee754_atan2+0x168>)
 800bec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beca:	e7ec      	b.n	800bea6 <__ieee754_atan2+0xe6>
 800becc:	2000      	movs	r0, #0
 800bece:	2100      	movs	r1, #0
 800bed0:	e7e9      	b.n	800bea6 <__ieee754_atan2+0xe6>
 800bed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bed6:	4619      	mov	r1, r3
 800bed8:	e793      	b.n	800be02 <__ieee754_atan2+0x42>
 800beda:	a30f      	add	r3, pc, #60	; (adr r3, 800bf18 <__ieee754_atan2+0x158>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7f4 f9da 	bl	8000298 <__aeabi_dsub>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	a10d      	add	r1, pc, #52	; (adr r1, 800bf20 <__ieee754_atan2+0x160>)
 800beea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beee:	f7f4 f9d3 	bl	8000298 <__aeabi_dsub>
 800bef2:	e786      	b.n	800be02 <__ieee754_atan2+0x42>
 800bef4:	a10a      	add	r1, pc, #40	; (adr r1, 800bf20 <__ieee754_atan2+0x160>)
 800bef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800befa:	e782      	b.n	800be02 <__ieee754_atan2+0x42>
 800befc:	a10c      	add	r1, pc, #48	; (adr r1, 800bf30 <__ieee754_atan2+0x170>)
 800befe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf02:	e77e      	b.n	800be02 <__ieee754_atan2+0x42>
 800bf04:	2000      	movs	r0, #0
 800bf06:	2100      	movs	r1, #0
 800bf08:	e77b      	b.n	800be02 <__ieee754_atan2+0x42>
 800bf0a:	a107      	add	r1, pc, #28	; (adr r1, 800bf28 <__ieee754_atan2+0x168>)
 800bf0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf10:	e777      	b.n	800be02 <__ieee754_atan2+0x42>
 800bf12:	bf00      	nop
 800bf14:	f3af 8000 	nop.w
 800bf18:	33145c07 	.word	0x33145c07
 800bf1c:	3ca1a626 	.word	0x3ca1a626
 800bf20:	54442d18 	.word	0x54442d18
 800bf24:	400921fb 	.word	0x400921fb
 800bf28:	54442d18 	.word	0x54442d18
 800bf2c:	3ff921fb 	.word	0x3ff921fb
 800bf30:	54442d18 	.word	0x54442d18
 800bf34:	3fe921fb 	.word	0x3fe921fb
 800bf38:	0800c6f8 	.word	0x0800c6f8
 800bf3c:	0800c710 	.word	0x0800c710
 800bf40:	54442d18 	.word	0x54442d18
 800bf44:	c00921fb 	.word	0xc00921fb
 800bf48:	54442d18 	.word	0x54442d18
 800bf4c:	bff921fb 	.word	0xbff921fb
 800bf50:	7ff00000 	.word	0x7ff00000
 800bf54:	00000000 	.word	0x00000000

0800bf58 <atan>:
 800bf58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	ec55 4b10 	vmov	r4, r5, d0
 800bf60:	4bc3      	ldr	r3, [pc, #780]	; (800c270 <atan+0x318>)
 800bf62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf66:	429e      	cmp	r6, r3
 800bf68:	46ab      	mov	fp, r5
 800bf6a:	dd18      	ble.n	800bf9e <atan+0x46>
 800bf6c:	4bc1      	ldr	r3, [pc, #772]	; (800c274 <atan+0x31c>)
 800bf6e:	429e      	cmp	r6, r3
 800bf70:	dc01      	bgt.n	800bf76 <atan+0x1e>
 800bf72:	d109      	bne.n	800bf88 <atan+0x30>
 800bf74:	b144      	cbz	r4, 800bf88 <atan+0x30>
 800bf76:	4622      	mov	r2, r4
 800bf78:	462b      	mov	r3, r5
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f7f4 f98d 	bl	800029c <__adddf3>
 800bf82:	4604      	mov	r4, r0
 800bf84:	460d      	mov	r5, r1
 800bf86:	e006      	b.n	800bf96 <atan+0x3e>
 800bf88:	f1bb 0f00 	cmp.w	fp, #0
 800bf8c:	f300 8131 	bgt.w	800c1f2 <atan+0x29a>
 800bf90:	a59b      	add	r5, pc, #620	; (adr r5, 800c200 <atan+0x2a8>)
 800bf92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf96:	ec45 4b10 	vmov	d0, r4, r5
 800bf9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	4bb6      	ldr	r3, [pc, #728]	; (800c278 <atan+0x320>)
 800bfa0:	429e      	cmp	r6, r3
 800bfa2:	dc14      	bgt.n	800bfce <atan+0x76>
 800bfa4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bfa8:	429e      	cmp	r6, r3
 800bfaa:	dc0d      	bgt.n	800bfc8 <atan+0x70>
 800bfac:	a396      	add	r3, pc, #600	; (adr r3, 800c208 <atan+0x2b0>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	ee10 0a10 	vmov	r0, s0
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 f970 	bl	800029c <__adddf3>
 800bfbc:	4baf      	ldr	r3, [pc, #700]	; (800c27c <atan+0x324>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f7f4 fdb2 	bl	8000b28 <__aeabi_dcmpgt>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d1e6      	bne.n	800bf96 <atan+0x3e>
 800bfc8:	f04f 3aff 	mov.w	sl, #4294967295
 800bfcc:	e02b      	b.n	800c026 <atan+0xce>
 800bfce:	f000 f963 	bl	800c298 <fabs>
 800bfd2:	4bab      	ldr	r3, [pc, #684]	; (800c280 <atan+0x328>)
 800bfd4:	429e      	cmp	r6, r3
 800bfd6:	ec55 4b10 	vmov	r4, r5, d0
 800bfda:	f300 80bf 	bgt.w	800c15c <atan+0x204>
 800bfde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bfe2:	429e      	cmp	r6, r3
 800bfe4:	f300 80a0 	bgt.w	800c128 <atan+0x1d0>
 800bfe8:	ee10 2a10 	vmov	r2, s0
 800bfec:	ee10 0a10 	vmov	r0, s0
 800bff0:	462b      	mov	r3, r5
 800bff2:	4629      	mov	r1, r5
 800bff4:	f7f4 f952 	bl	800029c <__adddf3>
 800bff8:	4ba0      	ldr	r3, [pc, #640]	; (800c27c <atan+0x324>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7f4 f94c 	bl	8000298 <__aeabi_dsub>
 800c000:	2200      	movs	r2, #0
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c00a:	4620      	mov	r0, r4
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 f945 	bl	800029c <__adddf3>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4630      	mov	r0, r6
 800c018:	4639      	mov	r1, r7
 800c01a:	f7f4 fc1f 	bl	800085c <__aeabi_ddiv>
 800c01e:	f04f 0a00 	mov.w	sl, #0
 800c022:	4604      	mov	r4, r0
 800c024:	460d      	mov	r5, r1
 800c026:	4622      	mov	r2, r4
 800c028:	462b      	mov	r3, r5
 800c02a:	4620      	mov	r0, r4
 800c02c:	4629      	mov	r1, r5
 800c02e:	f7f4 faeb 	bl	8000608 <__aeabi_dmul>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4680      	mov	r8, r0
 800c038:	4689      	mov	r9, r1
 800c03a:	f7f4 fae5 	bl	8000608 <__aeabi_dmul>
 800c03e:	a374      	add	r3, pc, #464	; (adr r3, 800c210 <atan+0x2b8>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	4606      	mov	r6, r0
 800c046:	460f      	mov	r7, r1
 800c048:	f7f4 fade 	bl	8000608 <__aeabi_dmul>
 800c04c:	a372      	add	r3, pc, #456	; (adr r3, 800c218 <atan+0x2c0>)
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	f7f4 f923 	bl	800029c <__adddf3>
 800c056:	4632      	mov	r2, r6
 800c058:	463b      	mov	r3, r7
 800c05a:	f7f4 fad5 	bl	8000608 <__aeabi_dmul>
 800c05e:	a370      	add	r3, pc, #448	; (adr r3, 800c220 <atan+0x2c8>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 f91a 	bl	800029c <__adddf3>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	f7f4 facc 	bl	8000608 <__aeabi_dmul>
 800c070:	a36d      	add	r3, pc, #436	; (adr r3, 800c228 <atan+0x2d0>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f911 	bl	800029c <__adddf3>
 800c07a:	4632      	mov	r2, r6
 800c07c:	463b      	mov	r3, r7
 800c07e:	f7f4 fac3 	bl	8000608 <__aeabi_dmul>
 800c082:	a36b      	add	r3, pc, #428	; (adr r3, 800c230 <atan+0x2d8>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 f908 	bl	800029c <__adddf3>
 800c08c:	4632      	mov	r2, r6
 800c08e:	463b      	mov	r3, r7
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	a368      	add	r3, pc, #416	; (adr r3, 800c238 <atan+0x2e0>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 f8ff 	bl	800029c <__adddf3>
 800c09e:	4642      	mov	r2, r8
 800c0a0:	464b      	mov	r3, r9
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	a366      	add	r3, pc, #408	; (adr r3, 800c240 <atan+0x2e8>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	4689      	mov	r9, r1
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	f7f4 faa8 	bl	8000608 <__aeabi_dmul>
 800c0b8:	a363      	add	r3, pc, #396	; (adr r3, 800c248 <atan+0x2f0>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 f8eb 	bl	8000298 <__aeabi_dsub>
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	463b      	mov	r3, r7
 800c0c6:	f7f4 fa9f 	bl	8000608 <__aeabi_dmul>
 800c0ca:	a361      	add	r3, pc, #388	; (adr r3, 800c250 <atan+0x2f8>)
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f7f4 f8e2 	bl	8000298 <__aeabi_dsub>
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	463b      	mov	r3, r7
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	a35e      	add	r3, pc, #376	; (adr r3, 800c258 <atan+0x300>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f7f4 f8d9 	bl	8000298 <__aeabi_dsub>
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	f7f4 fa8d 	bl	8000608 <__aeabi_dmul>
 800c0ee:	a35c      	add	r3, pc, #368	; (adr r3, 800c260 <atan+0x308>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 f8d0 	bl	8000298 <__aeabi_dsub>
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4640      	mov	r0, r8
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 f8c8 	bl	800029c <__adddf3>
 800c10c:	4622      	mov	r2, r4
 800c10e:	462b      	mov	r3, r5
 800c110:	f7f4 fa7a 	bl	8000608 <__aeabi_dmul>
 800c114:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	d14b      	bne.n	800c1b6 <atan+0x25e>
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 f8b9 	bl	8000298 <__aeabi_dsub>
 800c126:	e72c      	b.n	800bf82 <atan+0x2a>
 800c128:	ee10 0a10 	vmov	r0, s0
 800c12c:	4b53      	ldr	r3, [pc, #332]	; (800c27c <atan+0x324>)
 800c12e:	2200      	movs	r2, #0
 800c130:	4629      	mov	r1, r5
 800c132:	f7f4 f8b1 	bl	8000298 <__aeabi_dsub>
 800c136:	4b51      	ldr	r3, [pc, #324]	; (800c27c <atan+0x324>)
 800c138:	4606      	mov	r6, r0
 800c13a:	460f      	mov	r7, r1
 800c13c:	2200      	movs	r2, #0
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 f8ab 	bl	800029c <__adddf3>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4630      	mov	r0, r6
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 fb85 	bl	800085c <__aeabi_ddiv>
 800c152:	f04f 0a01 	mov.w	sl, #1
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	e764      	b.n	800c026 <atan+0xce>
 800c15c:	4b49      	ldr	r3, [pc, #292]	; (800c284 <atan+0x32c>)
 800c15e:	429e      	cmp	r6, r3
 800c160:	da1d      	bge.n	800c19e <atan+0x246>
 800c162:	ee10 0a10 	vmov	r0, s0
 800c166:	4b48      	ldr	r3, [pc, #288]	; (800c288 <atan+0x330>)
 800c168:	2200      	movs	r2, #0
 800c16a:	4629      	mov	r1, r5
 800c16c:	f7f4 f894 	bl	8000298 <__aeabi_dsub>
 800c170:	4b45      	ldr	r3, [pc, #276]	; (800c288 <atan+0x330>)
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	2200      	movs	r2, #0
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 fa44 	bl	8000608 <__aeabi_dmul>
 800c180:	4b3e      	ldr	r3, [pc, #248]	; (800c27c <atan+0x324>)
 800c182:	2200      	movs	r2, #0
 800c184:	f7f4 f88a 	bl	800029c <__adddf3>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4630      	mov	r0, r6
 800c18e:	4639      	mov	r1, r7
 800c190:	f7f4 fb64 	bl	800085c <__aeabi_ddiv>
 800c194:	f04f 0a02 	mov.w	sl, #2
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	e743      	b.n	800c026 <atan+0xce>
 800c19e:	462b      	mov	r3, r5
 800c1a0:	ee10 2a10 	vmov	r2, s0
 800c1a4:	4939      	ldr	r1, [pc, #228]	; (800c28c <atan+0x334>)
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f7f4 fb58 	bl	800085c <__aeabi_ddiv>
 800c1ac:	f04f 0a03 	mov.w	sl, #3
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	e737      	b.n	800c026 <atan+0xce>
 800c1b6:	4b36      	ldr	r3, [pc, #216]	; (800c290 <atan+0x338>)
 800c1b8:	4e36      	ldr	r6, [pc, #216]	; (800c294 <atan+0x33c>)
 800c1ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c1be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c1c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	f7f4 f863 	bl	8000298 <__aeabi_dsub>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1da:	f7f4 f85d 	bl	8000298 <__aeabi_dsub>
 800c1de:	f1bb 0f00 	cmp.w	fp, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	f6bf aed6 	bge.w	800bf96 <atan+0x3e>
 800c1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1ee:	461d      	mov	r5, r3
 800c1f0:	e6d1      	b.n	800bf96 <atan+0x3e>
 800c1f2:	a51d      	add	r5, pc, #116	; (adr r5, 800c268 <atan+0x310>)
 800c1f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1f8:	e6cd      	b.n	800bf96 <atan+0x3e>
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w
 800c200:	54442d18 	.word	0x54442d18
 800c204:	bff921fb 	.word	0xbff921fb
 800c208:	8800759c 	.word	0x8800759c
 800c20c:	7e37e43c 	.word	0x7e37e43c
 800c210:	e322da11 	.word	0xe322da11
 800c214:	3f90ad3a 	.word	0x3f90ad3a
 800c218:	24760deb 	.word	0x24760deb
 800c21c:	3fa97b4b 	.word	0x3fa97b4b
 800c220:	a0d03d51 	.word	0xa0d03d51
 800c224:	3fb10d66 	.word	0x3fb10d66
 800c228:	c54c206e 	.word	0xc54c206e
 800c22c:	3fb745cd 	.word	0x3fb745cd
 800c230:	920083ff 	.word	0x920083ff
 800c234:	3fc24924 	.word	0x3fc24924
 800c238:	5555550d 	.word	0x5555550d
 800c23c:	3fd55555 	.word	0x3fd55555
 800c240:	2c6a6c2f 	.word	0x2c6a6c2f
 800c244:	bfa2b444 	.word	0xbfa2b444
 800c248:	52defd9a 	.word	0x52defd9a
 800c24c:	3fadde2d 	.word	0x3fadde2d
 800c250:	af749a6d 	.word	0xaf749a6d
 800c254:	3fb3b0f2 	.word	0x3fb3b0f2
 800c258:	fe231671 	.word	0xfe231671
 800c25c:	3fbc71c6 	.word	0x3fbc71c6
 800c260:	9998ebc4 	.word	0x9998ebc4
 800c264:	3fc99999 	.word	0x3fc99999
 800c268:	54442d18 	.word	0x54442d18
 800c26c:	3ff921fb 	.word	0x3ff921fb
 800c270:	440fffff 	.word	0x440fffff
 800c274:	7ff00000 	.word	0x7ff00000
 800c278:	3fdbffff 	.word	0x3fdbffff
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	3ff2ffff 	.word	0x3ff2ffff
 800c284:	40038000 	.word	0x40038000
 800c288:	3ff80000 	.word	0x3ff80000
 800c28c:	bff00000 	.word	0xbff00000
 800c290:	0800c748 	.word	0x0800c748
 800c294:	0800c728 	.word	0x0800c728

0800c298 <fabs>:
 800c298:	ec51 0b10 	vmov	r0, r1, d0
 800c29c:	ee10 2a10 	vmov	r2, s0
 800c2a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2a4:	ec43 2b10 	vmov	d0, r2, r3
 800c2a8:	4770      	bx	lr
	...

0800c2ac <_init>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_fini>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	bf00      	nop
 800c2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2be:	bc08      	pop	{r3}
 800c2c0:	469e      	mov	lr, r3
 800c2c2:	4770      	bx	lr
