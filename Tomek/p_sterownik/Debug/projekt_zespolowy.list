
projekt_zespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b4d0  0800b4d0  0001b4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b970  0800b970  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b978  0800b978  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  0800bb60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800bb60  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011504  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219a  00000000  00000000  00031714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cfe  00000000  00000000  00035840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123be  00000000  00000000  0003853e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b9b  00000000  00000000  0004a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  000dd4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4b4 	.word	0x0800b4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b4b4 	.word	0x0800b4b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <stop>:
float direction = 359.5;


//Zatrzymanie silników
void stop()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2110      	movs	r1, #16
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <stop+0x34>)
 8000f66:	f002 f8b7 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <stop+0x38>)
 8000f72:	f002 f8b1 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <stop+0x3c>)
 8000f7e:	f002 f8ab 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <stop+0x3c>)
 8000f88:	f002 f8a6 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400

08000f9c <turn_right>:
    stop();
}

//Obrót w prawo (ciągły)
void turn_right()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <turn_right+0x34>)
 8000fa6:	f002 f897 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2108      	movs	r1, #8
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <turn_right+0x38>)
 8000fb0:	f002 f892 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <turn_right+0x38>)
 8000fbc:	f002 f88c 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <turn_right+0x3c>)
 8000fc8:	f002 f886 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020000 	.word	0x40020000

08000fdc <turn_left_time>:

//Obrót w lewo przez określony czas
void turn_left_time(int time)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <turn_left_time+0x48>)
 8000fea:	f002 f875 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <turn_left_time+0x4c>)
 8000ff6:	f002 f86f 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	480b      	ldr	r0, [pc, #44]	; (800102c <turn_left_time+0x50>)
 8001000:	f002 f86a 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <turn_left_time+0x48>)
 800100c:	f002 f864 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_Delay(time);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fa04 	bl	8002420 <HAL_Delay>
    stop();
 8001018:	f7ff ffa0 	bl	8000f5c <stop>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020400 	.word	0x40020400
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800

08001030 <turn_left>:

//Obrót w lewo (ciągły)
void turn_left()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <turn_left+0x34>)
 800103a:	f002 f84d 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <turn_left+0x38>)
 8001044:	f002 f848 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <turn_left+0x3c>)
 8001050:	f002 f842 	bl	80030d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <turn_left+0x34>)
 800105c:	f002 f83c 	bl	80030d8 <HAL_GPIO_WritePin>

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020000 	.word	0x40020000

08001070 <magnetometer_init>:
{
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 100);
}

void magnetometer_init()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t adres = 0x80;
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x0A, 1, &adres, 1, HAL_MAX_DELAY);
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	220a      	movs	r2, #10
 800108c:	211a      	movs	r1, #26
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <magnetometer_init+0x68>)
 8001090:	f002 f980 	bl	8003394 <HAL_I2C_Mem_Write>
    adres = 0x01;
 8001094:	2301      	movs	r3, #1
 8001096:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x0B, 1, &adres, 1, HAL_MAX_DELAY);
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2301      	movs	r3, #1
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	220b      	movs	r2, #11
 80010aa:	211a      	movs	r1, #26
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <magnetometer_init+0x68>)
 80010ae:	f002 f971 	bl	8003394 <HAL_I2C_Mem_Write>
    uint8_t rejestr = 0x1D;
 80010b2:	231d      	movs	r3, #29
 80010b4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, 0x0D<<1, 0x09, 1, &rejestr, 1, HAL_MAX_DELAY);
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2209      	movs	r2, #9
 80010c8:	211a      	movs	r1, #26
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <magnetometer_init+0x68>)
 80010cc:	f002 f962 	bl	8003394 <HAL_I2C_Mem_Write>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001fc 	.word	0x200001fc
 80010dc:	00000000 	.word	0x00000000

080010e0 <magnetometer_measure>:


//Pojedynczy pomiar
void magnetometer_measure()
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
	//HAL_Delay(3);
    HAL_I2C_Mem_Read(&hi2c1, 0x0D<<1, 0x00, 1, (uint8_t*)Data, 6, HAL_MAX_DELAY);
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2306      	movs	r3, #6
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	4b89      	ldr	r3, [pc, #548]	; (8001318 <magnetometer_measure+0x238>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2200      	movs	r2, #0
 80010f8:	211a      	movs	r1, #26
 80010fa:	4888      	ldr	r0, [pc, #544]	; (800131c <magnetometer_measure+0x23c>)
 80010fc:	f002 fa44 	bl	8003588 <HAL_I2C_Mem_Read>
    for(int i=0; i<3; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e015      	b.n	8001132 <magnetometer_measure+0x52>
    {
        rawData[i]=((int16_t)((uint16_t)Data[2*i+1] << 8) + Data[2*i]);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3301      	adds	r3, #1
 800110c:	4a82      	ldr	r2, [pc, #520]	; (8001318 <magnetometer_measure+0x238>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	497f      	ldr	r1, [pc, #508]	; (8001318 <magnetometer_measure+0x238>)
 800111a:	5ccb      	ldrb	r3, [r1, r3]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	b219      	sxth	r1, r3
 8001124:	4a7e      	ldr	r2, [pc, #504]	; (8001320 <magnetometer_measure+0x240>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<3; i++)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3301      	adds	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b02      	cmp	r3, #2
 8001136:	dde6      	ble.n	8001106 <magnetometer_measure+0x26>
    }

    scaledData[0]= ((float)rawData[0]- xoffset)/3000.0;
 8001138:	4b79      	ldr	r3, [pc, #484]	; (8001320 <magnetometer_measure+0x240>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001146:	4b77      	ldr	r3, [pc, #476]	; (8001324 <magnetometer_measure+0x244>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001328 <magnetometer_measure+0x248>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	4b72      	ldr	r3, [pc, #456]	; (800132c <magnetometer_measure+0x24c>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
    scaledData[1]= ((float)rawData[1]- yoffset)/3000.0;
 8001166:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <magnetometer_measure+0x240>)
 8001168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001174:	4b6e      	ldr	r3, [pc, #440]	; (8001330 <magnetometer_measure+0x250>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001186:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001328 <magnetometer_measure+0x248>
 800118a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118e:	4b67      	ldr	r3, [pc, #412]	; (800132c <magnetometer_measure+0x24c>)
 8001190:	edc3 7a01 	vstr	s15, [r3, #4]

    azymuth = atan2((float)scaledData[1],(float)scaledData[0]);
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <magnetometer_measure+0x24c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9dd 	bl	8000558 <__aeabi_f2d>
 800119e:	4604      	mov	r4, r0
 80011a0:	460d      	mov	r5, r1
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <magnetometer_measure+0x24c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9d6 	bl	8000558 <__aeabi_f2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	ec43 2b11 	vmov	d1, r2, r3
 80011b4:	ec45 4b10 	vmov	d0, r4, r5
 80011b8:	f009 ff02 	bl	800afc0 <atan2>
 80011bc:	ec53 2b10 	vmov	r2, r3, d0
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcf8 	bl	8000bb8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <magnetometer_measure+0x254>)
 80011cc:	6013      	str	r3, [r2, #0]

    if (azymuth < 0)
 80011ce:	4b59      	ldr	r3, [pc, #356]	; (8001334 <magnetometer_measure+0x254>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d512      	bpl.n	8001204 <magnetometer_measure+0x124>
        azymuth += 2 * M_PI;
 80011de:	4b55      	ldr	r3, [pc, #340]	; (8001334 <magnetometer_measure+0x254>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9b8 	bl	8000558 <__aeabi_f2d>
 80011e8:	a347      	add	r3, pc, #284	; (adr r3, 8001308 <magnetometer_measure+0x228>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff f855 	bl	800029c <__adddf3>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <magnetometer_measure+0x254>)
 8001202:	6013      	str	r3, [r2, #0]
    if (azymuth > 2*M_PI)
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <magnetometer_measure+0x254>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9a5 	bl	8000558 <__aeabi_f2d>
 800120e:	a33e      	add	r3, pc, #248	; (adr r3, 8001308 <magnetometer_measure+0x228>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fc88 	bl	8000b28 <__aeabi_dcmpgt>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <magnetometer_measure+0x164>
        azymuth -= 2 * M_PI;
 800121e:	4b45      	ldr	r3, [pc, #276]	; (8001334 <magnetometer_measure+0x254>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	a337      	add	r3, pc, #220	; (adr r3, 8001308 <magnetometer_measure+0x228>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f833 	bl	8000298 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcbd 	bl	8000bb8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <magnetometer_measure+0x254>)
 8001242:	6013      	str	r3, [r2, #0]

    azymuth = azymuth * 180/ M_PI;
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <magnetometer_measure+0x254>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001338 <magnetometer_measure+0x258>
 800124e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001252:	ee17 0a90 	vmov	r0, s15
 8001256:	f7ff f97f 	bl	8000558 <__aeabi_f2d>
 800125a:	a32d      	add	r3, pc, #180	; (adr r3, 8001310 <magnetometer_measure+0x230>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fafc 	bl	800085c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fca4 	bl	8000bb8 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a30      	ldr	r2, [pc, #192]	; (8001334 <magnetometer_measure+0x254>)
 8001274:	6013      	str	r3, [r2, #0]

    if (azymuth >= 0 && azymuth <= 270)
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <magnetometer_measure+0x254>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	db14      	blt.n	80012b0 <magnetometer_measure+0x1d0>
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <magnetometer_measure+0x254>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800133c <magnetometer_measure+0x25c>
 8001290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	d80a      	bhi.n	80012b0 <magnetometer_measure+0x1d0>
        azymuth = azymuth + 90.00;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <magnetometer_measure+0x254>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001340 <magnetometer_measure+0x260>
 80012a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <magnetometer_measure+0x254>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
 80012ae:	e013      	b.n	80012d8 <magnetometer_measure+0x1f8>
    else if (azymuth>270)
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <magnetometer_measure+0x254>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800133c <magnetometer_measure+0x25c>
 80012ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd09      	ble.n	80012d8 <magnetometer_measure+0x1f8>
        azymuth = azymuth - 270;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <magnetometer_measure+0x254>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800133c <magnetometer_measure+0x25c>
 80012ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <magnetometer_measure+0x254>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]

    sprintf(msg, "Azymut: %f \r\n", (float)azymuth);
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <magnetometer_measure+0x254>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4917      	ldr	r1, [pc, #92]	; (8001344 <magnetometer_measure+0x264>)
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <magnetometer_measure+0x268>)
 80012ea:	f007 fbf1 	bl	8008ad0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 80012ee:	2364      	movs	r3, #100	; 0x64
 80012f0:	221e      	movs	r2, #30
 80012f2:	4915      	ldr	r1, [pc, #84]	; (8001348 <magnetometer_measure+0x268>)
 80012f4:	4815      	ldr	r0, [pc, #84]	; (800134c <magnetometer_measure+0x26c>)
 80012f6:	f005 ff88 	bl	800720a <HAL_UART_Transmit>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdb0      	pop	{r4, r5, r7, pc}
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	54442d18 	.word	0x54442d18
 800130c:	401921fb 	.word	0x401921fb
 8001310:	54442d18 	.word	0x54442d18
 8001314:	400921fb 	.word	0x400921fb
 8001318:	200003e4 	.word	0x200003e4
 800131c:	200001fc 	.word	0x200001fc
 8001320:	200003ec 	.word	0x200003ec
 8001324:	20000422 	.word	0x20000422
 8001328:	453b8000 	.word	0x453b8000
 800132c:	200003f4 	.word	0x200003f4
 8001330:	20000424 	.word	0x20000424
 8001334:	20000400 	.word	0x20000400
 8001338:	43340000 	.word	0x43340000
 800133c:	43870000 	.word	0x43870000
 8001340:	42b40000 	.word	0x42b40000
 8001344:	0800b4d0 	.word	0x0800b4d0
 8001348:	20000404 	.word	0x20000404
 800134c:	200002e0 	.word	0x200002e0

08001350 <calibrate>:


//Kalibracja magnetometru
void calibrate()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

    float xmin,ymin,xmax,ymax;
    sprintf(msg, "Start \r\n");
 8001356:	4969      	ldr	r1, [pc, #420]	; (80014fc <calibrate+0x1ac>)
 8001358:	4869      	ldr	r0, [pc, #420]	; (8001500 <calibrate+0x1b0>)
 800135a:	f007 fbb9 	bl	8008ad0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	221e      	movs	r2, #30
 8001362:	4967      	ldr	r1, [pc, #412]	; (8001500 <calibrate+0x1b0>)
 8001364:	4867      	ldr	r0, [pc, #412]	; (8001504 <calibrate+0x1b4>)
 8001366:	f005 ff50 	bl	800720a <HAL_UART_Transmit>

    magnetometer_measure();
 800136a:	f7ff feb9 	bl	80010e0 <magnetometer_measure>
    xmin=xmax=rawData[0];
 800136e:	4b66      	ldr	r3, [pc, #408]	; (8001508 <calibrate+0x1b8>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60fb      	str	r3, [r7, #12]
    ymin=ymax=rawData[1];
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <calibrate+0x1b8>)
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	edc7 7a00 	vstr	s15, [r7]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	60bb      	str	r3, [r7, #8]
    turn_left();
 800139a:	f7ff fe49 	bl	8001030 <turn_left>

    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 800139e:	e05e      	b.n	800145e <calibrate+0x10e>

    {
        magnetometer_measure();
 80013a0:	f7ff fe9e 	bl	80010e0 <magnetometer_measure>
        if(rawData[0] < xmin)
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <calibrate+0x1b8>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd08      	ble.n	80013d2 <calibrate+0x82>
            xmin = rawData[0];
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <calibrate+0x1b8>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	edc7 7a03 	vstr	s15, [r7, #12]
        if(rawData[0] > xmax)
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <calibrate+0x1b8>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d508      	bpl.n	8001400 <calibrate+0xb0>
            xmax = rawData[0];
 80013ee:	4b46      	ldr	r3, [pc, #280]	; (8001508 <calibrate+0x1b8>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	edc7 7a01 	vstr	s15, [r7, #4]
        if(rawData[1] < ymin)
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <calibrate+0x1b8>)
 8001402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	dd08      	ble.n	800142e <calibrate+0xde>
            ymin = rawData[1];
 800141c:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <calibrate+0x1b8>)
 800141e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	edc7 7a02 	vstr	s15, [r7, #8]
        if(rawData[1] > ymax)
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <calibrate+0x1b8>)
 8001430:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ed97 7a00 	vldr	s14, [r7]
 8001440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001448:	d400      	bmi.n	800144c <calibrate+0xfc>
 800144a:	e008      	b.n	800145e <calibrate+0x10e>
            ymax = rawData[1];
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <calibrate+0x1b8>)
 800144e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145a:	edc7 7a00 	vstr	s15, [r7]
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	482a      	ldr	r0, [pc, #168]	; (800150c <calibrate+0x1bc>)
 8001464:	f001 fe20 	bl	80030a8 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d198      	bne.n	80013a0 <calibrate+0x50>
    }

    sprintf(msg, "xmin: %f \r\n", (float)xmin);
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4925      	ldr	r1, [pc, #148]	; (8001510 <calibrate+0x1c0>)
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <calibrate+0x1b0>)
 800147c:	f007 fb28 	bl	8008ad0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	221e      	movs	r2, #30
 8001484:	491e      	ldr	r1, [pc, #120]	; (8001500 <calibrate+0x1b0>)
 8001486:	481f      	ldr	r0, [pc, #124]	; (8001504 <calibrate+0x1b4>)
 8001488:	f005 febf 	bl	800720a <HAL_UART_Transmit>
    sprintf(msg, "xmax: %f \r\n", (float)xmax);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff f863 	bl	8000558 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	491f      	ldr	r1, [pc, #124]	; (8001514 <calibrate+0x1c4>)
 8001498:	4819      	ldr	r0, [pc, #100]	; (8001500 <calibrate+0x1b0>)
 800149a:	f007 fb19 	bl	8008ad0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), 100);
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	221e      	movs	r2, #30
 80014a2:	4917      	ldr	r1, [pc, #92]	; (8001500 <calibrate+0x1b0>)
 80014a4:	4817      	ldr	r0, [pc, #92]	; (8001504 <calibrate+0x1b4>)
 80014a6:	f005 feb0 	bl	800720a <HAL_UART_Transmit>

    xoffset = (xmin+xmax)/2;
 80014aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <calibrate+0x1c8>)
 80014ca:	801a      	strh	r2, [r3, #0]
    yoffset = (ymin+ymax)/2;
 80014cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d0:	edd7 7a00 	vldr	s15, [r7]
 80014d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <calibrate+0x1cc>)
 80014ec:	801a      	strh	r2, [r3, #0]
    stop();
 80014ee:	f7ff fd35 	bl	8000f5c <stop>

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800b4e0 	.word	0x0800b4e0
 8001500:	20000404 	.word	0x20000404
 8001504:	200002e0 	.word	0x200002e0
 8001508:	200003ec 	.word	0x200003ec
 800150c:	40020800 	.word	0x40020800
 8001510:	0800b4ec 	.word	0x0800b4ec
 8001514:	0800b4f8 	.word	0x0800b4f8
 8001518:	20000422 	.word	0x20000422
 800151c:	20000424 	.word	0x20000424

08001520 <magnetic_direction>:
    }
    stop();
}

void magnetic_direction()
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	af00      	add	r7, sp, #0
    magnetometer_measure();
 8001524:	f7ff fddc 	bl	80010e0 <magnetometer_measure>
    if(direction - azymuth >= 180.00)
 8001528:	4b85      	ldr	r3, [pc, #532]	; (8001740 <magnetic_direction+0x220>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <magnetic_direction+0x224>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001748 <magnetic_direction+0x228>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	db02      	blt.n	800154c <magnetic_direction+0x2c>
        turn_left();
 8001546:	f7ff fd73 	bl	8001030 <turn_left>
 800154a:	e001      	b.n	8001550 <magnetic_direction+0x30>
    else
        turn_right();
 800154c:	f7ff fd26 	bl	8000f9c <turn_right>
       			break;
           magnetometer_measure();
       }
*/

if(direction >= 1.00 && direction <= 359.00){
 8001550:	4b7b      	ldr	r3, [pc, #492]	; (8001740 <magnetic_direction+0x220>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	db42      	blt.n	80015ea <magnetic_direction+0xca>
 8001564:	4b76      	ldr	r3, [pc, #472]	; (8001740 <magnetic_direction+0x220>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800174c <magnetic_direction+0x22c>
 800156e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d838      	bhi.n	80015ea <magnetic_direction+0xca>
    while(1)
    {
    	if((azymuth <= direction + 1.00) && (azymuth >= direction - 1.00))
 8001578:	4b72      	ldr	r3, [pc, #456]	; (8001744 <magnetic_direction+0x224>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffeb 	bl	8000558 <__aeabi_f2d>
 8001582:	4604      	mov	r4, r0
 8001584:	460d      	mov	r5, r1
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <magnetic_direction+0x220>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b6e      	ldr	r3, [pc, #440]	; (8001750 <magnetic_direction+0x230>)
 8001596:	f7fe fe81 	bl	800029c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7ff faad 	bl	8000b00 <__aeabi_dcmple>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d019      	beq.n	80015e0 <magnetic_direction+0xc0>
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <magnetic_direction+0x224>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffd1 	bl	8000558 <__aeabi_f2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b61      	ldr	r3, [pc, #388]	; (8001740 <magnetic_direction+0x220>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_f2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b61      	ldr	r3, [pc, #388]	; (8001750 <magnetic_direction+0x230>)
 80015ca:	f7fe fe65 	bl	8000298 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7ff fa9d 	bl	8000b14 <__aeabi_dcmpge>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <magnetic_direction+0xc6>
    			break;
        magnetometer_measure();
 80015e0:	f7ff fd7e 	bl	80010e0 <magnetometer_measure>
    	if((azymuth <= direction + 1.00) && (azymuth >= direction - 1.00))
 80015e4:	e7c8      	b.n	8001578 <magnetic_direction+0x58>
    			break;
 80015e6:	bf00      	nop
if(direction >= 1.00 && direction <= 359.00){
 80015e8:	e0a6      	b.n	8001738 <magnetic_direction+0x218>
    }
}
else if(direction >= 0.00 && direction < 1.00){
 80015ea:	4b55      	ldr	r3, [pc, #340]	; (8001740 <magnetic_direction+0x220>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	db49      	blt.n	800168e <magnetic_direction+0x16e>
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <magnetic_direction+0x220>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d53f      	bpl.n	800168e <magnetic_direction+0x16e>
    while(1)
    {
    	if((azymuth <= direction + 1.00 ) || (azymuth >= direction - 1.00 + 360.00))
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <magnetic_direction+0x224>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffa0 	bl	8000558 <__aeabi_f2d>
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
 800161c:	4b48      	ldr	r3, [pc, #288]	; (8001740 <magnetic_direction+0x220>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff99 	bl	8000558 <__aeabi_f2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b49      	ldr	r3, [pc, #292]	; (8001750 <magnetic_direction+0x230>)
 800162c:	f7fe fe36 	bl	800029c <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7ff fa62 	bl	8000b00 <__aeabi_dcmple>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d179      	bne.n	8001736 <magnetic_direction+0x216>
 8001642:	4b40      	ldr	r3, [pc, #256]	; (8001744 <magnetic_direction+0x224>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff86 	bl	8000558 <__aeabi_f2d>
 800164c:	4604      	mov	r4, r0
 800164e:	460d      	mov	r5, r1
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <magnetic_direction+0x220>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff7f 	bl	8000558 <__aeabi_f2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <magnetic_direction+0x230>)
 8001660:	f7fe fe1a 	bl	8000298 <__aeabi_dsub>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <magnetic_direction+0x234>)
 8001672:	f7fe fe13 	bl	800029c <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7ff fa49 	bl	8000b14 <__aeabi_dcmpge>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d156      	bne.n	8001736 <magnetic_direction+0x216>
    			break;
        magnetometer_measure();
 8001688:	f7ff fd2a 	bl	80010e0 <magnetometer_measure>
    	if((azymuth <= direction + 1.00 ) || (azymuth >= direction - 1.00 + 360.00))
 800168c:	e7bf      	b.n	800160e <magnetic_direction+0xee>
    }
}
else if(direction > 359.00 && direction <= 360.00){
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <magnetic_direction+0x220>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800174c <magnetic_direction+0x22c>
 8001698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dd4a      	ble.n	8001738 <magnetic_direction+0x218>
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <magnetic_direction+0x220>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001758 <magnetic_direction+0x238>
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d840      	bhi.n	8001738 <magnetic_direction+0x218>
    while(1)
    {
    	if((azymuth <= direction + 1.00 -360.00 ) || (azymuth >= direction - 1.00))
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <magnetic_direction+0x224>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff4c 	bl	8000558 <__aeabi_f2d>
 80016c0:	4604      	mov	r4, r0
 80016c2:	460d      	mov	r5, r1
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <magnetic_direction+0x220>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff45 	bl	8000558 <__aeabi_f2d>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <magnetic_direction+0x230>)
 80016d4:	f7fe fde2 	bl	800029c <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <magnetic_direction+0x234>)
 80016e6:	f7fe fdd7 	bl	8000298 <__aeabi_dsub>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7ff fa05 	bl	8000b00 <__aeabi_dcmple>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d11d      	bne.n	8001738 <magnetic_direction+0x218>
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <magnetic_direction+0x224>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff29 	bl	8000558 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <magnetic_direction+0x220>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_f2d>
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <magnetic_direction+0x230>)
 800171a:	f7fe fdbd 	bl	8000298 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	f7ff f9f5 	bl	8000b14 <__aeabi_dcmpge>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <magnetic_direction+0x218>
    			break;
        magnetometer_measure();
 8001730:	f7ff fcd6 	bl	80010e0 <magnetometer_measure>
    	if((azymuth <= direction + 1.00 -360.00 ) || (azymuth >= direction - 1.00))
 8001734:	e7bf      	b.n	80016b6 <magnetic_direction+0x196>
else if(direction >= 0.00 && direction < 1.00){
 8001736:	bf00      	nop
    }
}

    stop();
 8001738:	f7ff fc10 	bl	8000f5c <stop>
}
 800173c:	bf00      	nop
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000400 	.word	0x20000400
 8001748:	43340000 	.word	0x43340000
 800174c:	43b38000 	.word	0x43b38000
 8001750:	3ff00000 	.word	0x3ff00000
 8001754:	40768000 	.word	0x40768000
 8001758:	43b40000 	.word	0x43b40000

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f000 fdeb 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f865 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fa29 	bl	8001bc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800176e:	f000 f8f7 	bl	8001960 <MX_TIM1_Init>
  MX_DMA_Init();
 8001772:	f000 f9fd 	bl	8001b70 <MX_DMA_Init>
  MX_I2C1_Init();
 8001776:	f000 f8c5 	bl	8001904 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800177a:	f000 f9cf 	bl	8001b1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800177e:	f000 f97f 	bl	8001a80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
   __HAL_RCC_I2C1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <main+0xd0>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a28      	ldr	r2, [pc, #160]	; (800182c <main+0xd0>)
 800178c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <main+0xd0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
   __I2C1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <main+0xd0>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <main+0xd0>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <main+0xd0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_USART2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <main+0xd0>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <main+0xd0>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <main+0xd0>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
   HAL_TIM_Base_Start_IT(&htim1);
 80017d6:	4816      	ldr	r0, [pc, #88]	; (8001830 <main+0xd4>)
 80017d8:	f004 fd04 	bl	80061e4 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017dc:	2100      	movs	r1, #0
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <main+0xd4>)
 80017e0:	f004 fdb2 	bl	8006348 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017e4:	2104      	movs	r1, #4
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <main+0xd4>)
 80017e8:	f004 fdae 	bl	8006348 <HAL_TIM_PWM_Start>

    HAL_Delay(5000);
 80017ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80017f0:	f000 fe16 	bl	8002420 <HAL_Delay>
    magnetometer_init();
 80017f4:	f7ff fc3c 	bl	8001070 <magnetometer_init>
    calibrate();
 80017f8:	f7ff fdaa 	bl	8001350 <calibrate>
    HAL_Delay(1000);
 80017fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001800:	f000 fe0e 	bl	8002420 <HAL_Delay>

    while(1){
    HAL_Delay(1000);
 8001804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001808:	f000 fe0a 	bl	8002420 <HAL_Delay>
    magnetic_direction();
 800180c:	f7ff fe88 	bl	8001520 <magnetic_direction>
    HAL_Delay(1000);
 8001810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001814:	f000 fe04 	bl	8002420 <HAL_Delay>
    turn_left_time(2000);
 8001818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800181c:	f7ff fbde 	bl	8000fdc <turn_left_time>
    HAL_Delay(1000);
 8001820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001824:	f000 fdfc 	bl	8002420 <HAL_Delay>
    HAL_Delay(1000);
 8001828:	e7ec      	b.n	8001804 <main+0xa8>
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	20000250 	.word	0x20000250

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f006 fcd2 	bl	80081ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <SystemClock_Config+0xc8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xcc>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018a4:	2308      	movs	r3, #8
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ffab 	bl	8005814 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c4:	f000 fa24 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fa0d 	bl	8005d04 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f0:	f000 fa0e 	bl	8001d10 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f001 fbe3 	bl	800310c <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f9e0 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200001fc 	.word	0x200001fc
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b092      	sub	sp, #72	; 0x48
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2220      	movs	r2, #32
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fc2e 	bl	80081ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001992:	4a3a      	ldr	r2, [pc, #232]	; (8001a7c <MX_TIM1_Init+0x11c>)
 8001994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <MX_TIM1_Init+0x118>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019bc:	482e      	ldr	r0, [pc, #184]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019be:	f004 fc73 	bl	80062a8 <HAL_TIM_PWM_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019c8:	f000 f9a2 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d8:	4619      	mov	r1, r3
 80019da:	4827      	ldr	r0, [pc, #156]	; (8001a78 <MX_TIM1_Init+0x118>)
 80019dc:	f005 faf4 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80019e6:	f000 f993 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ea:	2360      	movs	r3, #96	; 0x60
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 80019ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001a12:	f004 fe51 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a1c:	f000 f978 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	2204      	movs	r2, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001a2a:	f004 fe45 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001a34:	f000 f96c 	bl	8001d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001a5c:	f005 fb22 	bl	80070a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001a66:	f000 f953 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM1_Init+0x118>)
 8001a6c:	f000 fa18 	bl	8001ea0 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3748      	adds	r7, #72	; 0x48
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000250 	.word	0x20000250
 8001a7c:	40010000 	.word	0x40010000

08001a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <MX_TIM3_Init+0x98>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001aa4:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001ab2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001ac6:	f004 fb3d 	bl	8006144 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ad0:	f000 f91e 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001ae2:	f004 feab 	bl	800683c <HAL_TIM_ConfigClockSource>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001aec:	f000 f910 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_TIM3_Init+0x94>)
 8001afe:	f005 fa63 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b08:	f000 f902 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000298 	.word	0x20000298
 8001b18:	40000400 	.word	0x40000400

08001b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_USART2_UART_Init+0x50>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_USART2_UART_Init+0x4c>)
 8001b54:	f005 fb0c 	bl	8007170 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b5e:	f000 f8d7 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002e0 	.word	0x200002e0
 8001b6c:	40004400 	.word	0x40004400

08001b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_DMA_Init+0x4c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <MX_DMA_Init+0x4c>)
 8001b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <MX_DMA_Init+0x4c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2010      	movs	r0, #16
 8001b98:	f000 fd41 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b9c:	2010      	movs	r0, #16
 8001b9e:	f000 fd5a 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2011      	movs	r0, #17
 8001ba8:	f000 fd39 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bac:	2011      	movs	r0, #17
 8001bae:	f000 fd52 	bl	8002656 <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a3a      	ldr	r2, [pc, #232]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <MX_GPIO_Init+0x140>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001c4c:	482d      	ldr	r0, [pc, #180]	; (8001d04 <MX_GPIO_Init+0x144>)
 8001c4e:	f001 fa43 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2110      	movs	r1, #16
 8001c56:	482c      	ldr	r0, [pc, #176]	; (8001d08 <MX_GPIO_Init+0x148>)
 8001c58:	f001 fa3e 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f242 0108 	movw	r1, #8200	; 0x2008
 8001c62:	482a      	ldr	r0, [pc, #168]	; (8001d0c <MX_GPIO_Init+0x14c>)
 8001c64:	f001 fa38 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <MX_GPIO_Init+0x148>)
 8001c7e:	f001 f88f 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001c82:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481a      	ldr	r0, [pc, #104]	; (8001d04 <MX_GPIO_Init+0x144>)
 8001c9c:	f001 f880 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <MX_GPIO_Init+0x148>)
 8001cb8:	f001 f872 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_GPIO_Init+0x14c>)
 8001cd6:	f001 f863 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_GPIO_Init+0x14c>)
 8001cf2:	f001 f855 	bl	8002da0 <HAL_GPIO_Init>

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020400 	.word	0x40020400

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_I2C_MspInit+0x94>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d133      	bne.n	8001df6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dae:	2312      	movs	r3, #18
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4810      	ldr	r0, [pc, #64]	; (8001e08 <HAL_I2C_MspInit+0x9c>)
 8001dc6:	f000 ffeb 	bl	8002da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_I2C_MspInit+0x98>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	201f      	movs	r0, #31
 8001dec:	f000 fc17 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001df0:	201f      	movs	r0, #31
 8001df2:	f000 fc30 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_TIM_PWM_MspInit+0x48>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d115      	bne.n	8001e4a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_TIM_PWM_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_TIM_PWM_MspInit+0x4c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_TIM_PWM_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2019      	movs	r0, #25
 8001e40:	f000 fbed 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e44:	2019      	movs	r0, #25
 8001e46:	f000 fc06 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_TIM_Base_MspInit+0x3c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10d      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_TIM_Base_MspInit+0x40>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_TIM_Base_MspInit+0x40>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_TIM_Base_MspInit+0x40>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_TIM_MspPostInit+0x68>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11e      	bne.n	8001f00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_TIM_MspPostInit+0x6c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_TIM_MspPostInit+0x6c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_TIM_MspPostInit+0x6c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_TIM_MspPostInit+0x70>)
 8001efc:	f000 ff50 	bl	8002da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_UART_MspInit+0x150>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 8092 	bne.w	800205c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a42      	ldr	r2, [pc, #264]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_UART_MspInit+0x154>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f70:	230c      	movs	r3, #12
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f80:	2307      	movs	r3, #7
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4838      	ldr	r0, [pc, #224]	; (800206c <HAL_UART_MspInit+0x158>)
 8001f8c:	f000 ff08 	bl	8002da0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001f92:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_UART_MspInit+0x160>)
 8001f94:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001f98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fd2:	4827      	ldr	r0, [pc, #156]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fd4:	f000 fb5a 	bl	800268c <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001fde:	f7ff fe97 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_UART_MspInit+0x15c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_UART_MspInit+0x164>)
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_UART_MspInit+0x168>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_UART_MspInit+0x164>)
 8001ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_UART_MspInit+0x164>)
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_UART_MspInit+0x164>)
 800200a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_UART_MspInit+0x164>)
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_UART_MspInit+0x164>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002030:	4811      	ldr	r0, [pc, #68]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002032:	f000 fb2b 	bl	800268c <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800203c:	f7ff fe68 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_UART_MspInit+0x164>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2026      	movs	r0, #38	; 0x26
 8002052:	f000 fae4 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002056:	2026      	movs	r0, #38	; 0x26
 8002058:	f000 fafd 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40004400 	.word	0x40004400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	20000324 	.word	0x20000324
 8002074:	40026088 	.word	0x40026088
 8002078:	20000384 	.word	0x20000384
 800207c:	400260a0 	.word	0x400260a0

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 f988 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <DMA1_Stream5_IRQHandler+0x10>)
 80020da:	f000 fc17 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000324 	.word	0x20000324

080020e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA1_Stream6_IRQHandler+0x10>)
 80020ee:	f000 fc0d 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000384 	.word	0x20000384

080020fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002102:	f004 f9d1 	bl	80064a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000250 	.word	0x20000250

08002110 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <I2C1_EV_IRQHandler+0x10>)
 8002116:	f001 fc5d 	bl	80039d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001fc 	.word	0x200001fc

08002124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <USART2_IRQHandler+0x10>)
 800212a:	f005 f901 	bl	8007330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200002e0 	.word	0x200002e0

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002152:	f006 f821 	bl	8008198 <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
	return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800217a:	e7fe      	b.n	800217a <_exit+0x12>

0800217c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
	}

return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e009      	b.n	80021dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf1      	blt.n	80021c8 <_write+0x12>
	}
	return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002216:	605a      	str	r2, [r3, #4]
	return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_isatty>:

int _isatty(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
	return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f005 ff86 	bl	8008198 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20020000 	.word	0x20020000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000428 	.word	0x20000428
 80022c0:	20000440 	.word	0x20000440

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002312:	f7ff ffd7 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f005 ff45 	bl	80081a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff fa1f 	bl	800175c <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800232c:	0800b980 	.word	0x0800b980
  ldr r2, =_sbss
 8002330:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002334:	20000440 	.word	0x20000440

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f94f 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	200f      	movs	r0, #15
 800236c:	f000 f808 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fcd4 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f967 	bl	8002672 <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f000 f92f 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000004 	.word	0x20000004
 80023d8:	2000000c 	.word	0x2000000c
 80023dc:	20000008 	.word	0x20000008

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000000c 	.word	0x2000000c
 8002404:	2000042c 	.word	0x2000042c

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000042c 	.word	0x2000042c

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000000c 	.word	0x2000000c

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff feb6 	bl	8002408 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e099      	b.n	80027dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c8:	e00f      	b.n	80026ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ca:	f7ff fe9d 	bl	8002408 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d908      	bls.n	80026ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e078      	b.n	80027dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e8      	bne.n	80026ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_DMA_Init+0x158>)
 8002704:	4013      	ands	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0307 	bic.w	r3, r3, #7
 800276a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b04      	cmp	r3, #4
 800277c:	d117      	bne.n	80027ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fa89 	bl	8002ca8 <DMA_CheckFifoParam>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027aa:	2301      	movs	r3, #1
 80027ac:	e016      	b.n	80027dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa40 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80027bc:	4603      	mov	r3, r0
 80027be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	f010803f 	.word	0xf010803f

080027e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027f6:	f7ff fe07 	bl	8002408 <HAL_GetTick>
 80027fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d008      	beq.n	800281a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e052      	b.n	80028c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0216 	bic.w	r2, r2, #22
 8002828:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002838:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_DMA_Abort+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286a:	e013      	b.n	8002894 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286c:	f7ff fdcc 	bl	8002408 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b05      	cmp	r3, #5
 8002878:	d90c      	bls.n	8002894 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e015      	b.n	80028c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e4      	bne.n	800286c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	223f      	movs	r2, #63	; 0x3f
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d004      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00c      	b.n	8002900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002918:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_DMA_IRQHandler+0x248>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8e      	ldr	r2, [pc, #568]	; (8002b58 <HAL_DMA_IRQHandler+0x24c>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2208      	movs	r2, #8
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	2208      	movs	r2, #8
 8002966:	409a      	lsls	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2201      	movs	r2, #1
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	2204      	movs	r2, #4
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2210      	movs	r2, #16
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d043      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03c      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2210      	movs	r2, #16
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	e01f      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0208 	bic.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2220      	movs	r2, #32
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 808f 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8087 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d136      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0216 	bic.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x1da>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	223f      	movs	r2, #63	; 0x3f
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d07e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
        }
        return;
 8002b22:	e079      	b.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e02c      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
 8002b52:	bf00      	nop
 8002b54:	20000004 	.word	0x20000004
 8002b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e01e      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0210 	bic.w	r2, r2, #16
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d032      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d307      	bcc.n	8002bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f2      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x2cc>
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c18:	bf00      	nop
    }
  }
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2e:	b2db      	uxtb	r3, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	0800b51c 	.word	0x0800b51c

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e159      	b.n	8003070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8148 	bne.w	800306a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a2 	beq.w	800306a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a56      	ldr	r2, [pc, #344]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_GPIO_Init+0x2e8>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_GPIO_Init+0x2ec>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a49      	ldr	r2, [pc, #292]	; (8003090 <HAL_GPIO_Init+0x2f0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <HAL_GPIO_Init+0x202>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a48      	ldr	r2, [pc, #288]	; (8003094 <HAL_GPIO_Init+0x2f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0x1fe>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a47      	ldr	r2, [pc, #284]	; (8003098 <HAL_GPIO_Init+0x2f8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_Init+0x1fa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a46      	ldr	r2, [pc, #280]	; (800309c <HAL_GPIO_Init+0x2fc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x1f6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <HAL_GPIO_Init+0x300>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_Init+0x1f2>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x204>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x2ec>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_GPIO_Init+0x304>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_GPIO_Init+0x304>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f aea2 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e001      	b.n	80030ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e12b      	b.n	8003376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe fe1a 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800315e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800316e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003170:	f002 ffc0 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a81      	ldr	r2, [pc, #516]	; (8003380 <HAL_I2C_Init+0x274>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d807      	bhi.n	8003190 <HAL_I2C_Init+0x84>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <HAL_I2C_Init+0x278>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e006      	b.n	800319e <HAL_I2C_Init+0x92>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a7d      	ldr	r2, [pc, #500]	; (8003388 <HAL_I2C_Init+0x27c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a78      	ldr	r2, [pc, #480]	; (800338c <HAL_I2C_Init+0x280>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0c9b      	lsrs	r3, r3, #18
 80031b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	; (8003380 <HAL_I2C_Init+0x274>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d802      	bhi.n	80031e0 <HAL_I2C_Init+0xd4>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	e009      	b.n	80031f4 <HAL_I2C_Init+0xe8>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_I2C_Init+0x284>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	495c      	ldr	r1, [pc, #368]	; (8003380 <HAL_I2C_Init+0x274>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d819      	bhi.n	8003248 <HAL_I2C_Init+0x13c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e59      	subs	r1, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003228:	400b      	ands	r3, r1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_I2C_Init+0x138>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e59      	subs	r1, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fbb1 f3f3 	udiv	r3, r1, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	e051      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003244:	2304      	movs	r3, #4
 8003246:	e04f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d111      	bne.n	8003274 <HAL_I2C_Init+0x168>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e012      	b.n	800329a <HAL_I2C_Init+0x18e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	0099      	lsls	r1, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	fbb0 f3f3 	udiv	r3, r0, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Init+0x196>
 800329e:	2301      	movs	r3, #1
 80032a0:	e022      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10e      	bne.n	80032c8 <HAL_I2C_Init+0x1bc>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1e58      	subs	r0, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	440b      	add	r3, r1
 80032b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c6:	e00f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	0099      	lsls	r1, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6809      	ldr	r1, [r1, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6911      	ldr	r1, [r2, #16]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	4311      	orrs	r1, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	000186a0 	.word	0x000186a0
 8003384:	001e847f 	.word	0x001e847f
 8003388:	003d08ff 	.word	0x003d08ff
 800338c:	431bde83 	.word	0x431bde83
 8003390:	10624dd3 	.word	0x10624dd3

08003394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ae:	f7ff f82b 	bl	8002408 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f040 80d9 	bne.w	8003574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2319      	movs	r3, #25
 80033c8:	2201      	movs	r2, #1
 80033ca:	496d      	ldr	r1, [pc, #436]	; (8003580 <HAL_I2C_Mem_Write+0x1ec>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f001 fff7 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	e0cc      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Mem_Write+0x56>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0c5      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d007      	beq.n	8003410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2221      	movs	r2, #33	; 0x21
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	; 0x40
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_I2C_Mem_Write+0x1f0>)
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003452:	88f8      	ldrh	r0, [r7, #6]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4603      	mov	r3, r0
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f001 fd86 	bl	8004f74 <I2C_RequestMemoryWrite>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d052      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e081      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f002 f878 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06b      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_I2C_Mem_Write+0x180>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d017      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1aa      	bne.n	8003472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f002 f864 	bl	80055ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e016      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000

08003588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	461a      	mov	r2, r3
 8003596:	4603      	mov	r3, r0
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	460b      	mov	r3, r1
 800359c:	813b      	strh	r3, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a2:	f7fe ff31 	bl	8002408 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	f040 8208 	bne.w	80039c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2319      	movs	r3, #25
 80035bc:	2201      	movs	r2, #1
 80035be:	497b      	ldr	r1, [pc, #492]	; (80037ac <HAL_I2C_Mem_Read+0x224>)
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f001 fefd 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	e1fb      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_I2C_Mem_Read+0x56>
 80035da:	2302      	movs	r3, #2
 80035dc:	e1f4      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d007      	beq.n	8003604 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2222      	movs	r2, #34	; 0x22
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a5b      	ldr	r2, [pc, #364]	; (80037b0 <HAL_I2C_Mem_Read+0x228>)
 8003644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003646:	88f8      	ldrh	r0, [r7, #6]
 8003648:	893a      	ldrh	r2, [r7, #8]
 800364a:	8979      	ldrh	r1, [r7, #10]
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	4603      	mov	r3, r0
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f001 fd22 	bl	80050a0 <I2C_RequestMemoryRead>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1b0      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e184      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b01      	cmp	r3, #1
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e164      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d11b      	bne.n	8003716 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	e144      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800372c:	e138      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	2b03      	cmp	r3, #3
 8003734:	f200 80f1 	bhi.w	800391a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	2b01      	cmp	r3, #1
 800373e:	d123      	bne.n	8003788 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f001 ffc5 	bl	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e139      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003786:	e10b      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	2b02      	cmp	r3, #2
 800378e:	d14e      	bne.n	800382e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2200      	movs	r2, #0
 8003798:	4906      	ldr	r1, [pc, #24]	; (80037b4 <HAL_I2C_Mem_Read+0x22c>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f001 fe10 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e10e      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
 80037aa:	bf00      	nop
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000
 80037b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800382c:	e0b8      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	4966      	ldr	r1, [pc, #408]	; (80039d0 <HAL_I2C_Mem_Read+0x448>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f001 fdc1 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0bf      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2200      	movs	r2, #0
 8003892:	494f      	ldr	r1, [pc, #316]	; (80039d0 <HAL_I2C_Mem_Read+0x448>)
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f001 fd93 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e091      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003918:	e042      	b.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f001 fed8 	bl	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e04c      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d118      	bne.n	80039a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f aec2 	bne.w	800372e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	00010004 	.word	0x00010004

080039d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d003      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0x38>
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	f040 80c1 	bne.w	8003b8e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a2c:	d003      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x62>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_EV_IRQHandler+0x66>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_EV_IRQHandler+0x68>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f000 8132 	beq.w	8003ca6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x92>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	0a5b      	lsrs	r3, r3, #9
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f001 fec0 	bl	80057de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fcdc 	bl	800441c <I2C_Master_SB>
 8003a64:	e092      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_I2C_EV_IRQHandler+0xb2>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	0a5b      	lsrs	r3, r3, #9
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fd52 	bl	8004528 <I2C_Master_ADD10>
 8003a84:	e082      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fd6c 	bl	800457c <I2C_Master_ADDR>
 8003aa4:	e072      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d03b      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac0:	f000 80f3 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f94c 	bl	8003d86 <I2C_MasterTransmit_TXE>
 8003aee:	e04d      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80d6 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	0a5b      	lsrs	r3, r3, #9
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80cf 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	2b21      	cmp	r3, #33	; 0x21
 8003b10:	d103      	bne.n	8003b1a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9d3 	bl	8003ebe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b18:	e0c7      	b.n	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	f040 80c4 	bne.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa41 	bl	8003faa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b28:	e0bf      	b.n	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	f000 80b7 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00f      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x194>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x194>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fab6 	bl	80040d2 <I2C_MasterReceive_RXNE>
 8003b66:	e011      	b.n	8003b8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 809a 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	0a5b      	lsrs	r3, r3, #9
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8093 	beq.w	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fb5f 	bl	8004248 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b8a:	e08e      	b.n	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b8c:	e08d      	b.n	8003caa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e007      	b.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	0a5b      	lsrs	r3, r3, #9
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00c      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 ff1d 	bl	8004a1a <I2C_Slave_ADDR>
 8003be0:	e066      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x22e>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	0a5b      	lsrs	r3, r3, #9
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 ff58 	bl	8004ab0 <I2C_Slave_STOPF>
 8003c00:	e056      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c02:	7bbb      	ldrb	r3, [r7, #14]
 8003c04:	2b21      	cmp	r3, #33	; 0x21
 8003c06:	d002      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x23a>
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	2b29      	cmp	r3, #41	; 0x29
 8003c0c:	d125      	bne.n	8003c5a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	09db      	lsrs	r3, r3, #7
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00f      	beq.n	8003c3a <HAL_I2C_EV_IRQHandler+0x266>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	0a9b      	lsrs	r3, r3, #10
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_I2C_EV_IRQHandler+0x266>
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fe33 	bl	800489e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c38:	e039      	b.n	8003cae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d033      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x2da>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	0a5b      	lsrs	r3, r3, #9
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02d      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fe60 	bl	8004918 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c58:	e029      	b.n	8003cae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00f      	beq.n	8003c86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	0a9b      	lsrs	r3, r3, #10
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fe6b 	bl	800495a <I2C_SlaveReceive_RXNE>
 8003c84:	e014      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	0a5b      	lsrs	r3, r3, #9
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fe99 	bl	80049d6 <I2C_SlaveReceive_BTF>
 8003ca4:	e004      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	4613      	mov	r3, r2
 8003d14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d150      	bne.n	8003e4e <I2C_MasterTransmit_TXE+0xc8>
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b21      	cmp	r3, #33	; 0x21
 8003db0:	d14d      	bne.n	8003e4e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d01d      	beq.n	8003df4 <I2C_MasterTransmit_TXE+0x6e>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d01a      	beq.n	8003df4 <I2C_MasterTransmit_TXE+0x6e>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dc4:	d016      	beq.n	8003df4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2211      	movs	r2, #17
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff62 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df2:	e060      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e02:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e12:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d107      	bne.n	8003e3e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff7d 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e3c:	e03b      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff35 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4c:	e033      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b21      	cmp	r3, #33	; 0x21
 8003e52:	d005      	beq.n	8003e60 <I2C_MasterTransmit_TXE+0xda>
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d12d      	bne.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b22      	cmp	r3, #34	; 0x22
 8003e5e:	d12a      	bne.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e7a:	e01c      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d103      	bne.n	8003e90 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f88e 	bl	8003faa <I2C_MemoryTransmit_TXE_BTF>
}
 8003e8e:	e012      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eb4:	e7ff      	b.n	8003eb6 <I2C_MasterTransmit_TXE+0x130>
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b21      	cmp	r3, #33	; 0x21
 8003ed6:	d164      	bne.n	8003fa2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d012      	beq.n	8003f08 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f06:	e04c      	b.n	8003fa2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d01d      	beq.n	8003f4a <I2C_MasterTransmit_BTF+0x8c>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d01a      	beq.n	8003f4a <I2C_MasterTransmit_BTF+0x8c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f1a:	d016      	beq.n	8003f4a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f2a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2211      	movs	r2, #17
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff feb7 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003f48:	e02b      	b.n	8003fa2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f58:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d107      	bne.n	8003f94 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fed2 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
}
 8003f92:	e006      	b.n	8003fa2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe8a 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11d      	bne.n	8003ffe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10b      	bne.n	8003fe2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	1c9a      	adds	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003fe0:	e073      	b.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	121b      	asrs	r3, r3, #8
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ffc:	e065      	b.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10b      	bne.n	800401e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	b2da      	uxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800401c:	e055      	b.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	2b02      	cmp	r3, #2
 8004024:	d151      	bne.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	2b22      	cmp	r3, #34	; 0x22
 800402a:	d10d      	bne.n	8004048 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004046:	e040      	b.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d112      	bne.n	800407e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800407c:	e025      	b.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d120      	bne.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b21      	cmp	r3, #33	; 0x21
 800408c:	d11d      	bne.n	80040ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe36 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b22      	cmp	r3, #34	; 0x22
 80040e4:	f040 80ac 	bne.w	8004240 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d921      	bls.n	800413a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b03      	cmp	r3, #3
 8004124:	f040 808c 	bne.w	8004240 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004136:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004138:	e082      	b.n	8004240 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	2b02      	cmp	r3, #2
 8004140:	d075      	beq.n	800422e <I2C_MasterReceive_RXNE+0x15c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <I2C_MasterReceive_RXNE+0x7c>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d16f      	bne.n	800422e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 fa8e 	bl	8005670 <I2C_WaitOnSTOPRequestThroughIT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d142      	bne.n	80041e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004178:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d10a      	bne.n	80041ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fdc1 	bl	8003d4a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041c8:	e03a      	b.n	8004240 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2212      	movs	r2, #18
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fd76 	bl	8003cca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041de:	e02f      	b.n	8004240 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fd99 	bl	8003d5e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800422c:	e008      	b.n	8004240 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423c:	605a      	str	r2, [r3, #4]
}
 800423e:	e7ff      	b.n	8004240 <I2C_MasterReceive_RXNE+0x16e>
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b04      	cmp	r3, #4
 800425e:	d11b      	bne.n	8004298 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004296:	e0bd      	b.n	8004414 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d129      	bne.n	80042f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d00a      	beq.n	80042ce <I2C_MasterReceive_BTF+0x86>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d007      	beq.n	80042ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042f4:	e08e      	b.n	8004414 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d176      	bne.n	80043ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <I2C_MasterReceive_BTF+0xc4>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b10      	cmp	r3, #16
 800430a:	d108      	bne.n	800431e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e019      	b.n	8004352 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d002      	beq.n	800432a <I2C_MasterReceive_BTF+0xe2>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d108      	bne.n	800433c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e00a      	b.n	8004352 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d007      	beq.n	8004352 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d10a      	bne.n	80043d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fcba 	bl	8003d4a <HAL_I2C_MemRxCpltCallback>
}
 80043d6:	e01d      	b.n	8004414 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2212      	movs	r2, #18
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fc6f 	bl	8003cca <HAL_I2C_MasterRxCpltCallback>
}
 80043ec:	e012      	b.n	8004414 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d117      	bne.n	8004460 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004448:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800444a:	e067      	b.n	800451c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	611a      	str	r2, [r3, #16]
}
 800445e:	e05d      	b.n	800451c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004468:	d133      	bne.n	80044d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d109      	bne.n	800448a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004486:	611a      	str	r2, [r3, #16]
 8004488:	e008      	b.n	800449c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <I2C_Master_SB+0x92>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d032      	beq.n	800451c <I2C_Master_SB+0x100>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02d      	beq.n	800451c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ce:	605a      	str	r2, [r3, #4]
}
 80044d0:	e024      	b.n	800451c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	b29b      	uxth	r3, r3
 80044e0:	11db      	asrs	r3, r3, #7
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0306 	and.w	r3, r3, #6
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f063 030f 	orn	r3, r3, #15
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	611a      	str	r2, [r3, #16]
}
 80044f6:	e011      	b.n	800451c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10d      	bne.n	800451c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	b29b      	uxth	r3, r3
 8004506:	11db      	asrs	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f063 030e 	orn	r3, r3, #14
 8004514:	b2da      	uxtb	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	b2da      	uxtb	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <I2C_Master_ADD10+0x26>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <I2C_Master_ADD10+0x48>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456e:	605a      	str	r2, [r3, #4]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800457c:	b480      	push	{r7}
 800457e:	b091      	sub	sp, #68	; 0x44
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b22      	cmp	r3, #34	; 0x22
 80045a4:	f040 8169 	bne.w	800487a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <I2C_Master_ADDR+0x54>
 80045b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d10b      	bne.n	80045d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	633b      	str	r3, [r7, #48]	; 0x30
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	e160      	b.n	8004892 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11d      	bne.n	8004614 <I2C_Master_ADDR+0x98>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045e0:	d118      	bne.n	8004614 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	651a      	str	r2, [r3, #80]	; 0x50
 8004612:	e13e      	b.n	8004892 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d113      	bne.n	8004646 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e115      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 808a 	bne.w	8004766 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004658:	d137      	bne.n	80046ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004668:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004678:	d113      	bne.n	80046a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004688:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	e0e7      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e0d3      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d02e      	beq.n	800472e <I2C_Master_ADDR+0x1b2>
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d02b      	beq.n	800472e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	2b12      	cmp	r3, #18
 80046da:	d102      	bne.n	80046e2 <I2C_Master_ADDR+0x166>
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d125      	bne.n	800472e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d00e      	beq.n	8004706 <I2C_Master_ADDR+0x18a>
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d00b      	beq.n	8004706 <I2C_Master_ADDR+0x18a>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d008      	beq.n	8004706 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e007      	b.n	8004716 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	e0a1      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e085      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d14d      	bne.n	800480c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	2b04      	cmp	r3, #4
 8004774:	d016      	beq.n	80047a4 <I2C_Master_ADDR+0x228>
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	2b02      	cmp	r3, #2
 800477a:	d013      	beq.n	80047a4 <I2C_Master_ADDR+0x228>
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	2b10      	cmp	r3, #16
 8004780:	d010      	beq.n	80047a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e007      	b.n	80047b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d117      	bne.n	80047f4 <I2C_Master_ADDR+0x278>
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047ca:	d00b      	beq.n	80047e4 <I2C_Master_ADDR+0x268>
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d008      	beq.n	80047e4 <I2C_Master_ADDR+0x268>
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d005      	beq.n	80047e4 <I2C_Master_ADDR+0x268>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2b10      	cmp	r3, #16
 80047dc:	d002      	beq.n	80047e4 <I2C_Master_ADDR+0x268>
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d107      	bne.n	80047f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	e032      	b.n	8004872 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800481a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d117      	bne.n	800485c <I2C_Master_ADDR+0x2e0>
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004832:	d00b      	beq.n	800484c <I2C_Master_ADDR+0x2d0>
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	2b01      	cmp	r3, #1
 8004838:	d008      	beq.n	800484c <I2C_Master_ADDR+0x2d0>
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b08      	cmp	r3, #8
 800483e:	d005      	beq.n	800484c <I2C_Master_ADDR+0x2d0>
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	2b10      	cmp	r3, #16
 8004844:	d002      	beq.n	800484c <I2C_Master_ADDR+0x2d0>
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b20      	cmp	r3, #32
 800484a:	d107      	bne.n	800485c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800485a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004878:	e00b      	b.n	8004892 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	e7ff      	b.n	8004892 <I2C_Master_ADDR+0x316>
 8004892:	bf00      	nop
 8004894:	3744      	adds	r7, #68	; 0x44
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02b      	beq.n	8004910 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d114      	bne.n	8004910 <I2C_SlaveTransmit_TXE+0x72>
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b29      	cmp	r3, #41	; 0x29
 80048ea:	d111      	bne.n	8004910 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2221      	movs	r2, #33	; 0x21
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2228      	movs	r2, #40	; 0x28
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff f9e7 	bl	8003cde <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02c      	beq.n	80049ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d114      	bne.n	80049ce <I2C_SlaveReceive_RXNE+0x74>
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b2a      	cmp	r3, #42	; 0x2a
 80049a8:	d111      	bne.n	80049ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2222      	movs	r2, #34	; 0x22
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2228      	movs	r2, #40	; 0x28
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff f992 	bl	8003cf2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a34:	2b28      	cmp	r3, #40	; 0x28
 8004a36:	d127      	bne.n	8004a88 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a46:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	089b      	lsrs	r3, r3, #2
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	81bb      	strh	r3, [r7, #12]
 8004a6a:	e002      	b.n	8004a72 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a7a:	89ba      	ldrh	r2, [r7, #12]
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff f940 	bl	8003d06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a86:	e00e      	b.n	8004aa6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ace:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0c:	d172      	bne.n	8004bf4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b22      	cmp	r3, #34	; 0x22
 8004b12:	d002      	beq.n	8004b1a <I2C_Slave_STOPF+0x6a>
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d135      	bne.n	8004b86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe f864 	bl	8002c20 <HAL_DMA_GetState>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d049      	beq.n	8004bf2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	4a69      	ldr	r2, [pc, #420]	; (8004d08 <I2C_Slave_STOPF+0x258>)
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd feac 	bl	80028c8 <HAL_DMA_Abort_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d03d      	beq.n	8004bf2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b80:	4610      	mov	r0, r2
 8004b82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b84:	e035      	b.n	8004bf2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe f82e 	bl	8002c20 <HAL_DMA_GetState>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d014      	beq.n	8004bf4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	4a4e      	ldr	r2, [pc, #312]	; (8004d08 <I2C_Slave_STOPF+0x258>)
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd fe76 	bl	80028c8 <HAL_DMA_Abort_IT>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
 8004bf0:	e000      	b.n	8004bf4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bf2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03e      	beq.n	8004c7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d112      	bne.n	8004c32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d112      	bne.n	8004c66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0204 	orr.w	r2, r3, #4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f843 	bl	8004d10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c8a:	e039      	b.n	8004d00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c90:	d109      	bne.n	8004ca6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2228      	movs	r2, #40	; 0x28
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff f826 	bl	8003cf2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b28      	cmp	r3, #40	; 0x28
 8004cb0:	d111      	bne.n	8004cd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <I2C_Slave_STOPF+0x25c>)
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff f827 	bl	8003d22 <HAL_I2C_ListenCpltCallback>
}
 8004cd4:	e014      	b.n	8004d00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	2b22      	cmp	r3, #34	; 0x22
 8004cdc:	d002      	beq.n	8004ce4 <I2C_Slave_STOPF+0x234>
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b22      	cmp	r3, #34	; 0x22
 8004ce2:	d10d      	bne.n	8004d00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fe fff9 	bl	8003cf2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08005271 	.word	0x08005271
 8004d0c:	ffff0000 	.word	0xffff0000

08004d10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d28:	7bbb      	ldrb	r3, [r7, #14]
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d002      	beq.n	8004d34 <I2C_ITError+0x24>
 8004d2e:	7bbb      	ldrb	r3, [r7, #14]
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10a      	bne.n	8004d4a <I2C_ITError+0x3a>
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b22      	cmp	r3, #34	; 0x22
 8004d38:	d107      	bne.n	8004d4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d50:	2b28      	cmp	r3, #40	; 0x28
 8004d52:	d107      	bne.n	8004d64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2228      	movs	r2, #40	; 0x28
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d62:	e015      	b.n	8004d90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d00a      	beq.n	8004d8a <I2C_ITError+0x7a>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b60      	cmp	r3, #96	; 0x60
 8004d78:	d007      	beq.n	8004d8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d162      	bne.n	8004e66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d020      	beq.n	8004e00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	4a6a      	ldr	r2, [pc, #424]	; (8004f6c <I2C_ITError+0x25c>)
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fd7c 	bl	80028c8 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8089 	beq.w	8004eea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4798      	blx	r3
 8004dfe:	e074      	b.n	8004eea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	4a59      	ldr	r2, [pc, #356]	; (8004f6c <I2C_ITError+0x25c>)
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fd fd5b 	bl	80028c8 <HAL_DMA_Abort_IT>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d068      	beq.n	8004eea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d10b      	bne.n	8004e3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e60:	4610      	mov	r0, r2
 8004e62:	4798      	blx	r3
 8004e64:	e041      	b.n	8004eea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b60      	cmp	r3, #96	; 0x60
 8004e70:	d125      	bne.n	8004ebe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d10b      	bne.n	8004ea6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fe ff5b 	bl	8003d72 <HAL_I2C_AbortCpltCallback>
 8004ebc:	e015      	b.n	8004eea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d10b      	bne.n	8004ee4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fe ff3a 	bl	8003d5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10e      	bne.n	8004f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d113      	bne.n	8004f64 <I2C_ITError+0x254>
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b28      	cmp	r3, #40	; 0x28
 8004f40:	d110      	bne.n	8004f64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <I2C_ITError+0x260>)
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fe fedf 	bl	8003d22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08005271 	.word	0x08005271
 8004f70:	ffff0000 	.word	0xffff0000

08004f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	461a      	mov	r2, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	817b      	strh	r3, [r7, #10]
 8004f86:	460b      	mov	r3, r1
 8004f88:	813b      	strh	r3, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa08 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc4:	d103      	bne.n	8004fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e05f      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	492d      	ldr	r1, [pc, #180]	; (800509c <I2C_RequestMemoryWrite+0x128>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fa40 	bl	800546e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04c      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 faaa 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e02b      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	e021      	b.n	8005090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fa84 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e005      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00010002 	.word	0x00010002

080050a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	460b      	mov	r3, r1
 80050b4:	813b      	strh	r3, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f96a 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005100:	d103      	bne.n	800510a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0aa      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800511c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	4952      	ldr	r1, [pc, #328]	; (800526c <I2C_RequestMemoryRead+0x1cc>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f9a2 	bl	800546e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e097      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fa0c 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d107      	bne.n	8005172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e076      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]
 8005186:	e021      	b.n	80051cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005188:	893b      	ldrh	r3, [r7, #8]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b29b      	uxth	r3, r3
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	6a39      	ldr	r1, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f9e6 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e050      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c2:	893b      	ldrh	r3, [r7, #8]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f9cb 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d107      	bne.n	80051f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e035      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	2200      	movs	r2, #0
 8005210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f8d3 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522e:	d103      	bne.n	8005238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e013      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	4906      	ldr	r1, [pc, #24]	; (800526c <I2C_RequestMemoryRead+0x1cc>)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f90b 	bl	800546e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	00010002 	.word	0x00010002

08005270 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800528a:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <I2C_DMAAbort+0x148>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	08db      	lsrs	r3, r3, #3
 8005290:	4a4a      	ldr	r2, [pc, #296]	; (80053bc <I2C_DMAAbort+0x14c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a1a      	lsrs	r2, r3, #8
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00da      	lsls	r2, r3, #3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80052b6:	e00a      	b.n	80052ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d0ea      	beq.n	80052a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	2200      	movs	r2, #0
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	2200      	movs	r2, #0
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	2200      	movs	r2, #0
 8005312:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	2200      	movs	r2, #0
 8005322:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b60      	cmp	r3, #96	; 0x60
 800533e:	d10e      	bne.n	800535e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7fe fd0b 	bl	8003d72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800535c:	e027      	b.n	80053ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005364:	2b28      	cmp	r3, #40	; 0x28
 8005366:	d117      	bne.n	8005398 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005386:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2228      	movs	r2, #40	; 0x28
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005396:	e007      	b.n	80053a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053a8:	6978      	ldr	r0, [r7, #20]
 80053aa:	f7fe fcd8 	bl	8003d5e <HAL_I2C_ErrorCallback>
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000004 	.word	0x20000004
 80053bc:	14f8b589 	.word	0x14f8b589

080053c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d0:	e025      	b.n	800541e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d021      	beq.n	800541e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fd f815 	bl	8002408 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d116      	bne.n	800541e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e023      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d10d      	bne.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	43da      	mvns	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	e00c      	b.n	800545e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	43da      	mvns	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d0b6      	beq.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800547c:	e051      	b.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d123      	bne.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e046      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d021      	beq.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fc ff93 	bl	8002408 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d116      	bne.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e020      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10c      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	43da      	mvns	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	bf14      	ite	ne
 800553e:	2301      	movne	r3, #1
 8005540:	2300      	moveq	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	e00b      	b.n	800555e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	43da      	mvns	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4013      	ands	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d18d      	bne.n	800547e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005578:	e02d      	b.n	80055d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f900 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e02d      	b.n	80055e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d021      	beq.n	80055d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fc ff39 	bl	8002408 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d116      	bne.n	80055d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e007      	b.n	80055e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b80      	cmp	r3, #128	; 0x80
 80055e2:	d1ca      	bne.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055fa:	e02d      	b.n	8005658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f8bf 	bl	8005780 <I2C_IsAcknowledgeFailed>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e02d      	b.n	8005668 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d021      	beq.n	8005658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fc fef8 	bl	8002408 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d116      	bne.n	8005658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b04      	cmp	r3, #4
 8005664:	d1ca      	bne.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	0a1a      	lsrs	r2, r3, #8
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b01      	subs	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e008      	b.n	80056c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d0e9      	beq.n	8005692 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000004 	.word	0x20000004
 80056d0:	14f8b589 	.word	0x14f8b589

080056d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056e0:	e042      	b.n	8005768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d119      	bne.n	8005724 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0210 	mvn.w	r2, #16
 80056f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e029      	b.n	8005778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005724:	f7fc fe70 	bl	8002408 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d116      	bne.n	8005768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e007      	b.n	8005778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d1b5      	bne.n	80056e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d11b      	bne.n	80057d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057ee:	d103      	bne.n	80057f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057f6:	e007      	b.n	8005808 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005800:	d102      	bne.n	8005808 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2208      	movs	r2, #8
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e267      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d075      	beq.n	800591e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005832:	4b88      	ldr	r3, [pc, #544]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b04      	cmp	r3, #4
 800583c:	d00c      	beq.n	8005858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583e:	4b85      	ldr	r3, [pc, #532]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005846:	2b08      	cmp	r3, #8
 8005848:	d112      	bne.n	8005870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800584a:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005856:	d10b      	bne.n	8005870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	4b7e      	ldr	r3, [pc, #504]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d05b      	beq.n	800591c <HAL_RCC_OscConfig+0x108>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d157      	bne.n	800591c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e242      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d106      	bne.n	8005888 <HAL_RCC_OscConfig+0x74>
 800587a:	4b76      	ldr	r3, [pc, #472]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a75      	ldr	r2, [pc, #468]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e01d      	b.n	80058c4 <HAL_RCC_OscConfig+0xb0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x98>
 8005892:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6f      	ldr	r2, [pc, #444]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b6d      	ldr	r3, [pc, #436]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6c      	ldr	r2, [pc, #432]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e00b      	b.n	80058c4 <HAL_RCC_OscConfig+0xb0>
 80058ac:	4b69      	ldr	r3, [pc, #420]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a68      	ldr	r2, [pc, #416]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	4b66      	ldr	r3, [pc, #408]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a65      	ldr	r2, [pc, #404]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc fd9c 	bl	8002408 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fc fd98 	bl	8002408 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e207      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	4b5b      	ldr	r3, [pc, #364]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0xc0>
 80058f2:	e014      	b.n	800591e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fc fd88 	bl	8002408 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fc fd84 	bl	8002408 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e1f3      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590e:	4b51      	ldr	r3, [pc, #324]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0xe8>
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800592a:	4b4a      	ldr	r3, [pc, #296]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005936:	4b47      	ldr	r3, [pc, #284]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593e:	2b08      	cmp	r3, #8
 8005940:	d11c      	bne.n	800597c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005942:	4b44      	ldr	r3, [pc, #272]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d116      	bne.n	800597c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594e:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_RCC_OscConfig+0x152>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d001      	beq.n	8005966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e1c7      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005966:	4b3b      	ldr	r3, [pc, #236]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4937      	ldr	r1, [pc, #220]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800597a:	e03a      	b.n	80059f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005984:	4b34      	ldr	r3, [pc, #208]	; (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc fd3d 	bl	8002408 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005992:	f7fc fd39 	bl	8002408 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e1a8      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a4:	4b2b      	ldr	r3, [pc, #172]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b28      	ldr	r3, [pc, #160]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4925      	ldr	r1, [pc, #148]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
 80059c4:	e015      	b.n	80059f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fd1c 	bl	8002408 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fc fd18 	bl	8002408 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e187      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e6:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d036      	beq.n	8005a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_RCC_OscConfig+0x248>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc fcfc 	bl	8002408 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a14:	f7fc fcf8 	bl	8002408 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e167      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0x200>
 8005a32:	e01b      	b.n	8005a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_RCC_OscConfig+0x248>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3a:	f7fc fce5 	bl	8002408 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a40:	e00e      	b.n	8005a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a42:	f7fc fce1 	bl	8002408 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d907      	bls.n	8005a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e150      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
 8005a54:	40023800 	.word	0x40023800
 8005a58:	42470000 	.word	0x42470000
 8005a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	4b88      	ldr	r3, [pc, #544]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ea      	bne.n	8005a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8097 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b81      	ldr	r3, [pc, #516]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a7c      	ldr	r2, [pc, #496]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a98:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9a:	4b7a      	ldr	r3, [pc, #488]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b77      	ldr	r3, [pc, #476]	; (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d118      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab6:	4b74      	ldr	r3, [pc, #464]	; (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a73      	ldr	r2, [pc, #460]	; (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fc fca1 	bl	8002408 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aca:	f7fc fc9d 	bl	8002408 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e10c      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	4b6a      	ldr	r3, [pc, #424]	; (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x2ea>
 8005af0:	4b64      	ldr	r3, [pc, #400]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a63      	ldr	r2, [pc, #396]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
 8005afc:	e01c      	b.n	8005b38 <HAL_RCC_OscConfig+0x324>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x30c>
 8005b06:	4b5f      	ldr	r3, [pc, #380]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	4a5e      	ldr	r2, [pc, #376]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	f043 0304 	orr.w	r3, r3, #4
 8005b10:	6713      	str	r3, [r2, #112]	; 0x70
 8005b12:	4b5c      	ldr	r3, [pc, #368]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a5b      	ldr	r2, [pc, #364]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1e:	e00b      	b.n	8005b38 <HAL_RCC_OscConfig+0x324>
 8005b20:	4b58      	ldr	r3, [pc, #352]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a57      	ldr	r2, [pc, #348]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2c:	4b55      	ldr	r3, [pc, #340]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	4a54      	ldr	r2, [pc, #336]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b32:	f023 0304 	bic.w	r3, r3, #4
 8005b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b40:	f7fc fc62 	bl	8002408 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b48:	f7fc fc5e 	bl	8002408 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e0cb      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5e:	4b49      	ldr	r3, [pc, #292]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0ee      	beq.n	8005b48 <HAL_RCC_OscConfig+0x334>
 8005b6a:	e014      	b.n	8005b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b6c:	f7fc fc4c 	bl	8002408 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b72:	e00a      	b.n	8005b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fc fc48 	bl	8002408 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e0b5      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1ee      	bne.n	8005b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9c:	4b39      	ldr	r3, [pc, #228]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	4a38      	ldr	r2, [pc, #224]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80a1 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bb2:	4b34      	ldr	r3, [pc, #208]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d05c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d141      	bne.n	8005c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc6:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fc fc1c 	bl	8002408 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7fc fc18 	bl	8002408 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e087      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	041b      	lsls	r3, r3, #16
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	061b      	lsls	r3, r3, #24
 8005c16:	491b      	ldr	r1, [pc, #108]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fc fbf1 	bl	8002408 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2a:	f7fc fbed 	bl	8002408 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e05c      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x416>
 8005c48:	e054      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fc fbda 	bl	8002408 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fc fbd6 	bl	8002408 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e045      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x444>
 8005c76:	e03d      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e038      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <HAL_RCC_OscConfig+0x4ec>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d028      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d121      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d11a      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d111      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800

08005d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0cc      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d18:	4b68      	ldr	r3, [pc, #416]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90c      	bls.n	8005d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d26:	4b65      	ldr	r3, [pc, #404]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2e:	4b63      	ldr	r3, [pc, #396]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0b8      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d58:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	4a58      	ldr	r2, [pc, #352]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d70:	4b53      	ldr	r3, [pc, #332]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a52      	ldr	r2, [pc, #328]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7c:	4b50      	ldr	r3, [pc, #320]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	494d      	ldr	r1, [pc, #308]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d044      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d107      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d119      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e07f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d003      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc2:	4b3f      	ldr	r3, [pc, #252]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e06f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd2:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e067      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f023 0203 	bic.w	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4934      	ldr	r1, [pc, #208]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df4:	f7fc fb08 	bl	8002408 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	e00a      	b.n	8005e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfc:	f7fc fb04 	bl	8002408 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e04f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 020c 	and.w	r2, r3, #12
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1eb      	bne.n	8005dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e24:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d20c      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b22      	ldr	r3, [pc, #136]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e032      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e58:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4916      	ldr	r1, [pc, #88]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e76:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	490e      	ldr	r1, [pc, #56]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e8a:	f000 f821 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	490a      	ldr	r1, [pc, #40]	; (8005ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e9c:	5ccb      	ldrb	r3, [r1, r3]
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <HAL_RCC_ClockConfig+0x1c8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc fa68 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023c00 	.word	0x40023c00
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	0800b504 	.word	0x0800b504
 8005ec8:	20000004 	.word	0x20000004
 8005ecc:	20000008 	.word	0x20000008

08005ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed4:	b094      	sub	sp, #80	; 0x50
 8005ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44
 8005edc:	2300      	movs	r3, #0
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee8:	4b79      	ldr	r3, [pc, #484]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d00d      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0x40>
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	f200 80e1 	bhi.w	80060bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_RCC_GetSysClockFreq+0x34>
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f02:	e0db      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f04:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f08:	e0db      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f0a:	4b73      	ldr	r3, [pc, #460]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f0e:	e0d8      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f10:	4b6f      	ldr	r3, [pc, #444]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f1a:	4b6d      	ldr	r3, [pc, #436]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d063      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f26:	4b6a      	ldr	r3, [pc, #424]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	099b      	lsrs	r3, r3, #6
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	f04f 0000 	mov.w	r0, #0
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	0159      	lsls	r1, r3, #5
 8005f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f54:	0150      	lsls	r0, r2, #5
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	1a51      	subs	r1, r2, r1
 8005f5e:	6139      	str	r1, [r7, #16]
 8005f60:	4629      	mov	r1, r5
 8005f62:	eb63 0301 	sbc.w	r3, r3, r1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f74:	4659      	mov	r1, fp
 8005f76:	018b      	lsls	r3, r1, #6
 8005f78:	4651      	mov	r1, sl
 8005f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f7e:	4651      	mov	r1, sl
 8005f80:	018a      	lsls	r2, r1, #6
 8005f82:	4651      	mov	r1, sl
 8005f84:	ebb2 0801 	subs.w	r8, r2, r1
 8005f88:	4659      	mov	r1, fp
 8005f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fa2:	4690      	mov	r8, r2
 8005fa4:	4699      	mov	r9, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	eb18 0303 	adds.w	r3, r8, r3
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	462b      	mov	r3, r5
 8005fb0:	eb49 0303 	adc.w	r3, r9, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	024b      	lsls	r3, r1, #9
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fcc:	4621      	mov	r1, r4
 8005fce:	024a      	lsls	r2, r1, #9
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fe0:	f7fa fe3a 	bl	8000c58 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4613      	mov	r3, r2
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fec:	e058      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fee:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	099b      	lsrs	r3, r3, #6
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ffe:	623b      	str	r3, [r7, #32]
 8006000:	2300      	movs	r3, #0
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	f04f 0000 	mov.w	r0, #0
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	0159      	lsls	r1, r3, #5
 8006016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800601a:	0150      	lsls	r0, r2, #5
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4641      	mov	r1, r8
 8006022:	ebb2 0a01 	subs.w	sl, r2, r1
 8006026:	4649      	mov	r1, r9
 8006028:	eb63 0b01 	sbc.w	fp, r3, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800603c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006040:	ebb2 040a 	subs.w	r4, r2, sl
 8006044:	eb63 050b 	sbc.w	r5, r3, fp
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	00eb      	lsls	r3, r5, #3
 8006052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006056:	00e2      	lsls	r2, r4, #3
 8006058:	4614      	mov	r4, r2
 800605a:	461d      	mov	r5, r3
 800605c:	4643      	mov	r3, r8
 800605e:	18e3      	adds	r3, r4, r3
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	464b      	mov	r3, r9
 8006064:	eb45 0303 	adc.w	r3, r5, r3
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006076:	4629      	mov	r1, r5
 8006078:	028b      	lsls	r3, r1, #10
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006080:	4621      	mov	r1, r4
 8006082:	028a      	lsls	r2, r1, #10
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	2200      	movs	r2, #0
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	61fa      	str	r2, [r7, #28]
 8006090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006094:	f7fa fde0 	bl	8000c58 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4613      	mov	r3, r2
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	3301      	adds	r3, #1
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060ba:	e002      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80060be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3750      	adds	r7, #80	; 0x50
 80060c8:	46bd      	mov	sp, r7
 80060ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800
 80060d4:	00f42400 	.word	0x00f42400
 80060d8:	007a1200 	.word	0x007a1200

080060dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e0:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000004 	.word	0x20000004

080060f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060f8:	f7ff fff0 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0a9b      	lsrs	r3, r3, #10
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	0800b514 	.word	0x0800b514

0800611c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006120:	f7ff ffdc 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0b5b      	lsrs	r3, r3, #13
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	0800b514 	.word	0x0800b514

08006144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e041      	b.n	80061da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fe76 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fc54 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d001      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e044      	b.n	8006286 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_TIM_Base_Start_IT+0xb0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d013      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <HAL_TIM_Base_Start_IT+0xb4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a19      	ldr	r2, [pc, #100]	; (800629c <HAL_TIM_Base_Start_IT+0xb8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d111      	bne.n	8006274 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b06      	cmp	r3, #6
 8006260:	d010      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006272:	e007      	b.n	8006284 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40014000 	.word	0x40014000

080062a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e041      	b.n	800633e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fd9c 	bl	8001e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f000 fba2 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_TIM_PWM_Start+0x24>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e022      	b.n	80063b2 <HAL_TIM_PWM_Start+0x6a>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d109      	bne.n	8006386 <HAL_TIM_PWM_Start+0x3e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e015      	b.n	80063b2 <HAL_TIM_PWM_Start+0x6a>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x58>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e008      	b.n	80063b2 <HAL_TIM_PWM_Start+0x6a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e068      	b.n	800648c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start+0x82>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c8:	e013      	b.n	80063f2 <HAL_TIM_PWM_Start+0xaa>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start+0x92>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d8:	e00b      	b.n	80063f2 <HAL_TIM_PWM_Start+0xaa>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d104      	bne.n	80063ea <HAL_TIM_PWM_Start+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e8:	e003      	b.n	80063f2 <HAL_TIM_PWM_Start+0xaa>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2201      	movs	r2, #1
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fdbe 	bl	8006f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_PWM_Start+0x14c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d107      	bne.n	800641a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <HAL_TIM_PWM_Start+0x14c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d018      	beq.n	8006456 <HAL_TIM_PWM_Start+0x10e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642c:	d013      	beq.n	8006456 <HAL_TIM_PWM_Start+0x10e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_TIM_PWM_Start+0x150>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00e      	beq.n	8006456 <HAL_TIM_PWM_Start+0x10e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a17      	ldr	r2, [pc, #92]	; (800649c <HAL_TIM_PWM_Start+0x154>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d009      	beq.n	8006456 <HAL_TIM_PWM_Start+0x10e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <HAL_TIM_PWM_Start+0x158>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIM_PWM_Start+0x10e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <HAL_TIM_PWM_Start+0x15c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d111      	bne.n	800647a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b06      	cmp	r3, #6
 8006466:	d010      	beq.n	800648a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006478:	e007      	b.n	800648a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40014000 	.word	0x40014000

080064a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0202 	mvn.w	r2, #2
 80064d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa81 	bl	80069f2 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa73 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa84 	bl	8006a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d122      	bne.n	8006558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d11b      	bne.n	8006558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0204 	mvn.w	r2, #4
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa57 	bl	80069f2 <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa49 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa5a 	bl	8006a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b08      	cmp	r3, #8
 8006564:	d122      	bne.n	80065ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d11b      	bne.n	80065ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0208 	mvn.w	r2, #8
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2204      	movs	r2, #4
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa2d 	bl	80069f2 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa1f 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa30 	bl	8006a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d122      	bne.n	8006600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d11b      	bne.n	8006600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2208      	movs	r2, #8
 80065d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa03 	bl	80069f2 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f9f5 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fa06 	bl	8006a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0201 	mvn.w	r2, #1
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9cf 	bl	80069ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fd82 	bl	800715c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9cb 	bl	8006a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b20      	cmp	r3, #32
 8006690:	d10e      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b20      	cmp	r3, #32
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0220 	mvn.w	r2, #32
 80066a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fd4c 	bl	8007148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e0ae      	b.n	8006834 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	f200 809f 	bhi.w	8006824 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006825 	.word	0x08006825
 80066f4:	08006825 	.word	0x08006825
 80066f8:	08006825 	.word	0x08006825
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006825 	.word	0x08006825
 8006704:	08006825 	.word	0x08006825
 8006708:	08006825 	.word	0x08006825
 800670c:	080067a3 	.word	0x080067a3
 8006710:	08006825 	.word	0x08006825
 8006714:	08006825 	.word	0x08006825
 8006718:	08006825 	.word	0x08006825
 800671c:	080067e3 	.word	0x080067e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa02 	bl	8006b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0204 	bic.w	r2, r2, #4
 800674a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6999      	ldr	r1, [r3, #24]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	619a      	str	r2, [r3, #24]
      break;
 800675e:	e064      	b.n	800682a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fa48 	bl	8006bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6999      	ldr	r1, [r3, #24]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	021a      	lsls	r2, r3, #8
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	619a      	str	r2, [r3, #24]
      break;
 80067a0:	e043      	b.n	800682a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fa93 	bl	8006cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0208 	orr.w	r2, r2, #8
 80067bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0204 	bic.w	r2, r2, #4
 80067cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69d9      	ldr	r1, [r3, #28]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	61da      	str	r2, [r3, #28]
      break;
 80067e0:	e023      	b.n	800682a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fadd 	bl	8006da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69d9      	ldr	r1, [r3, #28]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	021a      	lsls	r2, r3, #8
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	61da      	str	r2, [r3, #28]
      break;
 8006822:	e002      	b.n	800682a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x1c>
 8006854:	2302      	movs	r3, #2
 8006856:	e0b4      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x186>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800687e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d03e      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0xd4>
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006896:	f200 8087 	bhi.w	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	f000 8086 	beq.w	80069ae <HAL_TIM_ConfigClockSource+0x172>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d87f      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b70      	cmp	r3, #112	; 0x70
 80068aa:	d01a      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0xa6>
 80068ac:	2b70      	cmp	r3, #112	; 0x70
 80068ae:	d87b      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b60      	cmp	r3, #96	; 0x60
 80068b2:	d050      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x11a>
 80068b4:	2b60      	cmp	r3, #96	; 0x60
 80068b6:	d877      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b50      	cmp	r3, #80	; 0x50
 80068ba:	d03c      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0xfa>
 80068bc:	2b50      	cmp	r3, #80	; 0x50
 80068be:	d873      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d058      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0x13a>
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d86f      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d064      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d86b      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d060      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d867      	bhi.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05c      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d05a      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	e062      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f000 fb23 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	609a      	str	r2, [r3, #8]
      break;
 800690e:	e04f      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6899      	ldr	r1, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f000 fb0c 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006932:	609a      	str	r2, [r3, #8]
      break;
 8006934:	e03c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6859      	ldr	r1, [r3, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	461a      	mov	r2, r3
 8006944:	f000 fa80 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2150      	movs	r1, #80	; 0x50
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fad9 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006954:	e02c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6859      	ldr	r1, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	461a      	mov	r2, r3
 8006964:	f000 fa9f 	bl	8006ea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2160      	movs	r1, #96	; 0x60
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fac9 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006974:	e01c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	461a      	mov	r2, r3
 8006984:	f000 fa60 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2140      	movs	r1, #64	; 0x40
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fab9 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006994:	e00c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f000 fab0 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 80069a6:	e003      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	e000      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00f      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d00b      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a31      	ldr	r2, [pc, #196]	; (8006b18 <TIM_Base_SetConfig+0xe8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <TIM_Base_SetConfig+0xec>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_Base_SetConfig+0x38>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <TIM_Base_SetConfig+0xf0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d108      	bne.n	8006a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a25      	ldr	r2, [pc, #148]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01b      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d017      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <TIM_Base_SetConfig+0xe8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <TIM_Base_SetConfig+0xec>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <TIM_Base_SetConfig+0xf0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <TIM_Base_SetConfig+0xf4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <TIM_Base_SetConfig+0xf8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0x8a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <TIM_Base_SetConfig+0xfc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <TIM_Base_SetConfig+0xe4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	615a      	str	r2, [r3, #20]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0302 	bic.w	r3, r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <TIM_OC1_SetConfig+0xc8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d10c      	bne.n	8006ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0308 	bic.w	r3, r3, #8
 8006b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 0304 	bic.w	r3, r3, #4
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <TIM_OC1_SetConfig+0xc8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d111      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40010000 	.word	0x40010000

08006bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0210 	bic.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <TIM_OC2_SetConfig+0xd4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <TIM_OC2_SetConfig+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d113      	bne.n	8006ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000

08006cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <TIM_OC3_SetConfig+0xd0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10d      	bne.n	8006d4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <TIM_OC3_SetConfig+0xd0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d113      	bne.n	8006d7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	621a      	str	r2, [r3, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	40010000 	.word	0x40010000

08006da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <TIM_OC4_SetConfig+0x9c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d109      	bne.n	8006e1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	019b      	lsls	r3, r3, #6
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000

08006e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 030a 	bic.w	r3, r3, #10
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0210 	bic.w	r2, r3, #16
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	031b      	lsls	r3, r3, #12
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f043 0307 	orr.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	021a      	lsls	r2, r3, #8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2201      	movs	r2, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e050      	b.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1c      	ldr	r2, [pc, #112]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d018      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d013      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a16      	ldr	r2, [pc, #88]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d009      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10c      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800705c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4313      	orrs	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40010000 	.word	0x40010000
 8007094:	40000400 	.word	0x40000400
 8007098:	40000800 	.word	0x40000800
 800709c:	40000c00 	.word	0x40000c00
 80070a0:	40014000 	.word	0x40014000

080070a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070bc:	2302      	movs	r3, #2
 80070be:	e03d      	b.n	800713c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e03f      	b.n	8007202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa febc 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2224      	movs	r2, #36	; 0x24
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fd7b 	bl	8007cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b08a      	sub	sp, #40	; 0x28
 800720e:	af02      	add	r7, sp, #8
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	4613      	mov	r3, r2
 8007218:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b20      	cmp	r3, #32
 8007228:	d17c      	bne.n	8007324 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_UART_Transmit+0x2c>
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e075      	b.n	8007326 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UART_Transmit+0x3e>
 8007244:	2302      	movs	r3, #2
 8007246:	e06e      	b.n	8007326 <HAL_UART_Transmit+0x11c>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2221      	movs	r2, #33	; 0x21
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800725e:	f7fb f8d3 	bl	8002408 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	88fa      	ldrh	r2, [r7, #6]
 8007268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d108      	bne.n	800728c <HAL_UART_Transmit+0x82>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	e003      	b.n	8007294 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800729c:	e02a      	b.n	80072f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2180      	movs	r1, #128	; 0x80
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 faf9 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e036      	b.n	8007326 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	3302      	adds	r3, #2
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e007      	b.n	80072e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1cf      	bne.n	800729e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2200      	movs	r2, #0
 8007306:	2140      	movs	r1, #64	; 0x40
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fac9 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b0ba      	sub	sp, #232	; 0xe8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800736e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10f      	bne.n	8007396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fbd3 	bl	8007b3a <UART_Receive_IT>
      return;
 8007394:	e256      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80de 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
 80073a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80d1 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0202 	orr.w	r2, r3, #2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d011      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d105      	bne.n	800744a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0208 	orr.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 81ed 	beq.w	800783a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb5e 	bl	8007b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <HAL_UART_IRQHandler+0x17a>
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04f      	beq.n	800754a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa66 	bl	800797c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d141      	bne.n	8007542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3314      	adds	r3, #20
 80074e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	4a7d      	ldr	r2, [pc, #500]	; (800770c <HAL_UART_IRQHandler+0x3dc>)
 8007518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	4618      	mov	r0, r3
 8007520:	f7fb f9d2 	bl	80028c8 <HAL_DMA_Abort_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	e00e      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f99a 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	e00a      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f996 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	e006      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f992 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007556:	e170      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	bf00      	nop
    return;
 800755a:	e16e      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 814a 	bne.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8143 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 813c 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60bb      	str	r3, [r7, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	f040 80b4 	bne.w	8007710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8140 	beq.w	800783e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f080 8139 	bcs.w	800783e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075de:	f000 8088 	beq.w	80076f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800760e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800761a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d9      	bne.n	80075e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800763e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800765a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e1      	bne.n	800762e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800767a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800768e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80076d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e3      	bne.n	80076b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fb f87b 	bl	80027e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8c0 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007708:	e099      	b.n	800783e <HAL_UART_IRQHandler+0x50e>
 800770a:	bf00      	nop
 800770c:	08007a43 	.word	0x08007a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007718:	b29b      	uxth	r3, r3
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 808b 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800772c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8086 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800775a:	647a      	str	r2, [r7, #68]	; 0x44
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	623b      	str	r3, [r7, #32]
   return(result);
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007792:	633a      	str	r2, [r7, #48]	; 0x30
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	617b      	str	r3, [r7, #20]
   return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e3      	bne.n	80077b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f848 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f8:	e023      	b.n	8007842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f929 	bl	8007a6a <UART_Transmit_IT>
    return;
 8007818:	e014      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
 8007826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f969 	bl	8007b0a <UART_EndTransmit_IT>
    return;
 8007838:	e004      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    return;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 8007842:	bf00      	nop
  }
}
 8007844:	37e8      	adds	r7, #232	; 0xe8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop

0800784c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b090      	sub	sp, #64	; 0x40
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b0:	e050      	b.n	8007954 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d04c      	beq.n	8007954 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078c0:	f7fa fda2 	bl	8002408 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d241      	bcs.n	8007954 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	330c      	adds	r3, #12
 80078ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078f0:	637a      	str	r2, [r7, #52]	; 0x34
 80078f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e5      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	613b      	str	r3, [r7, #16]
   return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007924:	623a      	str	r2, [r7, #32]
 8007926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	61bb      	str	r3, [r7, #24]
   return(result);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e00f      	b.n	8007974 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4013      	ands	r3, r2
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	429a      	cmp	r2, r3
 8007970:	d09f      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3740      	adds	r7, #64	; 0x40
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b095      	sub	sp, #84	; 0x54
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a4:	643a      	str	r2, [r7, #64]	; 0x40
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e5      	bne.n	8007984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3314      	adds	r3, #20
 80079d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d119      	bne.n	8007a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0310 	bic.w	r3, r3, #16
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a14:	61ba      	str	r2, [r7, #24]
 8007a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a36:	bf00      	nop
 8007a38:	3754      	adds	r7, #84	; 0x54
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff ff09 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b21      	cmp	r3, #33	; 0x21
 8007a7c:	d13e      	bne.n	8007afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	d114      	bne.n	8007ab2 <UART_Transmit_IT+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d110      	bne.n	8007ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	1c9a      	adds	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	621a      	str	r2, [r3, #32]
 8007ab0:	e008      	b.n	8007ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	1c59      	adds	r1, r3, #1
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6211      	str	r1, [r2, #32]
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10f      	bne.n	8007af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007afc:	2302      	movs	r3, #2
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fe8e 	bl	800784c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b08c      	sub	sp, #48	; 0x30
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b22      	cmp	r3, #34	; 0x22
 8007b4c:	f040 80ab 	bne.w	8007ca6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b58:	d117      	bne.n	8007b8a <UART_Receive_IT+0x50>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d113      	bne.n	8007b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	1c9a      	adds	r2, r3, #2
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	629a      	str	r2, [r3, #40]	; 0x28
 8007b88:	e026      	b.n	8007bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d007      	beq.n	8007bae <UART_Receive_IT+0x74>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <UART_Receive_IT+0x82>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e008      	b.n	8007bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4619      	mov	r1, r3
 8007be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d15a      	bne.n	8007ca2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0220 	bic.w	r2, r2, #32
 8007bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0201 	bic.w	r2, r2, #1
 8007c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d135      	bne.n	8007c98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	613b      	str	r3, [r7, #16]
   return(result);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	623a      	str	r2, [r7, #32]
 8007c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d10a      	bne.n	8007c8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fdf9 	bl	8007888 <HAL_UARTEx_RxEventCallback>
 8007c96:	e002      	b.n	8007c9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff fde1 	bl	8007860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e002      	b.n	8007ca8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3730      	adds	r7, #48	; 0x30
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0c0      	sub	sp, #256	; 0x100
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	68d9      	ldr	r1, [r3, #12]
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	ea40 0301 	orr.w	r3, r0, r1
 8007cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d08:	f021 010c 	bic.w	r1, r1, #12
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d16:	430b      	orrs	r3, r1
 8007d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2a:	6999      	ldr	r1, [r3, #24]
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	ea40 0301 	orr.w	r3, r0, r1
 8007d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b8f      	ldr	r3, [pc, #572]	; (8007f7c <UART_SetConfig+0x2cc>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d005      	beq.n	8007d50 <UART_SetConfig+0xa0>
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b8d      	ldr	r3, [pc, #564]	; (8007f80 <UART_SetConfig+0x2d0>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d104      	bne.n	8007d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d50:	f7fe f9e4 	bl	800611c <HAL_RCC_GetPCLK2Freq>
 8007d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d58:	e003      	b.n	8007d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d5a:	f7fe f9cb 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8007d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6c:	f040 810c 	bne.w	8007f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d82:	4622      	mov	r2, r4
 8007d84:	462b      	mov	r3, r5
 8007d86:	1891      	adds	r1, r2, r2
 8007d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d8a:	415b      	adcs	r3, r3
 8007d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d92:	4621      	mov	r1, r4
 8007d94:	eb12 0801 	adds.w	r8, r2, r1
 8007d98:	4629      	mov	r1, r5
 8007d9a:	eb43 0901 	adc.w	r9, r3, r1
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007db2:	4690      	mov	r8, r2
 8007db4:	4699      	mov	r9, r3
 8007db6:	4623      	mov	r3, r4
 8007db8:	eb18 0303 	adds.w	r3, r8, r3
 8007dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	eb49 0303 	adc.w	r3, r9, r3
 8007dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dde:	460b      	mov	r3, r1
 8007de0:	18db      	adds	r3, r3, r3
 8007de2:	653b      	str	r3, [r7, #80]	; 0x50
 8007de4:	4613      	mov	r3, r2
 8007de6:	eb42 0303 	adc.w	r3, r2, r3
 8007dea:	657b      	str	r3, [r7, #84]	; 0x54
 8007dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007df4:	f7f8 ff30 	bl	8000c58 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4b61      	ldr	r3, [pc, #388]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	011c      	lsls	r4, r3, #4
 8007e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	1891      	adds	r1, r2, r2
 8007e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e20:	415b      	adcs	r3, r3
 8007e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e28:	4641      	mov	r1, r8
 8007e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e2e:	4649      	mov	r1, r9
 8007e30:	eb43 0b01 	adc.w	fp, r3, r1
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e48:	4692      	mov	sl, r2
 8007e4a:	469b      	mov	fp, r3
 8007e4c:	4643      	mov	r3, r8
 8007e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e56:	464b      	mov	r3, r9
 8007e58:	eb4b 0303 	adc.w	r3, fp, r3
 8007e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e74:	460b      	mov	r3, r1
 8007e76:	18db      	adds	r3, r3, r3
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	647b      	str	r3, [r7, #68]	; 0x44
 8007e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e8a:	f7f8 fee5 	bl	8000c58 <__aeabi_uldivmod>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	4b3b      	ldr	r3, [pc, #236]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007e96:	fba3 2301 	umull	r2, r3, r3, r1
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2264      	movs	r2, #100	; 0x64
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	1acb      	subs	r3, r1, r3
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007eaa:	4b36      	ldr	r3, [pc, #216]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007eac:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb8:	441c      	add	r4, r3
 8007eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	1891      	adds	r1, r2, r2
 8007ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ed4:	415b      	adcs	r3, r3
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007edc:	4641      	mov	r1, r8
 8007ede:	1851      	adds	r1, r2, r1
 8007ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	414b      	adcs	r3, r1
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	00cb      	lsls	r3, r1, #3
 8007ef8:	4651      	mov	r1, sl
 8007efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efe:	4651      	mov	r1, sl
 8007f00:	00ca      	lsls	r2, r1, #3
 8007f02:	4610      	mov	r0, r2
 8007f04:	4619      	mov	r1, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	4642      	mov	r2, r8
 8007f0a:	189b      	adds	r3, r3, r2
 8007f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f10:	464b      	mov	r3, r9
 8007f12:	460a      	mov	r2, r1
 8007f14:	eb42 0303 	adc.w	r3, r2, r3
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f30:	460b      	mov	r3, r1
 8007f32:	18db      	adds	r3, r3, r3
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	4613      	mov	r3, r2
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f46:	f7f8 fe87 	bl	8000c58 <__aeabi_uldivmod>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007f50:	fba3 1302 	umull	r1, r3, r3, r2
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	2164      	movs	r1, #100	; 0x64
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	3332      	adds	r3, #50	; 0x32
 8007f62:	4a08      	ldr	r2, [pc, #32]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007f64:	fba2 2303 	umull	r2, r3, r2, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f003 0207 	and.w	r2, r3, #7
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4422      	add	r2, r4
 8007f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f78:	e105      	b.n	8008186 <UART_SetConfig+0x4d6>
 8007f7a:	bf00      	nop
 8007f7c:	40011000 	.word	0x40011000
 8007f80:	40011400 	.word	0x40011400
 8007f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	1891      	adds	r1, r2, r2
 8007fa0:	6239      	str	r1, [r7, #32]
 8007fa2:	415b      	adcs	r3, r3
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007faa:	4641      	mov	r1, r8
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	4649      	mov	r1, r9
 8007fb0:	eb43 0501 	adc.w	r5, r3, r1
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	00eb      	lsls	r3, r5, #3
 8007fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fc2:	00e2      	lsls	r2, r4, #3
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	4643      	mov	r3, r8
 8007fca:	18e3      	adds	r3, r4, r3
 8007fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	eb45 0303 	adc.w	r3, r5, r3
 8007fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	008b      	lsls	r3, r1, #2
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008000:	4621      	mov	r1, r4
 8008002:	008a      	lsls	r2, r1, #2
 8008004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008008:	f7f8 fe26 	bl	8000c58 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b60      	ldr	r3, [pc, #384]	; (8008194 <UART_SetConfig+0x4e4>)
 8008012:	fba3 2302 	umull	r2, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	011c      	lsls	r4, r3, #4
 800801a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	1891      	adds	r1, r2, r2
 8008032:	61b9      	str	r1, [r7, #24]
 8008034:	415b      	adcs	r3, r3
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803c:	4641      	mov	r1, r8
 800803e:	1851      	adds	r1, r2, r1
 8008040:	6139      	str	r1, [r7, #16]
 8008042:	4649      	mov	r1, r9
 8008044:	414b      	adcs	r3, r1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008054:	4659      	mov	r1, fp
 8008056:	00cb      	lsls	r3, r1, #3
 8008058:	4651      	mov	r1, sl
 800805a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800805e:	4651      	mov	r1, sl
 8008060:	00ca      	lsls	r2, r1, #3
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	4603      	mov	r3, r0
 8008068:	4642      	mov	r2, r8
 800806a:	189b      	adds	r3, r3, r2
 800806c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008070:	464b      	mov	r3, r9
 8008072:	460a      	mov	r2, r1
 8008074:	eb42 0303 	adc.w	r3, r2, r3
 8008078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	67bb      	str	r3, [r7, #120]	; 0x78
 8008086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008094:	4649      	mov	r1, r9
 8008096:	008b      	lsls	r3, r1, #2
 8008098:	4641      	mov	r1, r8
 800809a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800809e:	4641      	mov	r1, r8
 80080a0:	008a      	lsls	r2, r1, #2
 80080a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080a6:	f7f8 fdd7 	bl	8000c58 <__aeabi_uldivmod>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4b39      	ldr	r3, [pc, #228]	; (8008194 <UART_SetConfig+0x4e4>)
 80080b0:	fba3 1302 	umull	r1, r3, r3, r2
 80080b4:	095b      	lsrs	r3, r3, #5
 80080b6:	2164      	movs	r1, #100	; 0x64
 80080b8:	fb01 f303 	mul.w	r3, r1, r3
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	3332      	adds	r3, #50	; 0x32
 80080c2:	4a34      	ldr	r2, [pc, #208]	; (8008194 <UART_SetConfig+0x4e4>)
 80080c4:	fba2 2303 	umull	r2, r3, r2, r3
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ce:	441c      	add	r4, r3
 80080d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d4:	2200      	movs	r2, #0
 80080d6:	673b      	str	r3, [r7, #112]	; 0x70
 80080d8:	677a      	str	r2, [r7, #116]	; 0x74
 80080da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080de:	4642      	mov	r2, r8
 80080e0:	464b      	mov	r3, r9
 80080e2:	1891      	adds	r1, r2, r2
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	415b      	adcs	r3, r3
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ee:	4641      	mov	r1, r8
 80080f0:	1851      	adds	r1, r2, r1
 80080f2:	6039      	str	r1, [r7, #0]
 80080f4:	4649      	mov	r1, r9
 80080f6:	414b      	adcs	r3, r1
 80080f8:	607b      	str	r3, [r7, #4]
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008106:	4659      	mov	r1, fp
 8008108:	00cb      	lsls	r3, r1, #3
 800810a:	4651      	mov	r1, sl
 800810c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008110:	4651      	mov	r1, sl
 8008112:	00ca      	lsls	r2, r1, #3
 8008114:	4610      	mov	r0, r2
 8008116:	4619      	mov	r1, r3
 8008118:	4603      	mov	r3, r0
 800811a:	4642      	mov	r2, r8
 800811c:	189b      	adds	r3, r3, r2
 800811e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008120:	464b      	mov	r3, r9
 8008122:	460a      	mov	r2, r1
 8008124:	eb42 0303 	adc.w	r3, r2, r3
 8008128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	663b      	str	r3, [r7, #96]	; 0x60
 8008134:	667a      	str	r2, [r7, #100]	; 0x64
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008142:	4649      	mov	r1, r9
 8008144:	008b      	lsls	r3, r1, #2
 8008146:	4641      	mov	r1, r8
 8008148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814c:	4641      	mov	r1, r8
 800814e:	008a      	lsls	r2, r1, #2
 8008150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008154:	f7f8 fd80 	bl	8000c58 <__aeabi_uldivmod>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <UART_SetConfig+0x4e4>)
 800815e:	fba3 1302 	umull	r1, r3, r3, r2
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	2164      	movs	r1, #100	; 0x64
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	3332      	adds	r3, #50	; 0x32
 8008170:	4a08      	ldr	r2, [pc, #32]	; (8008194 <UART_SetConfig+0x4e4>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	f003 020f 	and.w	r2, r3, #15
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4422      	add	r2, r4
 8008184:	609a      	str	r2, [r3, #8]
}
 8008186:	bf00      	nop
 8008188:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800818c:	46bd      	mov	sp, r7
 800818e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008192:	bf00      	nop
 8008194:	51eb851f 	.word	0x51eb851f

08008198 <__errno>:
 8008198:	4b01      	ldr	r3, [pc, #4]	; (80081a0 <__errno+0x8>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000010 	.word	0x20000010

080081a4 <__libc_init_array>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4d0d      	ldr	r5, [pc, #52]	; (80081dc <__libc_init_array+0x38>)
 80081a8:	4c0d      	ldr	r4, [pc, #52]	; (80081e0 <__libc_init_array+0x3c>)
 80081aa:	1b64      	subs	r4, r4, r5
 80081ac:	10a4      	asrs	r4, r4, #2
 80081ae:	2600      	movs	r6, #0
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	d109      	bne.n	80081c8 <__libc_init_array+0x24>
 80081b4:	4d0b      	ldr	r5, [pc, #44]	; (80081e4 <__libc_init_array+0x40>)
 80081b6:	4c0c      	ldr	r4, [pc, #48]	; (80081e8 <__libc_init_array+0x44>)
 80081b8:	f003 f97c 	bl	800b4b4 <_init>
 80081bc:	1b64      	subs	r4, r4, r5
 80081be:	10a4      	asrs	r4, r4, #2
 80081c0:	2600      	movs	r6, #0
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	d105      	bne.n	80081d2 <__libc_init_array+0x2e>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081cc:	4798      	blx	r3
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7ee      	b.n	80081b0 <__libc_init_array+0xc>
 80081d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d6:	4798      	blx	r3
 80081d8:	3601      	adds	r6, #1
 80081da:	e7f2      	b.n	80081c2 <__libc_init_array+0x1e>
 80081dc:	0800b978 	.word	0x0800b978
 80081e0:	0800b978 	.word	0x0800b978
 80081e4:	0800b978 	.word	0x0800b978
 80081e8:	0800b97c 	.word	0x0800b97c

080081ec <memset>:
 80081ec:	4402      	add	r2, r0
 80081ee:	4603      	mov	r3, r0
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d100      	bne.n	80081f6 <memset+0xa>
 80081f4:	4770      	bx	lr
 80081f6:	f803 1b01 	strb.w	r1, [r3], #1
 80081fa:	e7f9      	b.n	80081f0 <memset+0x4>

080081fc <__cvt>:
 80081fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	ec55 4b10 	vmov	r4, r5, d0
 8008204:	2d00      	cmp	r5, #0
 8008206:	460e      	mov	r6, r1
 8008208:	4619      	mov	r1, r3
 800820a:	462b      	mov	r3, r5
 800820c:	bfbb      	ittet	lt
 800820e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008212:	461d      	movlt	r5, r3
 8008214:	2300      	movge	r3, #0
 8008216:	232d      	movlt	r3, #45	; 0x2d
 8008218:	700b      	strb	r3, [r1, #0]
 800821a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800821c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008220:	4691      	mov	r9, r2
 8008222:	f023 0820 	bic.w	r8, r3, #32
 8008226:	bfbc      	itt	lt
 8008228:	4622      	movlt	r2, r4
 800822a:	4614      	movlt	r4, r2
 800822c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008230:	d005      	beq.n	800823e <__cvt+0x42>
 8008232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008236:	d100      	bne.n	800823a <__cvt+0x3e>
 8008238:	3601      	adds	r6, #1
 800823a:	2102      	movs	r1, #2
 800823c:	e000      	b.n	8008240 <__cvt+0x44>
 800823e:	2103      	movs	r1, #3
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	ab02      	add	r3, sp, #8
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	ec45 4b10 	vmov	d0, r4, r5
 800824c:	4653      	mov	r3, sl
 800824e:	4632      	mov	r2, r6
 8008250:	f000 fcea 	bl	8008c28 <_dtoa_r>
 8008254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008258:	4607      	mov	r7, r0
 800825a:	d102      	bne.n	8008262 <__cvt+0x66>
 800825c:	f019 0f01 	tst.w	r9, #1
 8008260:	d022      	beq.n	80082a8 <__cvt+0xac>
 8008262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008266:	eb07 0906 	add.w	r9, r7, r6
 800826a:	d110      	bne.n	800828e <__cvt+0x92>
 800826c:	783b      	ldrb	r3, [r7, #0]
 800826e:	2b30      	cmp	r3, #48	; 0x30
 8008270:	d10a      	bne.n	8008288 <__cvt+0x8c>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f8 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800827e:	b918      	cbnz	r0, 8008288 <__cvt+0x8c>
 8008280:	f1c6 0601 	rsb	r6, r6, #1
 8008284:	f8ca 6000 	str.w	r6, [sl]
 8008288:	f8da 3000 	ldr.w	r3, [sl]
 800828c:	4499      	add	r9, r3
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fc1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800829a:	b108      	cbz	r0, 80082a0 <__cvt+0xa4>
 800829c:	f8cd 900c 	str.w	r9, [sp, #12]
 80082a0:	2230      	movs	r2, #48	; 0x30
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	454b      	cmp	r3, r9
 80082a6:	d307      	bcc.n	80082b8 <__cvt+0xbc>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ac:	1bdb      	subs	r3, r3, r7
 80082ae:	4638      	mov	r0, r7
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	b004      	add	sp, #16
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e7f0      	b.n	80082a2 <__cvt+0xa6>

080082c0 <__exponent>:
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	4603      	mov	r3, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	bfb8      	it	lt
 80082c8:	4249      	neglt	r1, r1
 80082ca:	f803 2b02 	strb.w	r2, [r3], #2
 80082ce:	bfb4      	ite	lt
 80082d0:	222d      	movlt	r2, #45	; 0x2d
 80082d2:	222b      	movge	r2, #43	; 0x2b
 80082d4:	2909      	cmp	r1, #9
 80082d6:	7042      	strb	r2, [r0, #1]
 80082d8:	dd2a      	ble.n	8008330 <__exponent+0x70>
 80082da:	f10d 0407 	add.w	r4, sp, #7
 80082de:	46a4      	mov	ip, r4
 80082e0:	270a      	movs	r7, #10
 80082e2:	46a6      	mov	lr, r4
 80082e4:	460a      	mov	r2, r1
 80082e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082ea:	fb07 1516 	mls	r5, r7, r6, r1
 80082ee:	3530      	adds	r5, #48	; 0x30
 80082f0:	2a63      	cmp	r2, #99	; 0x63
 80082f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082fa:	4631      	mov	r1, r6
 80082fc:	dcf1      	bgt.n	80082e2 <__exponent+0x22>
 80082fe:	3130      	adds	r1, #48	; 0x30
 8008300:	f1ae 0502 	sub.w	r5, lr, #2
 8008304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008308:	1c44      	adds	r4, r0, #1
 800830a:	4629      	mov	r1, r5
 800830c:	4561      	cmp	r1, ip
 800830e:	d30a      	bcc.n	8008326 <__exponent+0x66>
 8008310:	f10d 0209 	add.w	r2, sp, #9
 8008314:	eba2 020e 	sub.w	r2, r2, lr
 8008318:	4565      	cmp	r5, ip
 800831a:	bf88      	it	hi
 800831c:	2200      	movhi	r2, #0
 800831e:	4413      	add	r3, r2
 8008320:	1a18      	subs	r0, r3, r0
 8008322:	b003      	add	sp, #12
 8008324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800832e:	e7ed      	b.n	800830c <__exponent+0x4c>
 8008330:	2330      	movs	r3, #48	; 0x30
 8008332:	3130      	adds	r1, #48	; 0x30
 8008334:	7083      	strb	r3, [r0, #2]
 8008336:	70c1      	strb	r1, [r0, #3]
 8008338:	1d03      	adds	r3, r0, #4
 800833a:	e7f1      	b.n	8008320 <__exponent+0x60>

0800833c <_printf_float>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	ed2d 8b02 	vpush	{d8}
 8008344:	b08d      	sub	sp, #52	; 0x34
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800834c:	4616      	mov	r6, r2
 800834e:	461f      	mov	r7, r3
 8008350:	4605      	mov	r5, r0
 8008352:	f001 fa57 	bl	8009804 <_localeconv_r>
 8008356:	f8d0 a000 	ldr.w	sl, [r0]
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 ff40 	bl	80001e0 <strlen>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	; 0x28
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	f103 0208 	add.w	r2, r3, #8
 800837a:	f8c8 2000 	str.w	r2, [r8]
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800838a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	f8cd 8018 	str.w	r8, [sp, #24]
 8008394:	ee08 0a10 	vmov	s16, r0
 8008398:	4b9f      	ldr	r3, [pc, #636]	; (8008618 <_printf_float+0x2dc>)
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	f7f8 fbcb 	bl	8000b3c <__aeabi_dcmpun>
 80083a6:	bb88      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ac:	4b9a      	ldr	r3, [pc, #616]	; (8008618 <_printf_float+0x2dc>)
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	f7f8 fba5 	bl	8000b00 <__aeabi_dcmple>
 80083b6:	bb48      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fb94 	bl	8000aec <__aeabi_dcmplt>
 80083c4:	b110      	cbz	r0, 80083cc <_printf_float+0x90>
 80083c6:	232d      	movs	r3, #45	; 0x2d
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	4b93      	ldr	r3, [pc, #588]	; (800861c <_printf_float+0x2e0>)
 80083ce:	4894      	ldr	r0, [pc, #592]	; (8008620 <_printf_float+0x2e4>)
 80083d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083d4:	bf94      	ite	ls
 80083d6:	4698      	movls	r8, r3
 80083d8:	4680      	movhi	r8, r0
 80083da:	2303      	movs	r3, #3
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	9b05      	ldr	r3, [sp, #20]
 80083e0:	f023 0204 	bic.w	r2, r3, #4
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	9700      	str	r7, [sp, #0]
 80083ec:	4633      	mov	r3, r6
 80083ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f9d8 	bl	80087a8 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f040 8090 	bne.w	800851e <_printf_float+0x1e2>
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	b00d      	add	sp, #52	; 0x34
 8008404:	ecbd 8b02 	vpop	{d8}
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb92 	bl	8000b3c <__aeabi_dcmpun>
 8008418:	b140      	cbz	r0, 800842c <_printf_float+0xf0>
 800841a:	464b      	mov	r3, r9
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfbc      	itt	lt
 8008420:	232d      	movlt	r3, #45	; 0x2d
 8008422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008426:	487f      	ldr	r0, [pc, #508]	; (8008624 <_printf_float+0x2e8>)
 8008428:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <_printf_float+0x2ec>)
 800842a:	e7d1      	b.n	80083d0 <_printf_float+0x94>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008432:	9206      	str	r2, [sp, #24]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	d13f      	bne.n	80084b8 <_printf_float+0x17c>
 8008438:	2306      	movs	r3, #6
 800843a:	6063      	str	r3, [r4, #4]
 800843c:	9b05      	ldr	r3, [sp, #20]
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008444:	2300      	movs	r3, #0
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	ab0a      	add	r3, sp, #40	; 0x28
 800844a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800844e:	ab09      	add	r3, sp, #36	; 0x24
 8008450:	ec49 8b10 	vmov	d0, r8, r9
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff fecd 	bl	80081fc <__cvt>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008466:	2b47      	cmp	r3, #71	; 0x47
 8008468:	4680      	mov	r8, r0
 800846a:	d108      	bne.n	800847e <_printf_float+0x142>
 800846c:	1cc8      	adds	r0, r1, #3
 800846e:	db02      	blt.n	8008476 <_printf_float+0x13a>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	dd41      	ble.n	80084fa <_printf_float+0x1be>
 8008476:	f1ab 0b02 	sub.w	fp, fp, #2
 800847a:	fa5f fb8b 	uxtb.w	fp, fp
 800847e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008482:	d820      	bhi.n	80084c6 <_printf_float+0x18a>
 8008484:	3901      	subs	r1, #1
 8008486:	465a      	mov	r2, fp
 8008488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800848c:	9109      	str	r1, [sp, #36]	; 0x24
 800848e:	f7ff ff17 	bl	80082c0 <__exponent>
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	1813      	adds	r3, r2, r0
 8008496:	2a01      	cmp	r2, #1
 8008498:	4681      	mov	r9, r0
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	dc02      	bgt.n	80084a4 <_printf_float+0x168>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	07d2      	lsls	r2, r2, #31
 80084a2:	d501      	bpl.n	80084a8 <_printf_float+0x16c>
 80084a4:	3301      	adds	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d09c      	beq.n	80083ea <_printf_float+0xae>
 80084b0:	232d      	movs	r3, #45	; 0x2d
 80084b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b6:	e798      	b.n	80083ea <_printf_float+0xae>
 80084b8:	9a06      	ldr	r2, [sp, #24]
 80084ba:	2a47      	cmp	r2, #71	; 0x47
 80084bc:	d1be      	bne.n	800843c <_printf_float+0x100>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bc      	bne.n	800843c <_printf_float+0x100>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7b9      	b.n	800843a <_printf_float+0xfe>
 80084c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ca:	d118      	bne.n	80084fe <_printf_float+0x1c2>
 80084cc:	2900      	cmp	r1, #0
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	dd0b      	ble.n	80084ea <_printf_float+0x1ae>
 80084d2:	6121      	str	r1, [r4, #16]
 80084d4:	b913      	cbnz	r3, 80084dc <_printf_float+0x1a0>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	07d0      	lsls	r0, r2, #31
 80084da:	d502      	bpl.n	80084e2 <_printf_float+0x1a6>
 80084dc:	3301      	adds	r3, #1
 80084de:	440b      	add	r3, r1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80084e4:	f04f 0900 	mov.w	r9, #0
 80084e8:	e7de      	b.n	80084a8 <_printf_float+0x16c>
 80084ea:	b913      	cbnz	r3, 80084f2 <_printf_float+0x1b6>
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	07d2      	lsls	r2, r2, #31
 80084f0:	d501      	bpl.n	80084f6 <_printf_float+0x1ba>
 80084f2:	3302      	adds	r3, #2
 80084f4:	e7f4      	b.n	80084e0 <_printf_float+0x1a4>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e7f2      	b.n	80084e0 <_printf_float+0x1a4>
 80084fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	4299      	cmp	r1, r3
 8008502:	db05      	blt.n	8008510 <_printf_float+0x1d4>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	6121      	str	r1, [r4, #16]
 8008508:	07d8      	lsls	r0, r3, #31
 800850a:	d5ea      	bpl.n	80084e2 <_printf_float+0x1a6>
 800850c:	1c4b      	adds	r3, r1, #1
 800850e:	e7e7      	b.n	80084e0 <_printf_float+0x1a4>
 8008510:	2900      	cmp	r1, #0
 8008512:	bfd4      	ite	le
 8008514:	f1c1 0202 	rsble	r2, r1, #2
 8008518:	2201      	movgt	r2, #1
 800851a:	4413      	add	r3, r2
 800851c:	e7e0      	b.n	80084e0 <_printf_float+0x1a4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	055a      	lsls	r2, r3, #21
 8008522:	d407      	bmi.n	8008534 <_printf_float+0x1f8>
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	4642      	mov	r2, r8
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d12c      	bne.n	800858c <_printf_float+0x250>
 8008532:	e764      	b.n	80083fe <_printf_float+0xc2>
 8008534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008538:	f240 80e0 	bls.w	80086fc <_printf_float+0x3c0>
 800853c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	f7f8 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008548:	2800      	cmp	r0, #0
 800854a:	d034      	beq.n	80085b6 <_printf_float+0x27a>
 800854c:	4a37      	ldr	r2, [pc, #220]	; (800862c <_printf_float+0x2f0>)
 800854e:	2301      	movs	r3, #1
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af51 	beq.w	80083fe <_printf_float+0xc2>
 800855c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008560:	429a      	cmp	r2, r3
 8008562:	db02      	blt.n	800856a <_printf_float+0x22e>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	07d8      	lsls	r0, r3, #31
 8008568:	d510      	bpl.n	800858c <_printf_float+0x250>
 800856a:	ee18 3a10 	vmov	r3, s16
 800856e:	4652      	mov	r2, sl
 8008570:	4631      	mov	r1, r6
 8008572:	4628      	mov	r0, r5
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af41 	beq.w	80083fe <_printf_float+0xc2>
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	f104 091a 	add.w	r9, r4, #26
 8008584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	4543      	cmp	r3, r8
 800858a:	dc09      	bgt.n	80085a0 <_printf_float+0x264>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	f100 8105 	bmi.w	800879e <_printf_float+0x462>
 8008594:	68e0      	ldr	r0, [r4, #12]
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	4298      	cmp	r0, r3
 800859a:	bfb8      	it	lt
 800859c:	4618      	movlt	r0, r3
 800859e:	e730      	b.n	8008402 <_printf_float+0xc6>
 80085a0:	2301      	movs	r3, #1
 80085a2:	464a      	mov	r2, r9
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af27 	beq.w	80083fe <_printf_float+0xc2>
 80085b0:	f108 0801 	add.w	r8, r8, #1
 80085b4:	e7e6      	b.n	8008584 <_printf_float+0x248>
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc39      	bgt.n	8008630 <_printf_float+0x2f4>
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <_printf_float+0x2f0>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af19 	beq.w	80083fe <_printf_float+0xc2>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d102      	bne.n	80085da <_printf_float+0x29e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	d5d8      	bpl.n	800858c <_printf_float+0x250>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af09 	beq.w	80083fe <_printf_float+0xc2>
 80085ec:	f04f 0900 	mov.w	r9, #0
 80085f0:	f104 0a1a 	add.w	sl, r4, #26
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	425b      	negs	r3, r3
 80085f8:	454b      	cmp	r3, r9
 80085fa:	dc01      	bgt.n	8008600 <_printf_float+0x2c4>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fe:	e792      	b.n	8008526 <_printf_float+0x1ea>
 8008600:	2301      	movs	r3, #1
 8008602:	4652      	mov	r2, sl
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	f43f aef7 	beq.w	80083fe <_printf_float+0xc2>
 8008610:	f109 0901 	add.w	r9, r9, #1
 8008614:	e7ee      	b.n	80085f4 <_printf_float+0x2b8>
 8008616:	bf00      	nop
 8008618:	7fefffff 	.word	0x7fefffff
 800861c:	0800b528 	.word	0x0800b528
 8008620:	0800b52c 	.word	0x0800b52c
 8008624:	0800b534 	.word	0x0800b534
 8008628:	0800b530 	.word	0x0800b530
 800862c:	0800b538 	.word	0x0800b538
 8008630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008634:	429a      	cmp	r2, r3
 8008636:	bfa8      	it	ge
 8008638:	461a      	movge	r2, r3
 800863a:	2a00      	cmp	r2, #0
 800863c:	4691      	mov	r9, r2
 800863e:	dc37      	bgt.n	80086b0 <_printf_float+0x374>
 8008640:	f04f 0b00 	mov.w	fp, #0
 8008644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008648:	f104 021a 	add.w	r2, r4, #26
 800864c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	eba3 0309 	sub.w	r3, r3, r9
 8008654:	455b      	cmp	r3, fp
 8008656:	dc33      	bgt.n	80086c0 <_printf_float+0x384>
 8008658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800865c:	429a      	cmp	r2, r3
 800865e:	db3b      	blt.n	80086d8 <_printf_float+0x39c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d438      	bmi.n	80086d8 <_printf_float+0x39c>
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	9a05      	ldr	r2, [sp, #20]
 800866a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866c:	1a9a      	subs	r2, r3, r2
 800866e:	eba3 0901 	sub.w	r9, r3, r1
 8008672:	4591      	cmp	r9, r2
 8008674:	bfa8      	it	ge
 8008676:	4691      	movge	r9, r2
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	dc35      	bgt.n	80086ea <_printf_float+0x3ae>
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008686:	f104 0a1a 	add.w	sl, r4, #26
 800868a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	eba3 0309 	sub.w	r3, r3, r9
 8008694:	4543      	cmp	r3, r8
 8008696:	f77f af79 	ble.w	800858c <_printf_float+0x250>
 800869a:	2301      	movs	r3, #1
 800869c:	4652      	mov	r2, sl
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f aeaa 	beq.w	80083fe <_printf_float+0xc2>
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	e7ec      	b.n	800868a <_printf_float+0x34e>
 80086b0:	4613      	mov	r3, r2
 80086b2:	4631      	mov	r1, r6
 80086b4:	4642      	mov	r2, r8
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	d1c0      	bne.n	8008640 <_printf_float+0x304>
 80086be:	e69e      	b.n	80083fe <_printf_float+0xc2>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	9205      	str	r2, [sp, #20]
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	f43f ae97 	beq.w	80083fe <_printf_float+0xc2>
 80086d0:	9a05      	ldr	r2, [sp, #20]
 80086d2:	f10b 0b01 	add.w	fp, fp, #1
 80086d6:	e7b9      	b.n	800864c <_printf_float+0x310>
 80086d8:	ee18 3a10 	vmov	r3, s16
 80086dc:	4652      	mov	r2, sl
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1be      	bne.n	8008666 <_printf_float+0x32a>
 80086e8:	e689      	b.n	80083fe <_printf_float+0xc2>
 80086ea:	9a05      	ldr	r2, [sp, #20]
 80086ec:	464b      	mov	r3, r9
 80086ee:	4442      	add	r2, r8
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	d1c1      	bne.n	800867e <_printf_float+0x342>
 80086fa:	e680      	b.n	80083fe <_printf_float+0xc2>
 80086fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fe:	2a01      	cmp	r2, #1
 8008700:	dc01      	bgt.n	8008706 <_printf_float+0x3ca>
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d538      	bpl.n	8008778 <_printf_float+0x43c>
 8008706:	2301      	movs	r3, #1
 8008708:	4642      	mov	r2, r8
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae74 	beq.w	80083fe <_printf_float+0xc2>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f ae6b 	beq.w	80083fe <_printf_float+0xc2>
 8008728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	f7f8 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008734:	b9d8      	cbnz	r0, 800876e <_printf_float+0x432>
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	f108 0201 	add.w	r2, r8, #1
 800873c:	3b01      	subs	r3, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d10e      	bne.n	8008766 <_printf_float+0x42a>
 8008748:	e659      	b.n	80083fe <_printf_float+0xc2>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae52 	beq.w	80083fe <_printf_float+0xc2>
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	3b01      	subs	r3, #1
 8008762:	4543      	cmp	r3, r8
 8008764:	dcf1      	bgt.n	800874a <_printf_float+0x40e>
 8008766:	464b      	mov	r3, r9
 8008768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800876c:	e6dc      	b.n	8008528 <_printf_float+0x1ec>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	f104 0a1a 	add.w	sl, r4, #26
 8008776:	e7f2      	b.n	800875e <_printf_float+0x422>
 8008778:	2301      	movs	r3, #1
 800877a:	4642      	mov	r2, r8
 800877c:	e7df      	b.n	800873e <_printf_float+0x402>
 800877e:	2301      	movs	r3, #1
 8008780:	464a      	mov	r2, r9
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f ae38 	beq.w	80083fe <_printf_float+0xc2>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	4543      	cmp	r3, r8
 800879a:	dcf0      	bgt.n	800877e <_printf_float+0x442>
 800879c:	e6fa      	b.n	8008594 <_printf_float+0x258>
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	f104 0919 	add.w	r9, r4, #25
 80087a6:	e7f4      	b.n	8008792 <_printf_float+0x456>

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	68e5      	ldr	r5, [r4, #12]
 8008812:	6832      	ldr	r2, [r6, #0]
 8008814:	f003 0306 	and.w	r3, r3, #6
 8008818:	2b04      	cmp	r3, #4
 800881a:	bf08      	it	eq
 800881c:	1aad      	subeq	r5, r5, r2
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	7e0f      	ldrb	r7, [r1, #24]
 800888a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800888c:	2f78      	cmp	r7, #120	; 0x78
 800888e:	4691      	mov	r9, r2
 8008890:	4680      	mov	r8, r0
 8008892:	460c      	mov	r4, r1
 8008894:	469a      	mov	sl, r3
 8008896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d8 	beq.w	8008a56 <_printf_i+0x1d2>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80a3 	beq.w	80089f2 <_printf_i+0x16e>
 80088ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a101      	add	r1, pc, #4	; (adr r1, 80088c4 <_printf_i+0x40>)
 80088c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a3d 	.word	0x08008a3d
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008a1f 	.word	0x08008a1f
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a5f 	.word	0x08008a5f
 8008908:	080088ad 	.word	0x080088ad
 800890c:	08008961 	.word	0x08008961
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	08008a27 	.word	0x08008a27
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	602a      	str	r2, [r5, #0]
 8008924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e0a3      	b.n	8008a78 <_printf_i+0x1f4>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	6829      	ldr	r1, [r5, #0]
 8008934:	0606      	lsls	r6, r0, #24
 8008936:	f101 0304 	add.w	r3, r1, #4
 800893a:	d50a      	bpl.n	8008952 <_printf_i+0xce>
 800893c:	680e      	ldr	r6, [r1, #0]
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	2e00      	cmp	r6, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0xc8>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	4276      	negs	r6, r6
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	485e      	ldr	r0, [pc, #376]	; (8008ac8 <_printf_i+0x244>)
 800894e:	230a      	movs	r3, #10
 8008950:	e019      	b.n	8008986 <_printf_i+0x102>
 8008952:	680e      	ldr	r6, [r1, #0]
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800895a:	bf18      	it	ne
 800895c:	b236      	sxthne	r6, r6
 800895e:	e7ef      	b.n	8008940 <_printf_i+0xbc>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	6820      	ldr	r0, [r4, #0]
 8008964:	1d19      	adds	r1, r3, #4
 8008966:	6029      	str	r1, [r5, #0]
 8008968:	0601      	lsls	r1, r0, #24
 800896a:	d501      	bpl.n	8008970 <_printf_i+0xec>
 800896c:	681e      	ldr	r6, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0xf2>
 8008970:	0646      	lsls	r6, r0, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0xe8>
 8008974:	881e      	ldrh	r6, [r3, #0]
 8008976:	4854      	ldr	r0, [pc, #336]	; (8008ac8 <_printf_i+0x244>)
 8008978:	2f6f      	cmp	r7, #111	; 0x6f
 800897a:	bf0c      	ite	eq
 800897c:	2308      	moveq	r3, #8
 800897e:	230a      	movne	r3, #10
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008986:	6865      	ldr	r5, [r4, #4]
 8008988:	60a5      	str	r5, [r4, #8]
 800898a:	2d00      	cmp	r5, #0
 800898c:	bfa2      	ittt	ge
 800898e:	6821      	ldrge	r1, [r4, #0]
 8008990:	f021 0104 	bicge.w	r1, r1, #4
 8008994:	6021      	strge	r1, [r4, #0]
 8008996:	b90e      	cbnz	r6, 800899c <_printf_i+0x118>
 8008998:	2d00      	cmp	r5, #0
 800899a:	d04d      	beq.n	8008a38 <_printf_i+0x1b4>
 800899c:	4615      	mov	r5, r2
 800899e:	fbb6 f1f3 	udiv	r1, r6, r3
 80089a2:	fb03 6711 	mls	r7, r3, r1, r6
 80089a6:	5dc7      	ldrb	r7, [r0, r7]
 80089a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ac:	4637      	mov	r7, r6
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	460e      	mov	r6, r1
 80089b2:	d9f4      	bls.n	800899e <_printf_i+0x11a>
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10b      	bne.n	80089d0 <_printf_i+0x14c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07de      	lsls	r6, r3, #31
 80089bc:	d508      	bpl.n	80089d0 <_printf_i+0x14c>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	bfde      	ittt	le
 80089c6:	2330      	movle	r3, #48	; 0x30
 80089c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089d0:	1b52      	subs	r2, r2, r5
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	464b      	mov	r3, r9
 80089da:	aa03      	add	r2, sp, #12
 80089dc:	4621      	mov	r1, r4
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fee2 	bl	80087a8 <_printf_common>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d14c      	bne.n	8008a82 <_printf_i+0x1fe>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b004      	add	sp, #16
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	4835      	ldr	r0, [pc, #212]	; (8008ac8 <_printf_i+0x244>)
 80089f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089f8:	6829      	ldr	r1, [r5, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a00:	6029      	str	r1, [r5, #0]
 8008a02:	061d      	lsls	r5, r3, #24
 8008a04:	d514      	bpl.n	8008a30 <_printf_i+0x1ac>
 8008a06:	07df      	lsls	r7, r3, #31
 8008a08:	bf44      	itt	mi
 8008a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a0e:	6023      	strmi	r3, [r4, #0]
 8008a10:	b91e      	cbnz	r6, 8008a1a <_printf_i+0x196>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	e7b0      	b.n	8008980 <_printf_i+0xfc>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	2378      	movs	r3, #120	; 0x78
 8008a28:	4828      	ldr	r0, [pc, #160]	; (8008acc <_printf_i+0x248>)
 8008a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a2e:	e7e3      	b.n	80089f8 <_printf_i+0x174>
 8008a30:	0659      	lsls	r1, r3, #25
 8008a32:	bf48      	it	mi
 8008a34:	b2b6      	uxthmi	r6, r6
 8008a36:	e7e6      	b.n	8008a06 <_printf_i+0x182>
 8008a38:	4615      	mov	r5, r2
 8008a3a:	e7bb      	b.n	80089b4 <_printf_i+0x130>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	6826      	ldr	r6, [r4, #0]
 8008a40:	6961      	ldr	r1, [r4, #20]
 8008a42:	1d18      	adds	r0, r3, #4
 8008a44:	6028      	str	r0, [r5, #0]
 8008a46:	0635      	lsls	r5, r6, #24
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0x1cc>
 8008a4c:	6019      	str	r1, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0x1d2>
 8008a50:	0670      	lsls	r0, r6, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0x1c8>
 8008a54:	8019      	strh	r1, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	e7ba      	b.n	80089d4 <_printf_i+0x150>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	602a      	str	r2, [r5, #0]
 8008a64:	681d      	ldr	r5, [r3, #0]
 8008a66:	6862      	ldr	r2, [r4, #4]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f7f7 fbc0 	bl	80001f0 <memchr>
 8008a70:	b108      	cbz	r0, 8008a76 <_printf_i+0x1f2>
 8008a72:	1b40      	subs	r0, r0, r5
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a80:	e7a8      	b.n	80089d4 <_printf_i+0x150>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	462a      	mov	r2, r5
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d0ab      	beq.n	80089e8 <_printf_i+0x164>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	d413      	bmi.n	8008abe <_printf_i+0x23a>
 8008a96:	68e0      	ldr	r0, [r4, #12]
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	bfb8      	it	lt
 8008a9e:	4618      	movlt	r0, r3
 8008aa0:	e7a4      	b.n	80089ec <_printf_i+0x168>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	47d0      	blx	sl
 8008aac:	3001      	adds	r0, #1
 8008aae:	d09b      	beq.n	80089e8 <_printf_i+0x164>
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	9903      	ldr	r1, [sp, #12]
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	dcf2      	bgt.n	8008aa2 <_printf_i+0x21e>
 8008abc:	e7eb      	b.n	8008a96 <_printf_i+0x212>
 8008abe:	2500      	movs	r5, #0
 8008ac0:	f104 0619 	add.w	r6, r4, #25
 8008ac4:	e7f5      	b.n	8008ab2 <_printf_i+0x22e>
 8008ac6:	bf00      	nop
 8008ac8:	0800b53a 	.word	0x0800b53a
 8008acc:	0800b54b 	.word	0x0800b54b

08008ad0 <siprintf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	b500      	push	{lr}
 8008ad4:	b09c      	sub	sp, #112	; 0x70
 8008ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ad8:	9002      	str	r0, [sp, #8]
 8008ada:	9006      	str	r0, [sp, #24]
 8008adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ae0:	4809      	ldr	r0, [pc, #36]	; (8008b08 <siprintf+0x38>)
 8008ae2:	9107      	str	r1, [sp, #28]
 8008ae4:	9104      	str	r1, [sp, #16]
 8008ae6:	4909      	ldr	r1, [pc, #36]	; (8008b0c <siprintf+0x3c>)
 8008ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	6800      	ldr	r0, [r0, #0]
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	a902      	add	r1, sp, #8
 8008af4:	f001 fb76 	bl	800a1e4 <_svfiprintf_r>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	b01c      	add	sp, #112	; 0x70
 8008b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	20000010 	.word	0x20000010
 8008b0c:	ffff0208 	.word	0xffff0208

08008b10 <quorem>:
 8008b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	6903      	ldr	r3, [r0, #16]
 8008b16:	690c      	ldr	r4, [r1, #16]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	f2c0 8081 	blt.w	8008c22 <quorem+0x112>
 8008b20:	3c01      	subs	r4, #1
 8008b22:	f101 0814 	add.w	r8, r1, #20
 8008b26:	f100 0514 	add.w	r5, r0, #20
 8008b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b44:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b48:	d331      	bcc.n	8008bae <quorem+0x9e>
 8008b4a:	f04f 0e00 	mov.w	lr, #0
 8008b4e:	4640      	mov	r0, r8
 8008b50:	46ac      	mov	ip, r5
 8008b52:	46f2      	mov	sl, lr
 8008b54:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b58:	b293      	uxth	r3, r2
 8008b5a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	ebaa 0303 	sub.w	r3, sl, r3
 8008b68:	f8dc a000 	ldr.w	sl, [ip]
 8008b6c:	0c12      	lsrs	r2, r2, #16
 8008b6e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b72:	fb06 e202 	mla	r2, r6, r2, lr
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b7e:	b292      	uxth	r2, r2
 8008b80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b88:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b8c:	4581      	cmp	r9, r0
 8008b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b92:	f84c 3b04 	str.w	r3, [ip], #4
 8008b96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b9a:	d2db      	bcs.n	8008b54 <quorem+0x44>
 8008b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ba0:	b92b      	cbnz	r3, 8008bae <quorem+0x9e>
 8008ba2:	9b01      	ldr	r3, [sp, #4]
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	d32e      	bcc.n	8008c0a <quorem+0xfa>
 8008bac:	613c      	str	r4, [r7, #16]
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f001 f8c4 	bl	8009d3c <__mcmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	db24      	blt.n	8008c02 <quorem+0xf2>
 8008bb8:	3601      	adds	r6, #1
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f04f 0c00 	mov.w	ip, #0
 8008bc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8008bc8:	b293      	uxth	r3, r2
 8008bca:	ebac 0303 	sub.w	r3, ip, r3
 8008bce:	0c12      	lsrs	r2, r2, #16
 8008bd0:	fa13 f38e 	uxtah	r3, r3, lr
 8008bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be2:	45c1      	cmp	r9, r8
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bec:	d2e8      	bcs.n	8008bc0 <quorem+0xb0>
 8008bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bf6:	b922      	cbnz	r2, 8008c02 <quorem+0xf2>
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	d30a      	bcc.n	8008c16 <quorem+0x106>
 8008c00:	613c      	str	r4, [r7, #16]
 8008c02:	4630      	mov	r0, r6
 8008c04:	b003      	add	sp, #12
 8008c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0a:	6812      	ldr	r2, [r2, #0]
 8008c0c:	3b04      	subs	r3, #4
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d1cc      	bne.n	8008bac <quorem+0x9c>
 8008c12:	3c01      	subs	r4, #1
 8008c14:	e7c7      	b.n	8008ba6 <quorem+0x96>
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d1f0      	bne.n	8008c00 <quorem+0xf0>
 8008c1e:	3c01      	subs	r4, #1
 8008c20:	e7eb      	b.n	8008bfa <quorem+0xea>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e7ee      	b.n	8008c04 <quorem+0xf4>
	...

08008c28 <_dtoa_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	ed2d 8b04 	vpush	{d8-d9}
 8008c30:	ec57 6b10 	vmov	r6, r7, d0
 8008c34:	b093      	sub	sp, #76	; 0x4c
 8008c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c3c:	9106      	str	r1, [sp, #24]
 8008c3e:	ee10 aa10 	vmov	sl, s0
 8008c42:	4604      	mov	r4, r0
 8008c44:	9209      	str	r2, [sp, #36]	; 0x24
 8008c46:	930c      	str	r3, [sp, #48]	; 0x30
 8008c48:	46bb      	mov	fp, r7
 8008c4a:	b975      	cbnz	r5, 8008c6a <_dtoa_r+0x42>
 8008c4c:	2010      	movs	r0, #16
 8008c4e:	f000 fddd 	bl	800980c <malloc>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6260      	str	r0, [r4, #36]	; 0x24
 8008c56:	b920      	cbnz	r0, 8008c62 <_dtoa_r+0x3a>
 8008c58:	4ba7      	ldr	r3, [pc, #668]	; (8008ef8 <_dtoa_r+0x2d0>)
 8008c5a:	21ea      	movs	r1, #234	; 0xea
 8008c5c:	48a7      	ldr	r0, [pc, #668]	; (8008efc <_dtoa_r+0x2d4>)
 8008c5e:	f001 fbd1 	bl	800a404 <__assert_func>
 8008c62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c66:	6005      	str	r5, [r0, #0]
 8008c68:	60c5      	str	r5, [r0, #12]
 8008c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	b151      	cbz	r1, 8008c86 <_dtoa_r+0x5e>
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	604a      	str	r2, [r1, #4]
 8008c74:	2301      	movs	r3, #1
 8008c76:	4093      	lsls	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fe1c 	bl	80098b8 <_Bfree>
 8008c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	1e3b      	subs	r3, r7, #0
 8008c88:	bfaa      	itet	ge
 8008c8a:	2300      	movge	r3, #0
 8008c8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c90:	f8c8 3000 	strge.w	r3, [r8]
 8008c94:	4b9a      	ldr	r3, [pc, #616]	; (8008f00 <_dtoa_r+0x2d8>)
 8008c96:	bfbc      	itt	lt
 8008c98:	2201      	movlt	r2, #1
 8008c9a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c9e:	ea33 030b 	bics.w	r3, r3, fp
 8008ca2:	d11b      	bne.n	8008cdc <_dtoa_r+0xb4>
 8008ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ca6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cb0:	4333      	orrs	r3, r6
 8008cb2:	f000 8592 	beq.w	80097da <_dtoa_r+0xbb2>
 8008cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb8:	b963      	cbnz	r3, 8008cd4 <_dtoa_r+0xac>
 8008cba:	4b92      	ldr	r3, [pc, #584]	; (8008f04 <_dtoa_r+0x2dc>)
 8008cbc:	e022      	b.n	8008d04 <_dtoa_r+0xdc>
 8008cbe:	4b92      	ldr	r3, [pc, #584]	; (8008f08 <_dtoa_r+0x2e0>)
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	9801      	ldr	r0, [sp, #4]
 8008cca:	b013      	add	sp, #76	; 0x4c
 8008ccc:	ecbd 8b04 	vpop	{d8-d9}
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	4b8b      	ldr	r3, [pc, #556]	; (8008f04 <_dtoa_r+0x2dc>)
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	3303      	adds	r3, #3
 8008cda:	e7f3      	b.n	8008cc4 <_dtoa_r+0x9c>
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2300      	movs	r3, #0
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	4659      	mov	r1, fp
 8008ce4:	f7f7 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ce8:	ec4b ab19 	vmov	d9, sl, fp
 8008cec:	4680      	mov	r8, r0
 8008cee:	b158      	cbz	r0, 8008d08 <_dtoa_r+0xe0>
 8008cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 856b 	beq.w	80097d4 <_dtoa_r+0xbac>
 8008cfe:	4883      	ldr	r0, [pc, #524]	; (8008f0c <_dtoa_r+0x2e4>)
 8008d00:	6018      	str	r0, [r3, #0]
 8008d02:	1e43      	subs	r3, r0, #1
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	e7df      	b.n	8008cc8 <_dtoa_r+0xa0>
 8008d08:	ec4b ab10 	vmov	d0, sl, fp
 8008d0c:	aa10      	add	r2, sp, #64	; 0x40
 8008d0e:	a911      	add	r1, sp, #68	; 0x44
 8008d10:	4620      	mov	r0, r4
 8008d12:	f001 f8b9 	bl	8009e88 <__d2b>
 8008d16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008d1a:	ee08 0a10 	vmov	s16, r0
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	f000 8084 	beq.w	8008e2c <_dtoa_r+0x204>
 8008d24:	ee19 3a90 	vmov	r3, s19
 8008d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d30:	4656      	mov	r6, sl
 8008d32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d3e:	4b74      	ldr	r3, [pc, #464]	; (8008f10 <_dtoa_r+0x2e8>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 faa7 	bl	8000298 <__aeabi_dsub>
 8008d4a:	a365      	add	r3, pc, #404	; (adr r3, 8008ee0 <_dtoa_r+0x2b8>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fc5a 	bl	8000608 <__aeabi_dmul>
 8008d54:	a364      	add	r3, pc, #400	; (adr r3, 8008ee8 <_dtoa_r+0x2c0>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fa9f 	bl	800029c <__adddf3>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	4628      	mov	r0, r5
 8008d62:	460f      	mov	r7, r1
 8008d64:	f7f7 fbe6 	bl	8000534 <__aeabi_i2d>
 8008d68:	a361      	add	r3, pc, #388	; (adr r3, 8008ef0 <_dtoa_r+0x2c8>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fc4b 	bl	8000608 <__aeabi_dmul>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fa8f 	bl	800029c <__adddf3>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460f      	mov	r7, r1
 8008d82:	f7f7 fef1 	bl	8000b68 <__aeabi_d2iz>
 8008d86:	2200      	movs	r2, #0
 8008d88:	9000      	str	r0, [sp, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4639      	mov	r1, r7
 8008d90:	f7f7 feac 	bl	8000aec <__aeabi_dcmplt>
 8008d94:	b150      	cbz	r0, 8008dac <_dtoa_r+0x184>
 8008d96:	9800      	ldr	r0, [sp, #0]
 8008d98:	f7f7 fbcc 	bl	8000534 <__aeabi_i2d>
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	463b      	mov	r3, r7
 8008da0:	f7f7 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008da4:	b910      	cbnz	r0, 8008dac <_dtoa_r+0x184>
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	9b00      	ldr	r3, [sp, #0]
 8008dae:	2b16      	cmp	r3, #22
 8008db0:	d85a      	bhi.n	8008e68 <_dtoa_r+0x240>
 8008db2:	9a00      	ldr	r2, [sp, #0]
 8008db4:	4b57      	ldr	r3, [pc, #348]	; (8008f14 <_dtoa_r+0x2ec>)
 8008db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	ec51 0b19 	vmov	r0, r1, d9
 8008dc2:	f7f7 fe93 	bl	8000aec <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d050      	beq.n	8008e6c <_dtoa_r+0x244>
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dd6:	1b5d      	subs	r5, r3, r5
 8008dd8:	1e6b      	subs	r3, r5, #1
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	bf45      	ittet	mi
 8008dde:	f1c5 0301 	rsbmi	r3, r5, #1
 8008de2:	9304      	strmi	r3, [sp, #16]
 8008de4:	2300      	movpl	r3, #0
 8008de6:	2300      	movmi	r3, #0
 8008de8:	bf4c      	ite	mi
 8008dea:	9305      	strmi	r3, [sp, #20]
 8008dec:	9304      	strpl	r3, [sp, #16]
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	db3d      	blt.n	8008e70 <_dtoa_r+0x248>
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	9a00      	ldr	r2, [sp, #0]
 8008df8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dfa:	4413      	add	r3, r2
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9307      	str	r3, [sp, #28]
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	f200 8089 	bhi.w	8008f1c <_dtoa_r+0x2f4>
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	bfc4      	itt	gt
 8008e0e:	3b04      	subgt	r3, #4
 8008e10:	9306      	strgt	r3, [sp, #24]
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	f1a3 0302 	sub.w	r3, r3, #2
 8008e18:	bfcc      	ite	gt
 8008e1a:	2500      	movgt	r5, #0
 8008e1c:	2501      	movle	r5, #1
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	f200 8087 	bhi.w	8008f32 <_dtoa_r+0x30a>
 8008e24:	e8df f003 	tbb	[pc, r3]
 8008e28:	59383a2d 	.word	0x59383a2d
 8008e2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e30:	441d      	add	r5, r3
 8008e32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	bfc1      	itttt	gt
 8008e3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e42:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e4a:	bfda      	itte	le
 8008e4c:	f1c3 0320 	rsble	r3, r3, #32
 8008e50:	fa06 f003 	lslle.w	r0, r6, r3
 8008e54:	4318      	orrgt	r0, r3
 8008e56:	f7f7 fb5d 	bl	8000514 <__aeabi_ui2d>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e62:	3d01      	subs	r5, #1
 8008e64:	930e      	str	r3, [sp, #56]	; 0x38
 8008e66:	e76a      	b.n	8008d3e <_dtoa_r+0x116>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7b2      	b.n	8008dd2 <_dtoa_r+0x1aa>
 8008e6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e6e:	e7b1      	b.n	8008dd4 <_dtoa_r+0x1ac>
 8008e70:	9b04      	ldr	r3, [sp, #16]
 8008e72:	9a00      	ldr	r2, [sp, #0]
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	4253      	negs	r3, r2
 8008e7a:	9307      	str	r3, [sp, #28]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e80:	e7bf      	b.n	8008e02 <_dtoa_r+0x1da>
 8008e82:	2300      	movs	r3, #0
 8008e84:	9308      	str	r3, [sp, #32]
 8008e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc55      	bgt.n	8008f38 <_dtoa_r+0x310>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e92:	461a      	mov	r2, r3
 8008e94:	9209      	str	r2, [sp, #36]	; 0x24
 8008e96:	e00c      	b.n	8008eb2 <_dtoa_r+0x28a>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e7f3      	b.n	8008e84 <_dtoa_r+0x25c>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	9302      	str	r3, [sp, #8]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	bfb8      	it	lt
 8008eb0:	2301      	movlt	r3, #1
 8008eb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	6042      	str	r2, [r0, #4]
 8008eb8:	2204      	movs	r2, #4
 8008eba:	f102 0614 	add.w	r6, r2, #20
 8008ebe:	429e      	cmp	r6, r3
 8008ec0:	6841      	ldr	r1, [r0, #4]
 8008ec2:	d93d      	bls.n	8008f40 <_dtoa_r+0x318>
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fcb7 	bl	8009838 <_Balloc>
 8008eca:	9001      	str	r0, [sp, #4]
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d13b      	bne.n	8008f48 <_dtoa_r+0x320>
 8008ed0:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <_dtoa_r+0x2f0>)
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ed8:	e6c0      	b.n	8008c5c <_dtoa_r+0x34>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e7df      	b.n	8008e9e <_dtoa_r+0x276>
 8008ede:	bf00      	nop
 8008ee0:	636f4361 	.word	0x636f4361
 8008ee4:	3fd287a7 	.word	0x3fd287a7
 8008ee8:	8b60c8b3 	.word	0x8b60c8b3
 8008eec:	3fc68a28 	.word	0x3fc68a28
 8008ef0:	509f79fb 	.word	0x509f79fb
 8008ef4:	3fd34413 	.word	0x3fd34413
 8008ef8:	0800b569 	.word	0x0800b569
 8008efc:	0800b580 	.word	0x0800b580
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	0800b565 	.word	0x0800b565
 8008f08:	0800b55c 	.word	0x0800b55c
 8008f0c:	0800b539 	.word	0x0800b539
 8008f10:	3ff80000 	.word	0x3ff80000
 8008f14:	0800b670 	.word	0x0800b670
 8008f18:	0800b5db 	.word	0x0800b5db
 8008f1c:	2501      	movs	r5, #1
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9306      	str	r3, [sp, #24]
 8008f22:	9508      	str	r5, [sp, #32]
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2312      	movs	r3, #18
 8008f30:	e7b0      	b.n	8008e94 <_dtoa_r+0x26c>
 8008f32:	2301      	movs	r3, #1
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	e7f5      	b.n	8008f24 <_dtoa_r+0x2fc>
 8008f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f3e:	e7b8      	b.n	8008eb2 <_dtoa_r+0x28a>
 8008f40:	3101      	adds	r1, #1
 8008f42:	6041      	str	r1, [r0, #4]
 8008f44:	0052      	lsls	r2, r2, #1
 8008f46:	e7b8      	b.n	8008eba <_dtoa_r+0x292>
 8008f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f4a:	9a01      	ldr	r2, [sp, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	2b0e      	cmp	r3, #14
 8008f52:	f200 809d 	bhi.w	8009090 <_dtoa_r+0x468>
 8008f56:	2d00      	cmp	r5, #0
 8008f58:	f000 809a 	beq.w	8009090 <_dtoa_r+0x468>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd32      	ble.n	8008fc8 <_dtoa_r+0x3a0>
 8008f62:	4ab7      	ldr	r2, [pc, #732]	; (8009240 <_dtoa_r+0x618>)
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	05d8      	lsls	r0, r3, #23
 8008f74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f78:	d516      	bpl.n	8008fa8 <_dtoa_r+0x380>
 8008f7a:	4bb2      	ldr	r3, [pc, #712]	; (8009244 <_dtoa_r+0x61c>)
 8008f7c:	ec51 0b19 	vmov	r0, r1, d9
 8008f80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f84:	f7f7 fc6a 	bl	800085c <__aeabi_ddiv>
 8008f88:	f007 070f 	and.w	r7, r7, #15
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	468b      	mov	fp, r1
 8008f90:	2503      	movs	r5, #3
 8008f92:	4eac      	ldr	r6, [pc, #688]	; (8009244 <_dtoa_r+0x61c>)
 8008f94:	b957      	cbnz	r7, 8008fac <_dtoa_r+0x384>
 8008f96:	4642      	mov	r2, r8
 8008f98:	464b      	mov	r3, r9
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	f7f7 fc5d 	bl	800085c <__aeabi_ddiv>
 8008fa2:	4682      	mov	sl, r0
 8008fa4:	468b      	mov	fp, r1
 8008fa6:	e028      	b.n	8008ffa <_dtoa_r+0x3d2>
 8008fa8:	2502      	movs	r5, #2
 8008faa:	e7f2      	b.n	8008f92 <_dtoa_r+0x36a>
 8008fac:	07f9      	lsls	r1, r7, #31
 8008fae:	d508      	bpl.n	8008fc2 <_dtoa_r+0x39a>
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fb8:	f7f7 fb26 	bl	8000608 <__aeabi_dmul>
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4689      	mov	r9, r1
 8008fc2:	107f      	asrs	r7, r7, #1
 8008fc4:	3608      	adds	r6, #8
 8008fc6:	e7e5      	b.n	8008f94 <_dtoa_r+0x36c>
 8008fc8:	f000 809b 	beq.w	8009102 <_dtoa_r+0x4da>
 8008fcc:	9b00      	ldr	r3, [sp, #0]
 8008fce:	4f9d      	ldr	r7, [pc, #628]	; (8009244 <_dtoa_r+0x61c>)
 8008fd0:	425e      	negs	r6, r3
 8008fd2:	4b9b      	ldr	r3, [pc, #620]	; (8009240 <_dtoa_r+0x618>)
 8008fd4:	f006 020f 	and.w	r2, r6, #15
 8008fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	ec51 0b19 	vmov	r0, r1, d9
 8008fe4:	f7f7 fb10 	bl	8000608 <__aeabi_dmul>
 8008fe8:	1136      	asrs	r6, r6, #4
 8008fea:	4682      	mov	sl, r0
 8008fec:	468b      	mov	fp, r1
 8008fee:	2300      	movs	r3, #0
 8008ff0:	2502      	movs	r5, #2
 8008ff2:	2e00      	cmp	r6, #0
 8008ff4:	d17a      	bne.n	80090ec <_dtoa_r+0x4c4>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1d3      	bne.n	8008fa2 <_dtoa_r+0x37a>
 8008ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8082 	beq.w	8009106 <_dtoa_r+0x4de>
 8009002:	4b91      	ldr	r3, [pc, #580]	; (8009248 <_dtoa_r+0x620>)
 8009004:	2200      	movs	r2, #0
 8009006:	4650      	mov	r0, sl
 8009008:	4659      	mov	r1, fp
 800900a:	f7f7 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800900e:	2800      	cmp	r0, #0
 8009010:	d079      	beq.n	8009106 <_dtoa_r+0x4de>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d076      	beq.n	8009106 <_dtoa_r+0x4de>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd36      	ble.n	800908c <_dtoa_r+0x464>
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	4650      	mov	r0, sl
 8009022:	4659      	mov	r1, fp
 8009024:	1e5f      	subs	r7, r3, #1
 8009026:	2200      	movs	r2, #0
 8009028:	4b88      	ldr	r3, [pc, #544]	; (800924c <_dtoa_r+0x624>)
 800902a:	f7f7 faed 	bl	8000608 <__aeabi_dmul>
 800902e:	9e02      	ldr	r6, [sp, #8]
 8009030:	4682      	mov	sl, r0
 8009032:	468b      	mov	fp, r1
 8009034:	3501      	adds	r5, #1
 8009036:	4628      	mov	r0, r5
 8009038:	f7f7 fa7c 	bl	8000534 <__aeabi_i2d>
 800903c:	4652      	mov	r2, sl
 800903e:	465b      	mov	r3, fp
 8009040:	f7f7 fae2 	bl	8000608 <__aeabi_dmul>
 8009044:	4b82      	ldr	r3, [pc, #520]	; (8009250 <_dtoa_r+0x628>)
 8009046:	2200      	movs	r2, #0
 8009048:	f7f7 f928 	bl	800029c <__adddf3>
 800904c:	46d0      	mov	r8, sl
 800904e:	46d9      	mov	r9, fp
 8009050:	4682      	mov	sl, r0
 8009052:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009056:	2e00      	cmp	r6, #0
 8009058:	d158      	bne.n	800910c <_dtoa_r+0x4e4>
 800905a:	4b7e      	ldr	r3, [pc, #504]	; (8009254 <_dtoa_r+0x62c>)
 800905c:	2200      	movs	r2, #0
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 f919 	bl	8000298 <__aeabi_dsub>
 8009066:	4652      	mov	r2, sl
 8009068:	465b      	mov	r3, fp
 800906a:	4680      	mov	r8, r0
 800906c:	4689      	mov	r9, r1
 800906e:	f7f7 fd5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009072:	2800      	cmp	r0, #0
 8009074:	f040 8295 	bne.w	80095a2 <_dtoa_r+0x97a>
 8009078:	4652      	mov	r2, sl
 800907a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 fd33 	bl	8000aec <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	f040 8289 	bne.w	800959e <_dtoa_r+0x976>
 800908c:	ec5b ab19 	vmov	sl, fp, d9
 8009090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009092:	2b00      	cmp	r3, #0
 8009094:	f2c0 8148 	blt.w	8009328 <_dtoa_r+0x700>
 8009098:	9a00      	ldr	r2, [sp, #0]
 800909a:	2a0e      	cmp	r2, #14
 800909c:	f300 8144 	bgt.w	8009328 <_dtoa_r+0x700>
 80090a0:	4b67      	ldr	r3, [pc, #412]	; (8009240 <_dtoa_r+0x618>)
 80090a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f280 80d5 	bge.w	800925c <_dtoa_r+0x634>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f300 80d1 	bgt.w	800925c <_dtoa_r+0x634>
 80090ba:	f040 826f 	bne.w	800959c <_dtoa_r+0x974>
 80090be:	4b65      	ldr	r3, [pc, #404]	; (8009254 <_dtoa_r+0x62c>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 fa9f 	bl	8000608 <__aeabi_dmul>
 80090ca:	4652      	mov	r2, sl
 80090cc:	465b      	mov	r3, fp
 80090ce:	f7f7 fd21 	bl	8000b14 <__aeabi_dcmpge>
 80090d2:	9e03      	ldr	r6, [sp, #12]
 80090d4:	4637      	mov	r7, r6
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f040 8245 	bne.w	8009566 <_dtoa_r+0x93e>
 80090dc:	9d01      	ldr	r5, [sp, #4]
 80090de:	2331      	movs	r3, #49	; 0x31
 80090e0:	f805 3b01 	strb.w	r3, [r5], #1
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	e240      	b.n	800956e <_dtoa_r+0x946>
 80090ec:	07f2      	lsls	r2, r6, #31
 80090ee:	d505      	bpl.n	80090fc <_dtoa_r+0x4d4>
 80090f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	3501      	adds	r5, #1
 80090fa:	2301      	movs	r3, #1
 80090fc:	1076      	asrs	r6, r6, #1
 80090fe:	3708      	adds	r7, #8
 8009100:	e777      	b.n	8008ff2 <_dtoa_r+0x3ca>
 8009102:	2502      	movs	r5, #2
 8009104:	e779      	b.n	8008ffa <_dtoa_r+0x3d2>
 8009106:	9f00      	ldr	r7, [sp, #0]
 8009108:	9e03      	ldr	r6, [sp, #12]
 800910a:	e794      	b.n	8009036 <_dtoa_r+0x40e>
 800910c:	9901      	ldr	r1, [sp, #4]
 800910e:	4b4c      	ldr	r3, [pc, #304]	; (8009240 <_dtoa_r+0x618>)
 8009110:	4431      	add	r1, r6
 8009112:	910d      	str	r1, [sp, #52]	; 0x34
 8009114:	9908      	ldr	r1, [sp, #32]
 8009116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800911a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800911e:	2900      	cmp	r1, #0
 8009120:	d043      	beq.n	80091aa <_dtoa_r+0x582>
 8009122:	494d      	ldr	r1, [pc, #308]	; (8009258 <_dtoa_r+0x630>)
 8009124:	2000      	movs	r0, #0
 8009126:	f7f7 fb99 	bl	800085c <__aeabi_ddiv>
 800912a:	4652      	mov	r2, sl
 800912c:	465b      	mov	r3, fp
 800912e:	f7f7 f8b3 	bl	8000298 <__aeabi_dsub>
 8009132:	9d01      	ldr	r5, [sp, #4]
 8009134:	4682      	mov	sl, r0
 8009136:	468b      	mov	fp, r1
 8009138:	4649      	mov	r1, r9
 800913a:	4640      	mov	r0, r8
 800913c:	f7f7 fd14 	bl	8000b68 <__aeabi_d2iz>
 8009140:	4606      	mov	r6, r0
 8009142:	f7f7 f9f7 	bl	8000534 <__aeabi_i2d>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 f8a3 	bl	8000298 <__aeabi_dsub>
 8009152:	3630      	adds	r6, #48	; 0x30
 8009154:	f805 6b01 	strb.w	r6, [r5], #1
 8009158:	4652      	mov	r2, sl
 800915a:	465b      	mov	r3, fp
 800915c:	4680      	mov	r8, r0
 800915e:	4689      	mov	r9, r1
 8009160:	f7f7 fcc4 	bl	8000aec <__aeabi_dcmplt>
 8009164:	2800      	cmp	r0, #0
 8009166:	d163      	bne.n	8009230 <_dtoa_r+0x608>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4936      	ldr	r1, [pc, #216]	; (8009248 <_dtoa_r+0x620>)
 800916e:	2000      	movs	r0, #0
 8009170:	f7f7 f892 	bl	8000298 <__aeabi_dsub>
 8009174:	4652      	mov	r2, sl
 8009176:	465b      	mov	r3, fp
 8009178:	f7f7 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800917c:	2800      	cmp	r0, #0
 800917e:	f040 80b5 	bne.w	80092ec <_dtoa_r+0x6c4>
 8009182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009184:	429d      	cmp	r5, r3
 8009186:	d081      	beq.n	800908c <_dtoa_r+0x464>
 8009188:	4b30      	ldr	r3, [pc, #192]	; (800924c <_dtoa_r+0x624>)
 800918a:	2200      	movs	r2, #0
 800918c:	4650      	mov	r0, sl
 800918e:	4659      	mov	r1, fp
 8009190:	f7f7 fa3a 	bl	8000608 <__aeabi_dmul>
 8009194:	4b2d      	ldr	r3, [pc, #180]	; (800924c <_dtoa_r+0x624>)
 8009196:	4682      	mov	sl, r0
 8009198:	468b      	mov	fp, r1
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	2200      	movs	r2, #0
 80091a0:	f7f7 fa32 	bl	8000608 <__aeabi_dmul>
 80091a4:	4680      	mov	r8, r0
 80091a6:	4689      	mov	r9, r1
 80091a8:	e7c6      	b.n	8009138 <_dtoa_r+0x510>
 80091aa:	4650      	mov	r0, sl
 80091ac:	4659      	mov	r1, fp
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b4:	9d01      	ldr	r5, [sp, #4]
 80091b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b8:	4682      	mov	sl, r0
 80091ba:	468b      	mov	fp, r1
 80091bc:	4649      	mov	r1, r9
 80091be:	4640      	mov	r0, r8
 80091c0:	f7f7 fcd2 	bl	8000b68 <__aeabi_d2iz>
 80091c4:	4606      	mov	r6, r0
 80091c6:	f7f7 f9b5 	bl	8000534 <__aeabi_i2d>
 80091ca:	3630      	adds	r6, #48	; 0x30
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 f860 	bl	8000298 <__aeabi_dsub>
 80091d8:	f805 6b01 	strb.w	r6, [r5], #1
 80091dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091de:	429d      	cmp	r5, r3
 80091e0:	4680      	mov	r8, r0
 80091e2:	4689      	mov	r9, r1
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	d124      	bne.n	8009234 <_dtoa_r+0x60c>
 80091ea:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <_dtoa_r+0x630>)
 80091ec:	4650      	mov	r0, sl
 80091ee:	4659      	mov	r1, fp
 80091f0:	f7f7 f854 	bl	800029c <__adddf3>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7f7 fc94 	bl	8000b28 <__aeabi_dcmpgt>
 8009200:	2800      	cmp	r0, #0
 8009202:	d173      	bne.n	80092ec <_dtoa_r+0x6c4>
 8009204:	4652      	mov	r2, sl
 8009206:	465b      	mov	r3, fp
 8009208:	4913      	ldr	r1, [pc, #76]	; (8009258 <_dtoa_r+0x630>)
 800920a:	2000      	movs	r0, #0
 800920c:	f7f7 f844 	bl	8000298 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4640      	mov	r0, r8
 8009216:	4649      	mov	r1, r9
 8009218:	f7f7 fc68 	bl	8000aec <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	f43f af35 	beq.w	800908c <_dtoa_r+0x464>
 8009222:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009224:	1e6b      	subs	r3, r5, #1
 8009226:	930f      	str	r3, [sp, #60]	; 0x3c
 8009228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800922c:	2b30      	cmp	r3, #48	; 0x30
 800922e:	d0f8      	beq.n	8009222 <_dtoa_r+0x5fa>
 8009230:	9700      	str	r7, [sp, #0]
 8009232:	e049      	b.n	80092c8 <_dtoa_r+0x6a0>
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <_dtoa_r+0x624>)
 8009236:	f7f7 f9e7 	bl	8000608 <__aeabi_dmul>
 800923a:	4680      	mov	r8, r0
 800923c:	4689      	mov	r9, r1
 800923e:	e7bd      	b.n	80091bc <_dtoa_r+0x594>
 8009240:	0800b670 	.word	0x0800b670
 8009244:	0800b648 	.word	0x0800b648
 8009248:	3ff00000 	.word	0x3ff00000
 800924c:	40240000 	.word	0x40240000
 8009250:	401c0000 	.word	0x401c0000
 8009254:	40140000 	.word	0x40140000
 8009258:	3fe00000 	.word	0x3fe00000
 800925c:	9d01      	ldr	r5, [sp, #4]
 800925e:	4656      	mov	r6, sl
 8009260:	465f      	mov	r7, fp
 8009262:	4642      	mov	r2, r8
 8009264:	464b      	mov	r3, r9
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 faf7 	bl	800085c <__aeabi_ddiv>
 800926e:	f7f7 fc7b 	bl	8000b68 <__aeabi_d2iz>
 8009272:	4682      	mov	sl, r0
 8009274:	f7f7 f95e 	bl	8000534 <__aeabi_i2d>
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	f7f7 f9c4 	bl	8000608 <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4630      	mov	r0, r6
 8009286:	4639      	mov	r1, r7
 8009288:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800928c:	f7f7 f804 	bl	8000298 <__aeabi_dsub>
 8009290:	f805 6b01 	strb.w	r6, [r5], #1
 8009294:	9e01      	ldr	r6, [sp, #4]
 8009296:	9f03      	ldr	r7, [sp, #12]
 8009298:	1bae      	subs	r6, r5, r6
 800929a:	42b7      	cmp	r7, r6
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	d135      	bne.n	800930e <_dtoa_r+0x6e6>
 80092a2:	f7f6 fffb 	bl	800029c <__adddf3>
 80092a6:	4642      	mov	r2, r8
 80092a8:	464b      	mov	r3, r9
 80092aa:	4606      	mov	r6, r0
 80092ac:	460f      	mov	r7, r1
 80092ae:	f7f7 fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 80092b2:	b9d0      	cbnz	r0, 80092ea <_dtoa_r+0x6c2>
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80092c0:	b110      	cbz	r0, 80092c8 <_dtoa_r+0x6a0>
 80092c2:	f01a 0f01 	tst.w	sl, #1
 80092c6:	d110      	bne.n	80092ea <_dtoa_r+0x6c2>
 80092c8:	4620      	mov	r0, r4
 80092ca:	ee18 1a10 	vmov	r1, s16
 80092ce:	f000 faf3 	bl	80098b8 <_Bfree>
 80092d2:	2300      	movs	r3, #0
 80092d4:	9800      	ldr	r0, [sp, #0]
 80092d6:	702b      	strb	r3, [r5, #0]
 80092d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092da:	3001      	adds	r0, #1
 80092dc:	6018      	str	r0, [r3, #0]
 80092de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f43f acf1 	beq.w	8008cc8 <_dtoa_r+0xa0>
 80092e6:	601d      	str	r5, [r3, #0]
 80092e8:	e4ee      	b.n	8008cc8 <_dtoa_r+0xa0>
 80092ea:	9f00      	ldr	r7, [sp, #0]
 80092ec:	462b      	mov	r3, r5
 80092ee:	461d      	mov	r5, r3
 80092f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f4:	2a39      	cmp	r2, #57	; 0x39
 80092f6:	d106      	bne.n	8009306 <_dtoa_r+0x6de>
 80092f8:	9a01      	ldr	r2, [sp, #4]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d1f7      	bne.n	80092ee <_dtoa_r+0x6c6>
 80092fe:	9901      	ldr	r1, [sp, #4]
 8009300:	2230      	movs	r2, #48	; 0x30
 8009302:	3701      	adds	r7, #1
 8009304:	700a      	strb	r2, [r1, #0]
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	3201      	adds	r2, #1
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e790      	b.n	8009230 <_dtoa_r+0x608>
 800930e:	4ba6      	ldr	r3, [pc, #664]	; (80095a8 <_dtoa_r+0x980>)
 8009310:	2200      	movs	r2, #0
 8009312:	f7f7 f979 	bl	8000608 <__aeabi_dmul>
 8009316:	2200      	movs	r2, #0
 8009318:	2300      	movs	r3, #0
 800931a:	4606      	mov	r6, r0
 800931c:	460f      	mov	r7, r1
 800931e:	f7f7 fbdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009322:	2800      	cmp	r0, #0
 8009324:	d09d      	beq.n	8009262 <_dtoa_r+0x63a>
 8009326:	e7cf      	b.n	80092c8 <_dtoa_r+0x6a0>
 8009328:	9a08      	ldr	r2, [sp, #32]
 800932a:	2a00      	cmp	r2, #0
 800932c:	f000 80d7 	beq.w	80094de <_dtoa_r+0x8b6>
 8009330:	9a06      	ldr	r2, [sp, #24]
 8009332:	2a01      	cmp	r2, #1
 8009334:	f300 80ba 	bgt.w	80094ac <_dtoa_r+0x884>
 8009338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800933a:	2a00      	cmp	r2, #0
 800933c:	f000 80b2 	beq.w	80094a4 <_dtoa_r+0x87c>
 8009340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009344:	9e07      	ldr	r6, [sp, #28]
 8009346:	9d04      	ldr	r5, [sp, #16]
 8009348:	9a04      	ldr	r2, [sp, #16]
 800934a:	441a      	add	r2, r3
 800934c:	9204      	str	r2, [sp, #16]
 800934e:	9a05      	ldr	r2, [sp, #20]
 8009350:	2101      	movs	r1, #1
 8009352:	441a      	add	r2, r3
 8009354:	4620      	mov	r0, r4
 8009356:	9205      	str	r2, [sp, #20]
 8009358:	f000 fb66 	bl	8009a28 <__i2b>
 800935c:	4607      	mov	r7, r0
 800935e:	2d00      	cmp	r5, #0
 8009360:	dd0c      	ble.n	800937c <_dtoa_r+0x754>
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd09      	ble.n	800937c <_dtoa_r+0x754>
 8009368:	42ab      	cmp	r3, r5
 800936a:	9a04      	ldr	r2, [sp, #16]
 800936c:	bfa8      	it	ge
 800936e:	462b      	movge	r3, r5
 8009370:	1ad2      	subs	r2, r2, r3
 8009372:	9204      	str	r2, [sp, #16]
 8009374:	9a05      	ldr	r2, [sp, #20]
 8009376:	1aed      	subs	r5, r5, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	b31b      	cbz	r3, 80093c8 <_dtoa_r+0x7a0>
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80af 	beq.w	80094e6 <_dtoa_r+0x8be>
 8009388:	2e00      	cmp	r6, #0
 800938a:	dd13      	ble.n	80093b4 <_dtoa_r+0x78c>
 800938c:	4639      	mov	r1, r7
 800938e:	4632      	mov	r2, r6
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fc09 	bl	8009ba8 <__pow5mult>
 8009396:	ee18 2a10 	vmov	r2, s16
 800939a:	4601      	mov	r1, r0
 800939c:	4607      	mov	r7, r0
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fb58 	bl	8009a54 <__multiply>
 80093a4:	ee18 1a10 	vmov	r1, s16
 80093a8:	4680      	mov	r8, r0
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fa84 	bl	80098b8 <_Bfree>
 80093b0:	ee08 8a10 	vmov	s16, r8
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	1b9a      	subs	r2, r3, r6
 80093b8:	d006      	beq.n	80093c8 <_dtoa_r+0x7a0>
 80093ba:	ee18 1a10 	vmov	r1, s16
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fbf2 	bl	8009ba8 <__pow5mult>
 80093c4:	ee08 0a10 	vmov	s16, r0
 80093c8:	2101      	movs	r1, #1
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fb2c 	bl	8009a28 <__i2b>
 80093d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	f340 8088 	ble.w	80094ea <_dtoa_r+0x8c2>
 80093da:	461a      	mov	r2, r3
 80093dc:	4601      	mov	r1, r0
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fbe2 	bl	8009ba8 <__pow5mult>
 80093e4:	9b06      	ldr	r3, [sp, #24]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	4606      	mov	r6, r0
 80093ea:	f340 8081 	ble.w	80094f0 <_dtoa_r+0x8c8>
 80093ee:	f04f 0800 	mov.w	r8, #0
 80093f2:	6933      	ldr	r3, [r6, #16]
 80093f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093f8:	6918      	ldr	r0, [r3, #16]
 80093fa:	f000 fac5 	bl	8009988 <__hi0bits>
 80093fe:	f1c0 0020 	rsb	r0, r0, #32
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	4418      	add	r0, r3
 8009406:	f010 001f 	ands.w	r0, r0, #31
 800940a:	f000 8092 	beq.w	8009532 <_dtoa_r+0x90a>
 800940e:	f1c0 0320 	rsb	r3, r0, #32
 8009412:	2b04      	cmp	r3, #4
 8009414:	f340 808a 	ble.w	800952c <_dtoa_r+0x904>
 8009418:	f1c0 001c 	rsb	r0, r0, #28
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	4403      	add	r3, r0
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	4403      	add	r3, r0
 8009426:	4405      	add	r5, r0
 8009428:	9305      	str	r3, [sp, #20]
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	dd07      	ble.n	8009440 <_dtoa_r+0x818>
 8009430:	ee18 1a10 	vmov	r1, s16
 8009434:	461a      	mov	r2, r3
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fc10 	bl	8009c5c <__lshift>
 800943c:	ee08 0a10 	vmov	s16, r0
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	dd05      	ble.n	8009452 <_dtoa_r+0x82a>
 8009446:	4631      	mov	r1, r6
 8009448:	461a      	mov	r2, r3
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fc06 	bl	8009c5c <__lshift>
 8009450:	4606      	mov	r6, r0
 8009452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d06e      	beq.n	8009536 <_dtoa_r+0x90e>
 8009458:	ee18 0a10 	vmov	r0, s16
 800945c:	4631      	mov	r1, r6
 800945e:	f000 fc6d 	bl	8009d3c <__mcmp>
 8009462:	2800      	cmp	r0, #0
 8009464:	da67      	bge.n	8009536 <_dtoa_r+0x90e>
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	3b01      	subs	r3, #1
 800946a:	ee18 1a10 	vmov	r1, s16
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	220a      	movs	r2, #10
 8009472:	2300      	movs	r3, #0
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fa41 	bl	80098fc <__multadd>
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	ee08 0a10 	vmov	s16, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 81b1 	beq.w	80097e8 <_dtoa_r+0xbc0>
 8009486:	2300      	movs	r3, #0
 8009488:	4639      	mov	r1, r7
 800948a:	220a      	movs	r2, #10
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fa35 	bl	80098fc <__multadd>
 8009492:	9b02      	ldr	r3, [sp, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	4607      	mov	r7, r0
 8009498:	f300 808e 	bgt.w	80095b8 <_dtoa_r+0x990>
 800949c:	9b06      	ldr	r3, [sp, #24]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	dc51      	bgt.n	8009546 <_dtoa_r+0x91e>
 80094a2:	e089      	b.n	80095b8 <_dtoa_r+0x990>
 80094a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094aa:	e74b      	b.n	8009344 <_dtoa_r+0x71c>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1e5e      	subs	r6, r3, #1
 80094b0:	9b07      	ldr	r3, [sp, #28]
 80094b2:	42b3      	cmp	r3, r6
 80094b4:	bfbf      	itttt	lt
 80094b6:	9b07      	ldrlt	r3, [sp, #28]
 80094b8:	9607      	strlt	r6, [sp, #28]
 80094ba:	1af2      	sublt	r2, r6, r3
 80094bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80094be:	bfb6      	itet	lt
 80094c0:	189b      	addlt	r3, r3, r2
 80094c2:	1b9e      	subge	r6, r3, r6
 80094c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	bfb8      	it	lt
 80094ca:	2600      	movlt	r6, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bfb7      	itett	lt
 80094d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094d8:	1a9d      	sublt	r5, r3, r2
 80094da:	2300      	movlt	r3, #0
 80094dc:	e734      	b.n	8009348 <_dtoa_r+0x720>
 80094de:	9e07      	ldr	r6, [sp, #28]
 80094e0:	9d04      	ldr	r5, [sp, #16]
 80094e2:	9f08      	ldr	r7, [sp, #32]
 80094e4:	e73b      	b.n	800935e <_dtoa_r+0x736>
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	e767      	b.n	80093ba <_dtoa_r+0x792>
 80094ea:	9b06      	ldr	r3, [sp, #24]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	dc18      	bgt.n	8009522 <_dtoa_r+0x8fa>
 80094f0:	f1ba 0f00 	cmp.w	sl, #0
 80094f4:	d115      	bne.n	8009522 <_dtoa_r+0x8fa>
 80094f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094fa:	b993      	cbnz	r3, 8009522 <_dtoa_r+0x8fa>
 80094fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009500:	0d1b      	lsrs	r3, r3, #20
 8009502:	051b      	lsls	r3, r3, #20
 8009504:	b183      	cbz	r3, 8009528 <_dtoa_r+0x900>
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	3301      	adds	r3, #1
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	9b05      	ldr	r3, [sp, #20]
 800950e:	3301      	adds	r3, #1
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	f04f 0801 	mov.w	r8, #1
 8009516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009518:	2b00      	cmp	r3, #0
 800951a:	f47f af6a 	bne.w	80093f2 <_dtoa_r+0x7ca>
 800951e:	2001      	movs	r0, #1
 8009520:	e76f      	b.n	8009402 <_dtoa_r+0x7da>
 8009522:	f04f 0800 	mov.w	r8, #0
 8009526:	e7f6      	b.n	8009516 <_dtoa_r+0x8ee>
 8009528:	4698      	mov	r8, r3
 800952a:	e7f4      	b.n	8009516 <_dtoa_r+0x8ee>
 800952c:	f43f af7d 	beq.w	800942a <_dtoa_r+0x802>
 8009530:	4618      	mov	r0, r3
 8009532:	301c      	adds	r0, #28
 8009534:	e772      	b.n	800941c <_dtoa_r+0x7f4>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc37      	bgt.n	80095ac <_dtoa_r+0x984>
 800953c:	9b06      	ldr	r3, [sp, #24]
 800953e:	2b02      	cmp	r3, #2
 8009540:	dd34      	ble.n	80095ac <_dtoa_r+0x984>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	9b02      	ldr	r3, [sp, #8]
 8009548:	b96b      	cbnz	r3, 8009566 <_dtoa_r+0x93e>
 800954a:	4631      	mov	r1, r6
 800954c:	2205      	movs	r2, #5
 800954e:	4620      	mov	r0, r4
 8009550:	f000 f9d4 	bl	80098fc <__multadd>
 8009554:	4601      	mov	r1, r0
 8009556:	4606      	mov	r6, r0
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	f000 fbee 	bl	8009d3c <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	f73f adbb 	bgt.w	80090dc <_dtoa_r+0x4b4>
 8009566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009568:	9d01      	ldr	r5, [sp, #4]
 800956a:	43db      	mvns	r3, r3
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	4631      	mov	r1, r6
 8009574:	4620      	mov	r0, r4
 8009576:	f000 f99f 	bl	80098b8 <_Bfree>
 800957a:	2f00      	cmp	r7, #0
 800957c:	f43f aea4 	beq.w	80092c8 <_dtoa_r+0x6a0>
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	d005      	beq.n	8009592 <_dtoa_r+0x96a>
 8009586:	45b8      	cmp	r8, r7
 8009588:	d003      	beq.n	8009592 <_dtoa_r+0x96a>
 800958a:	4641      	mov	r1, r8
 800958c:	4620      	mov	r0, r4
 800958e:	f000 f993 	bl	80098b8 <_Bfree>
 8009592:	4639      	mov	r1, r7
 8009594:	4620      	mov	r0, r4
 8009596:	f000 f98f 	bl	80098b8 <_Bfree>
 800959a:	e695      	b.n	80092c8 <_dtoa_r+0x6a0>
 800959c:	2600      	movs	r6, #0
 800959e:	4637      	mov	r7, r6
 80095a0:	e7e1      	b.n	8009566 <_dtoa_r+0x93e>
 80095a2:	9700      	str	r7, [sp, #0]
 80095a4:	4637      	mov	r7, r6
 80095a6:	e599      	b.n	80090dc <_dtoa_r+0x4b4>
 80095a8:	40240000 	.word	0x40240000
 80095ac:	9b08      	ldr	r3, [sp, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80ca 	beq.w	8009748 <_dtoa_r+0xb20>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	9302      	str	r3, [sp, #8]
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	dd05      	ble.n	80095c8 <_dtoa_r+0x9a0>
 80095bc:	4639      	mov	r1, r7
 80095be:	462a      	mov	r2, r5
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fb4b 	bl	8009c5c <__lshift>
 80095c6:	4607      	mov	r7, r0
 80095c8:	f1b8 0f00 	cmp.w	r8, #0
 80095cc:	d05b      	beq.n	8009686 <_dtoa_r+0xa5e>
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 f931 	bl	8009838 <_Balloc>
 80095d6:	4605      	mov	r5, r0
 80095d8:	b928      	cbnz	r0, 80095e6 <_dtoa_r+0x9be>
 80095da:	4b87      	ldr	r3, [pc, #540]	; (80097f8 <_dtoa_r+0xbd0>)
 80095dc:	4602      	mov	r2, r0
 80095de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095e2:	f7ff bb3b 	b.w	8008c5c <_dtoa_r+0x34>
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	3202      	adds	r2, #2
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	f107 010c 	add.w	r1, r7, #12
 80095f0:	300c      	adds	r0, #12
 80095f2:	f000 f913 	bl	800981c <memcpy>
 80095f6:	2201      	movs	r2, #1
 80095f8:	4629      	mov	r1, r5
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fb2e 	bl	8009c5c <__lshift>
 8009600:	9b01      	ldr	r3, [sp, #4]
 8009602:	f103 0901 	add.w	r9, r3, #1
 8009606:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800960a:	4413      	add	r3, r2
 800960c:	9305      	str	r3, [sp, #20]
 800960e:	f00a 0301 	and.w	r3, sl, #1
 8009612:	46b8      	mov	r8, r7
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	4607      	mov	r7, r0
 8009618:	4631      	mov	r1, r6
 800961a:	ee18 0a10 	vmov	r0, s16
 800961e:	f7ff fa77 	bl	8008b10 <quorem>
 8009622:	4641      	mov	r1, r8
 8009624:	9002      	str	r0, [sp, #8]
 8009626:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	f000 fb85 	bl	8009d3c <__mcmp>
 8009632:	463a      	mov	r2, r7
 8009634:	9003      	str	r0, [sp, #12]
 8009636:	4631      	mov	r1, r6
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fb9b 	bl	8009d74 <__mdiff>
 800963e:	68c2      	ldr	r2, [r0, #12]
 8009640:	f109 3bff 	add.w	fp, r9, #4294967295
 8009644:	4605      	mov	r5, r0
 8009646:	bb02      	cbnz	r2, 800968a <_dtoa_r+0xa62>
 8009648:	4601      	mov	r1, r0
 800964a:	ee18 0a10 	vmov	r0, s16
 800964e:	f000 fb75 	bl	8009d3c <__mcmp>
 8009652:	4602      	mov	r2, r0
 8009654:	4629      	mov	r1, r5
 8009656:	4620      	mov	r0, r4
 8009658:	9207      	str	r2, [sp, #28]
 800965a:	f000 f92d 	bl	80098b8 <_Bfree>
 800965e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009662:	ea43 0102 	orr.w	r1, r3, r2
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	430b      	orrs	r3, r1
 800966a:	464d      	mov	r5, r9
 800966c:	d10f      	bne.n	800968e <_dtoa_r+0xa66>
 800966e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009672:	d02a      	beq.n	80096ca <_dtoa_r+0xaa2>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dd02      	ble.n	8009680 <_dtoa_r+0xa58>
 800967a:	9b02      	ldr	r3, [sp, #8]
 800967c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009680:	f88b a000 	strb.w	sl, [fp]
 8009684:	e775      	b.n	8009572 <_dtoa_r+0x94a>
 8009686:	4638      	mov	r0, r7
 8009688:	e7ba      	b.n	8009600 <_dtoa_r+0x9d8>
 800968a:	2201      	movs	r2, #1
 800968c:	e7e2      	b.n	8009654 <_dtoa_r+0xa2c>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db04      	blt.n	800969e <_dtoa_r+0xa76>
 8009694:	9906      	ldr	r1, [sp, #24]
 8009696:	430b      	orrs	r3, r1
 8009698:	9904      	ldr	r1, [sp, #16]
 800969a:	430b      	orrs	r3, r1
 800969c:	d122      	bne.n	80096e4 <_dtoa_r+0xabc>
 800969e:	2a00      	cmp	r2, #0
 80096a0:	ddee      	ble.n	8009680 <_dtoa_r+0xa58>
 80096a2:	ee18 1a10 	vmov	r1, s16
 80096a6:	2201      	movs	r2, #1
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fad7 	bl	8009c5c <__lshift>
 80096ae:	4631      	mov	r1, r6
 80096b0:	ee08 0a10 	vmov	s16, r0
 80096b4:	f000 fb42 	bl	8009d3c <__mcmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dc03      	bgt.n	80096c4 <_dtoa_r+0xa9c>
 80096bc:	d1e0      	bne.n	8009680 <_dtoa_r+0xa58>
 80096be:	f01a 0f01 	tst.w	sl, #1
 80096c2:	d0dd      	beq.n	8009680 <_dtoa_r+0xa58>
 80096c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096c8:	d1d7      	bne.n	800967a <_dtoa_r+0xa52>
 80096ca:	2339      	movs	r3, #57	; 0x39
 80096cc:	f88b 3000 	strb.w	r3, [fp]
 80096d0:	462b      	mov	r3, r5
 80096d2:	461d      	mov	r5, r3
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096da:	2a39      	cmp	r2, #57	; 0x39
 80096dc:	d071      	beq.n	80097c2 <_dtoa_r+0xb9a>
 80096de:	3201      	adds	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e746      	b.n	8009572 <_dtoa_r+0x94a>
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	dd07      	ble.n	80096f8 <_dtoa_r+0xad0>
 80096e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096ec:	d0ed      	beq.n	80096ca <_dtoa_r+0xaa2>
 80096ee:	f10a 0301 	add.w	r3, sl, #1
 80096f2:	f88b 3000 	strb.w	r3, [fp]
 80096f6:	e73c      	b.n	8009572 <_dtoa_r+0x94a>
 80096f8:	9b05      	ldr	r3, [sp, #20]
 80096fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096fe:	4599      	cmp	r9, r3
 8009700:	d047      	beq.n	8009792 <_dtoa_r+0xb6a>
 8009702:	ee18 1a10 	vmov	r1, s16
 8009706:	2300      	movs	r3, #0
 8009708:	220a      	movs	r2, #10
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f8f6 	bl	80098fc <__multadd>
 8009710:	45b8      	cmp	r8, r7
 8009712:	ee08 0a10 	vmov	s16, r0
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	f04f 020a 	mov.w	r2, #10
 800971e:	4641      	mov	r1, r8
 8009720:	4620      	mov	r0, r4
 8009722:	d106      	bne.n	8009732 <_dtoa_r+0xb0a>
 8009724:	f000 f8ea 	bl	80098fc <__multadd>
 8009728:	4680      	mov	r8, r0
 800972a:	4607      	mov	r7, r0
 800972c:	f109 0901 	add.w	r9, r9, #1
 8009730:	e772      	b.n	8009618 <_dtoa_r+0x9f0>
 8009732:	f000 f8e3 	bl	80098fc <__multadd>
 8009736:	4639      	mov	r1, r7
 8009738:	4680      	mov	r8, r0
 800973a:	2300      	movs	r3, #0
 800973c:	220a      	movs	r2, #10
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f8dc 	bl	80098fc <__multadd>
 8009744:	4607      	mov	r7, r0
 8009746:	e7f1      	b.n	800972c <_dtoa_r+0xb04>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	9302      	str	r3, [sp, #8]
 800974c:	9d01      	ldr	r5, [sp, #4]
 800974e:	ee18 0a10 	vmov	r0, s16
 8009752:	4631      	mov	r1, r6
 8009754:	f7ff f9dc 	bl	8008b10 <quorem>
 8009758:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	f805 ab01 	strb.w	sl, [r5], #1
 8009762:	1aea      	subs	r2, r5, r3
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	4293      	cmp	r3, r2
 8009768:	dd09      	ble.n	800977e <_dtoa_r+0xb56>
 800976a:	ee18 1a10 	vmov	r1, s16
 800976e:	2300      	movs	r3, #0
 8009770:	220a      	movs	r2, #10
 8009772:	4620      	mov	r0, r4
 8009774:	f000 f8c2 	bl	80098fc <__multadd>
 8009778:	ee08 0a10 	vmov	s16, r0
 800977c:	e7e7      	b.n	800974e <_dtoa_r+0xb26>
 800977e:	9b02      	ldr	r3, [sp, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfc8      	it	gt
 8009784:	461d      	movgt	r5, r3
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	bfd8      	it	le
 800978a:	2501      	movle	r5, #1
 800978c:	441d      	add	r5, r3
 800978e:	f04f 0800 	mov.w	r8, #0
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	2201      	movs	r2, #1
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fa5f 	bl	8009c5c <__lshift>
 800979e:	4631      	mov	r1, r6
 80097a0:	ee08 0a10 	vmov	s16, r0
 80097a4:	f000 faca 	bl	8009d3c <__mcmp>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	dc91      	bgt.n	80096d0 <_dtoa_r+0xaa8>
 80097ac:	d102      	bne.n	80097b4 <_dtoa_r+0xb8c>
 80097ae:	f01a 0f01 	tst.w	sl, #1
 80097b2:	d18d      	bne.n	80096d0 <_dtoa_r+0xaa8>
 80097b4:	462b      	mov	r3, r5
 80097b6:	461d      	mov	r5, r3
 80097b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097bc:	2a30      	cmp	r2, #48	; 0x30
 80097be:	d0fa      	beq.n	80097b6 <_dtoa_r+0xb8e>
 80097c0:	e6d7      	b.n	8009572 <_dtoa_r+0x94a>
 80097c2:	9a01      	ldr	r2, [sp, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d184      	bne.n	80096d2 <_dtoa_r+0xaaa>
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	2331      	movs	r3, #49	; 0x31
 80097d0:	7013      	strb	r3, [r2, #0]
 80097d2:	e6ce      	b.n	8009572 <_dtoa_r+0x94a>
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <_dtoa_r+0xbd4>)
 80097d6:	f7ff ba95 	b.w	8008d04 <_dtoa_r+0xdc>
 80097da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f47f aa6e 	bne.w	8008cbe <_dtoa_r+0x96>
 80097e2:	4b07      	ldr	r3, [pc, #28]	; (8009800 <_dtoa_r+0xbd8>)
 80097e4:	f7ff ba8e 	b.w	8008d04 <_dtoa_r+0xdc>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dcae      	bgt.n	800974c <_dtoa_r+0xb24>
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	f73f aea8 	bgt.w	8009546 <_dtoa_r+0x91e>
 80097f6:	e7a9      	b.n	800974c <_dtoa_r+0xb24>
 80097f8:	0800b5db 	.word	0x0800b5db
 80097fc:	0800b538 	.word	0x0800b538
 8009800:	0800b55c 	.word	0x0800b55c

08009804 <_localeconv_r>:
 8009804:	4800      	ldr	r0, [pc, #0]	; (8009808 <_localeconv_r+0x4>)
 8009806:	4770      	bx	lr
 8009808:	20000164 	.word	0x20000164

0800980c <malloc>:
 800980c:	4b02      	ldr	r3, [pc, #8]	; (8009818 <malloc+0xc>)
 800980e:	4601      	mov	r1, r0
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	f000 bc17 	b.w	800a044 <_malloc_r>
 8009816:	bf00      	nop
 8009818:	20000010 	.word	0x20000010

0800981c <memcpy>:
 800981c:	440a      	add	r2, r1
 800981e:	4291      	cmp	r1, r2
 8009820:	f100 33ff 	add.w	r3, r0, #4294967295
 8009824:	d100      	bne.n	8009828 <memcpy+0xc>
 8009826:	4770      	bx	lr
 8009828:	b510      	push	{r4, lr}
 800982a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009832:	4291      	cmp	r1, r2
 8009834:	d1f9      	bne.n	800982a <memcpy+0xe>
 8009836:	bd10      	pop	{r4, pc}

08009838 <_Balloc>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	b976      	cbnz	r6, 8009860 <_Balloc+0x28>
 8009842:	2010      	movs	r0, #16
 8009844:	f7ff ffe2 	bl	800980c <malloc>
 8009848:	4602      	mov	r2, r0
 800984a:	6260      	str	r0, [r4, #36]	; 0x24
 800984c:	b920      	cbnz	r0, 8009858 <_Balloc+0x20>
 800984e:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <_Balloc+0x78>)
 8009850:	4818      	ldr	r0, [pc, #96]	; (80098b4 <_Balloc+0x7c>)
 8009852:	2166      	movs	r1, #102	; 0x66
 8009854:	f000 fdd6 	bl	800a404 <__assert_func>
 8009858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800985c:	6006      	str	r6, [r0, #0]
 800985e:	60c6      	str	r6, [r0, #12]
 8009860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009862:	68f3      	ldr	r3, [r6, #12]
 8009864:	b183      	cbz	r3, 8009888 <_Balloc+0x50>
 8009866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800986e:	b9b8      	cbnz	r0, 80098a0 <_Balloc+0x68>
 8009870:	2101      	movs	r1, #1
 8009872:	fa01 f605 	lsl.w	r6, r1, r5
 8009876:	1d72      	adds	r2, r6, #5
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fb60 	bl	8009f40 <_calloc_r>
 8009880:	b160      	cbz	r0, 800989c <_Balloc+0x64>
 8009882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009886:	e00e      	b.n	80098a6 <_Balloc+0x6e>
 8009888:	2221      	movs	r2, #33	; 0x21
 800988a:	2104      	movs	r1, #4
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fb57 	bl	8009f40 <_calloc_r>
 8009892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009894:	60f0      	str	r0, [r6, #12]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e4      	bne.n	8009866 <_Balloc+0x2e>
 800989c:	2000      	movs	r0, #0
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	6802      	ldr	r2, [r0, #0]
 80098a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098a6:	2300      	movs	r3, #0
 80098a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098ac:	e7f7      	b.n	800989e <_Balloc+0x66>
 80098ae:	bf00      	nop
 80098b0:	0800b569 	.word	0x0800b569
 80098b4:	0800b5ec 	.word	0x0800b5ec

080098b8 <_Bfree>:
 80098b8:	b570      	push	{r4, r5, r6, lr}
 80098ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b976      	cbnz	r6, 80098e0 <_Bfree+0x28>
 80098c2:	2010      	movs	r0, #16
 80098c4:	f7ff ffa2 	bl	800980c <malloc>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6268      	str	r0, [r5, #36]	; 0x24
 80098cc:	b920      	cbnz	r0, 80098d8 <_Bfree+0x20>
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <_Bfree+0x3c>)
 80098d0:	4809      	ldr	r0, [pc, #36]	; (80098f8 <_Bfree+0x40>)
 80098d2:	218a      	movs	r1, #138	; 0x8a
 80098d4:	f000 fd96 	bl	800a404 <__assert_func>
 80098d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098dc:	6006      	str	r6, [r0, #0]
 80098de:	60c6      	str	r6, [r0, #12]
 80098e0:	b13c      	cbz	r4, 80098f2 <_Bfree+0x3a>
 80098e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098e4:	6862      	ldr	r2, [r4, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098ec:	6021      	str	r1, [r4, #0]
 80098ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	0800b569 	.word	0x0800b569
 80098f8:	0800b5ec 	.word	0x0800b5ec

080098fc <__multadd>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	690d      	ldr	r5, [r1, #16]
 8009902:	4607      	mov	r7, r0
 8009904:	460c      	mov	r4, r1
 8009906:	461e      	mov	r6, r3
 8009908:	f101 0c14 	add.w	ip, r1, #20
 800990c:	2000      	movs	r0, #0
 800990e:	f8dc 3000 	ldr.w	r3, [ip]
 8009912:	b299      	uxth	r1, r3
 8009914:	fb02 6101 	mla	r1, r2, r1, r6
 8009918:	0c1e      	lsrs	r6, r3, #16
 800991a:	0c0b      	lsrs	r3, r1, #16
 800991c:	fb02 3306 	mla	r3, r2, r6, r3
 8009920:	b289      	uxth	r1, r1
 8009922:	3001      	adds	r0, #1
 8009924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009928:	4285      	cmp	r5, r0
 800992a:	f84c 1b04 	str.w	r1, [ip], #4
 800992e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009932:	dcec      	bgt.n	800990e <__multadd+0x12>
 8009934:	b30e      	cbz	r6, 800997a <__multadd+0x7e>
 8009936:	68a3      	ldr	r3, [r4, #8]
 8009938:	42ab      	cmp	r3, r5
 800993a:	dc19      	bgt.n	8009970 <__multadd+0x74>
 800993c:	6861      	ldr	r1, [r4, #4]
 800993e:	4638      	mov	r0, r7
 8009940:	3101      	adds	r1, #1
 8009942:	f7ff ff79 	bl	8009838 <_Balloc>
 8009946:	4680      	mov	r8, r0
 8009948:	b928      	cbnz	r0, 8009956 <__multadd+0x5a>
 800994a:	4602      	mov	r2, r0
 800994c:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <__multadd+0x84>)
 800994e:	480d      	ldr	r0, [pc, #52]	; (8009984 <__multadd+0x88>)
 8009950:	21b5      	movs	r1, #181	; 0xb5
 8009952:	f000 fd57 	bl	800a404 <__assert_func>
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	3202      	adds	r2, #2
 800995a:	f104 010c 	add.w	r1, r4, #12
 800995e:	0092      	lsls	r2, r2, #2
 8009960:	300c      	adds	r0, #12
 8009962:	f7ff ff5b 	bl	800981c <memcpy>
 8009966:	4621      	mov	r1, r4
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff ffa5 	bl	80098b8 <_Bfree>
 800996e:	4644      	mov	r4, r8
 8009970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009974:	3501      	adds	r5, #1
 8009976:	615e      	str	r6, [r3, #20]
 8009978:	6125      	str	r5, [r4, #16]
 800997a:	4620      	mov	r0, r4
 800997c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009980:	0800b5db 	.word	0x0800b5db
 8009984:	0800b5ec 	.word	0x0800b5ec

08009988 <__hi0bits>:
 8009988:	0c03      	lsrs	r3, r0, #16
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	b9d3      	cbnz	r3, 80099c4 <__hi0bits+0x3c>
 800998e:	0400      	lsls	r0, r0, #16
 8009990:	2310      	movs	r3, #16
 8009992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009996:	bf04      	itt	eq
 8009998:	0200      	lsleq	r0, r0, #8
 800999a:	3308      	addeq	r3, #8
 800999c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099a0:	bf04      	itt	eq
 80099a2:	0100      	lsleq	r0, r0, #4
 80099a4:	3304      	addeq	r3, #4
 80099a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099aa:	bf04      	itt	eq
 80099ac:	0080      	lsleq	r0, r0, #2
 80099ae:	3302      	addeq	r3, #2
 80099b0:	2800      	cmp	r0, #0
 80099b2:	db05      	blt.n	80099c0 <__hi0bits+0x38>
 80099b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099b8:	f103 0301 	add.w	r3, r3, #1
 80099bc:	bf08      	it	eq
 80099be:	2320      	moveq	r3, #32
 80099c0:	4618      	mov	r0, r3
 80099c2:	4770      	bx	lr
 80099c4:	2300      	movs	r3, #0
 80099c6:	e7e4      	b.n	8009992 <__hi0bits+0xa>

080099c8 <__lo0bits>:
 80099c8:	6803      	ldr	r3, [r0, #0]
 80099ca:	f013 0207 	ands.w	r2, r3, #7
 80099ce:	4601      	mov	r1, r0
 80099d0:	d00b      	beq.n	80099ea <__lo0bits+0x22>
 80099d2:	07da      	lsls	r2, r3, #31
 80099d4:	d423      	bmi.n	8009a1e <__lo0bits+0x56>
 80099d6:	0798      	lsls	r0, r3, #30
 80099d8:	bf49      	itett	mi
 80099da:	085b      	lsrmi	r3, r3, #1
 80099dc:	089b      	lsrpl	r3, r3, #2
 80099de:	2001      	movmi	r0, #1
 80099e0:	600b      	strmi	r3, [r1, #0]
 80099e2:	bf5c      	itt	pl
 80099e4:	600b      	strpl	r3, [r1, #0]
 80099e6:	2002      	movpl	r0, #2
 80099e8:	4770      	bx	lr
 80099ea:	b298      	uxth	r0, r3
 80099ec:	b9a8      	cbnz	r0, 8009a1a <__lo0bits+0x52>
 80099ee:	0c1b      	lsrs	r3, r3, #16
 80099f0:	2010      	movs	r0, #16
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	b90a      	cbnz	r2, 80099fa <__lo0bits+0x32>
 80099f6:	3008      	adds	r0, #8
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	071a      	lsls	r2, r3, #28
 80099fc:	bf04      	itt	eq
 80099fe:	091b      	lsreq	r3, r3, #4
 8009a00:	3004      	addeq	r0, #4
 8009a02:	079a      	lsls	r2, r3, #30
 8009a04:	bf04      	itt	eq
 8009a06:	089b      	lsreq	r3, r3, #2
 8009a08:	3002      	addeq	r0, #2
 8009a0a:	07da      	lsls	r2, r3, #31
 8009a0c:	d403      	bmi.n	8009a16 <__lo0bits+0x4e>
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	f100 0001 	add.w	r0, r0, #1
 8009a14:	d005      	beq.n	8009a22 <__lo0bits+0x5a>
 8009a16:	600b      	str	r3, [r1, #0]
 8009a18:	4770      	bx	lr
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	e7e9      	b.n	80099f2 <__lo0bits+0x2a>
 8009a1e:	2000      	movs	r0, #0
 8009a20:	4770      	bx	lr
 8009a22:	2020      	movs	r0, #32
 8009a24:	4770      	bx	lr
	...

08009a28 <__i2b>:
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	f7ff ff03 	bl	8009838 <_Balloc>
 8009a32:	4602      	mov	r2, r0
 8009a34:	b928      	cbnz	r0, 8009a42 <__i2b+0x1a>
 8009a36:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <__i2b+0x24>)
 8009a38:	4805      	ldr	r0, [pc, #20]	; (8009a50 <__i2b+0x28>)
 8009a3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a3e:	f000 fce1 	bl	800a404 <__assert_func>
 8009a42:	2301      	movs	r3, #1
 8009a44:	6144      	str	r4, [r0, #20]
 8009a46:	6103      	str	r3, [r0, #16]
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	0800b5db 	.word	0x0800b5db
 8009a50:	0800b5ec 	.word	0x0800b5ec

08009a54 <__multiply>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	4691      	mov	r9, r2
 8009a5a:	690a      	ldr	r2, [r1, #16]
 8009a5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	bfb8      	it	lt
 8009a64:	460b      	movlt	r3, r1
 8009a66:	460c      	mov	r4, r1
 8009a68:	bfbc      	itt	lt
 8009a6a:	464c      	movlt	r4, r9
 8009a6c:	4699      	movlt	r9, r3
 8009a6e:	6927      	ldr	r7, [r4, #16]
 8009a70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	6861      	ldr	r1, [r4, #4]
 8009a78:	eb07 060a 	add.w	r6, r7, sl
 8009a7c:	42b3      	cmp	r3, r6
 8009a7e:	b085      	sub	sp, #20
 8009a80:	bfb8      	it	lt
 8009a82:	3101      	addlt	r1, #1
 8009a84:	f7ff fed8 	bl	8009838 <_Balloc>
 8009a88:	b930      	cbnz	r0, 8009a98 <__multiply+0x44>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	4b44      	ldr	r3, [pc, #272]	; (8009ba0 <__multiply+0x14c>)
 8009a8e:	4845      	ldr	r0, [pc, #276]	; (8009ba4 <__multiply+0x150>)
 8009a90:	f240 115d 	movw	r1, #349	; 0x15d
 8009a94:	f000 fcb6 	bl	800a404 <__assert_func>
 8009a98:	f100 0514 	add.w	r5, r0, #20
 8009a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4543      	cmp	r3, r8
 8009aa6:	d321      	bcc.n	8009aec <__multiply+0x98>
 8009aa8:	f104 0314 	add.w	r3, r4, #20
 8009aac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ab0:	f109 0314 	add.w	r3, r9, #20
 8009ab4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ab8:	9202      	str	r2, [sp, #8]
 8009aba:	1b3a      	subs	r2, r7, r4
 8009abc:	3a15      	subs	r2, #21
 8009abe:	f022 0203 	bic.w	r2, r2, #3
 8009ac2:	3204      	adds	r2, #4
 8009ac4:	f104 0115 	add.w	r1, r4, #21
 8009ac8:	428f      	cmp	r7, r1
 8009aca:	bf38      	it	cc
 8009acc:	2204      	movcc	r2, #4
 8009ace:	9201      	str	r2, [sp, #4]
 8009ad0:	9a02      	ldr	r2, [sp, #8]
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d80c      	bhi.n	8009af2 <__multiply+0x9e>
 8009ad8:	2e00      	cmp	r6, #0
 8009ada:	dd03      	ble.n	8009ae4 <__multiply+0x90>
 8009adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d05a      	beq.n	8009b9a <__multiply+0x146>
 8009ae4:	6106      	str	r6, [r0, #16]
 8009ae6:	b005      	add	sp, #20
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	f843 2b04 	str.w	r2, [r3], #4
 8009af0:	e7d8      	b.n	8009aa4 <__multiply+0x50>
 8009af2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009af6:	f1ba 0f00 	cmp.w	sl, #0
 8009afa:	d024      	beq.n	8009b46 <__multiply+0xf2>
 8009afc:	f104 0e14 	add.w	lr, r4, #20
 8009b00:	46a9      	mov	r9, r5
 8009b02:	f04f 0c00 	mov.w	ip, #0
 8009b06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b0a:	f8d9 1000 	ldr.w	r1, [r9]
 8009b0e:	fa1f fb82 	uxth.w	fp, r2
 8009b12:	b289      	uxth	r1, r1
 8009b14:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b20:	4461      	add	r1, ip
 8009b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b26:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b2e:	b289      	uxth	r1, r1
 8009b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b34:	4577      	cmp	r7, lr
 8009b36:	f849 1b04 	str.w	r1, [r9], #4
 8009b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b3e:	d8e2      	bhi.n	8009b06 <__multiply+0xb2>
 8009b40:	9a01      	ldr	r2, [sp, #4]
 8009b42:	f845 c002 	str.w	ip, [r5, r2]
 8009b46:	9a03      	ldr	r2, [sp, #12]
 8009b48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	f1b9 0f00 	cmp.w	r9, #0
 8009b52:	d020      	beq.n	8009b96 <__multiply+0x142>
 8009b54:	6829      	ldr	r1, [r5, #0]
 8009b56:	f104 0c14 	add.w	ip, r4, #20
 8009b5a:	46ae      	mov	lr, r5
 8009b5c:	f04f 0a00 	mov.w	sl, #0
 8009b60:	f8bc b000 	ldrh.w	fp, [ip]
 8009b64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b68:	fb09 220b 	mla	r2, r9, fp, r2
 8009b6c:	4492      	add	sl, r2
 8009b6e:	b289      	uxth	r1, r1
 8009b70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b74:	f84e 1b04 	str.w	r1, [lr], #4
 8009b78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b7c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b80:	0c12      	lsrs	r2, r2, #16
 8009b82:	fb09 1102 	mla	r1, r9, r2, r1
 8009b86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b8a:	4567      	cmp	r7, ip
 8009b8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b90:	d8e6      	bhi.n	8009b60 <__multiply+0x10c>
 8009b92:	9a01      	ldr	r2, [sp, #4]
 8009b94:	50a9      	str	r1, [r5, r2]
 8009b96:	3504      	adds	r5, #4
 8009b98:	e79a      	b.n	8009ad0 <__multiply+0x7c>
 8009b9a:	3e01      	subs	r6, #1
 8009b9c:	e79c      	b.n	8009ad8 <__multiply+0x84>
 8009b9e:	bf00      	nop
 8009ba0:	0800b5db 	.word	0x0800b5db
 8009ba4:	0800b5ec 	.word	0x0800b5ec

08009ba8 <__pow5mult>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	4615      	mov	r5, r2
 8009bae:	f012 0203 	ands.w	r2, r2, #3
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	d007      	beq.n	8009bc8 <__pow5mult+0x20>
 8009bb8:	4c25      	ldr	r4, [pc, #148]	; (8009c50 <__pow5mult+0xa8>)
 8009bba:	3a01      	subs	r2, #1
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bc2:	f7ff fe9b 	bl	80098fc <__multadd>
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	10ad      	asrs	r5, r5, #2
 8009bca:	d03d      	beq.n	8009c48 <__pow5mult+0xa0>
 8009bcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bce:	b97c      	cbnz	r4, 8009bf0 <__pow5mult+0x48>
 8009bd0:	2010      	movs	r0, #16
 8009bd2:	f7ff fe1b 	bl	800980c <malloc>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bda:	b928      	cbnz	r0, 8009be8 <__pow5mult+0x40>
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	; (8009c54 <__pow5mult+0xac>)
 8009bde:	481e      	ldr	r0, [pc, #120]	; (8009c58 <__pow5mult+0xb0>)
 8009be0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009be4:	f000 fc0e 	bl	800a404 <__assert_func>
 8009be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	60c4      	str	r4, [r0, #12]
 8009bf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf8:	b94c      	cbnz	r4, 8009c0e <__pow5mult+0x66>
 8009bfa:	f240 2171 	movw	r1, #625	; 0x271
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ff12 	bl	8009a28 <__i2b>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	f04f 0900 	mov.w	r9, #0
 8009c12:	07eb      	lsls	r3, r5, #31
 8009c14:	d50a      	bpl.n	8009c2c <__pow5mult+0x84>
 8009c16:	4639      	mov	r1, r7
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7ff ff1a 	bl	8009a54 <__multiply>
 8009c20:	4639      	mov	r1, r7
 8009c22:	4680      	mov	r8, r0
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff fe47 	bl	80098b8 <_Bfree>
 8009c2a:	4647      	mov	r7, r8
 8009c2c:	106d      	asrs	r5, r5, #1
 8009c2e:	d00b      	beq.n	8009c48 <__pow5mult+0xa0>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	b938      	cbnz	r0, 8009c44 <__pow5mult+0x9c>
 8009c34:	4622      	mov	r2, r4
 8009c36:	4621      	mov	r1, r4
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff ff0b 	bl	8009a54 <__multiply>
 8009c3e:	6020      	str	r0, [r4, #0]
 8009c40:	f8c0 9000 	str.w	r9, [r0]
 8009c44:	4604      	mov	r4, r0
 8009c46:	e7e4      	b.n	8009c12 <__pow5mult+0x6a>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4e:	bf00      	nop
 8009c50:	0800b738 	.word	0x0800b738
 8009c54:	0800b569 	.word	0x0800b569
 8009c58:	0800b5ec 	.word	0x0800b5ec

08009c5c <__lshift>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	6849      	ldr	r1, [r1, #4]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	4691      	mov	r9, r2
 8009c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c74:	f108 0601 	add.w	r6, r8, #1
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	db0b      	blt.n	8009c94 <__lshift+0x38>
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7ff fddb 	bl	8009838 <_Balloc>
 8009c82:	4605      	mov	r5, r0
 8009c84:	b948      	cbnz	r0, 8009c9a <__lshift+0x3e>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <__lshift+0xd8>)
 8009c8a:	482b      	ldr	r0, [pc, #172]	; (8009d38 <__lshift+0xdc>)
 8009c8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c90:	f000 fbb8 	bl	800a404 <__assert_func>
 8009c94:	3101      	adds	r1, #1
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	e7ee      	b.n	8009c78 <__lshift+0x1c>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f100 0114 	add.w	r1, r0, #20
 8009ca0:	f100 0210 	add.w	r2, r0, #16
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	4553      	cmp	r3, sl
 8009ca8:	db37      	blt.n	8009d1a <__lshift+0xbe>
 8009caa:	6920      	ldr	r0, [r4, #16]
 8009cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cb0:	f104 0314 	add.w	r3, r4, #20
 8009cb4:	f019 091f 	ands.w	r9, r9, #31
 8009cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cc0:	d02f      	beq.n	8009d22 <__lshift+0xc6>
 8009cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8009cc6:	468a      	mov	sl, r1
 8009cc8:	f04f 0c00 	mov.w	ip, #0
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	fa02 f209 	lsl.w	r2, r2, r9
 8009cd2:	ea42 020c 	orr.w	r2, r2, ip
 8009cd6:	f84a 2b04 	str.w	r2, [sl], #4
 8009cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ce4:	d8f2      	bhi.n	8009ccc <__lshift+0x70>
 8009ce6:	1b03      	subs	r3, r0, r4
 8009ce8:	3b15      	subs	r3, #21
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	3304      	adds	r3, #4
 8009cf0:	f104 0215 	add.w	r2, r4, #21
 8009cf4:	4290      	cmp	r0, r2
 8009cf6:	bf38      	it	cc
 8009cf8:	2304      	movcc	r3, #4
 8009cfa:	f841 c003 	str.w	ip, [r1, r3]
 8009cfe:	f1bc 0f00 	cmp.w	ip, #0
 8009d02:	d001      	beq.n	8009d08 <__lshift+0xac>
 8009d04:	f108 0602 	add.w	r6, r8, #2
 8009d08:	3e01      	subs	r6, #1
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	612e      	str	r6, [r5, #16]
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f7ff fdd2 	bl	80098b8 <_Bfree>
 8009d14:	4628      	mov	r0, r5
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d1e:	3301      	adds	r3, #1
 8009d20:	e7c1      	b.n	8009ca6 <__lshift+0x4a>
 8009d22:	3904      	subs	r1, #4
 8009d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d2c:	4298      	cmp	r0, r3
 8009d2e:	d8f9      	bhi.n	8009d24 <__lshift+0xc8>
 8009d30:	e7ea      	b.n	8009d08 <__lshift+0xac>
 8009d32:	bf00      	nop
 8009d34:	0800b5db 	.word	0x0800b5db
 8009d38:	0800b5ec 	.word	0x0800b5ec

08009d3c <__mcmp>:
 8009d3c:	b530      	push	{r4, r5, lr}
 8009d3e:	6902      	ldr	r2, [r0, #16]
 8009d40:	690c      	ldr	r4, [r1, #16]
 8009d42:	1b12      	subs	r2, r2, r4
 8009d44:	d10e      	bne.n	8009d64 <__mcmp+0x28>
 8009d46:	f100 0314 	add.w	r3, r0, #20
 8009d4a:	3114      	adds	r1, #20
 8009d4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d5c:	42a5      	cmp	r5, r4
 8009d5e:	d003      	beq.n	8009d68 <__mcmp+0x2c>
 8009d60:	d305      	bcc.n	8009d6e <__mcmp+0x32>
 8009d62:	2201      	movs	r2, #1
 8009d64:	4610      	mov	r0, r2
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	4283      	cmp	r3, r0
 8009d6a:	d3f3      	bcc.n	8009d54 <__mcmp+0x18>
 8009d6c:	e7fa      	b.n	8009d64 <__mcmp+0x28>
 8009d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d72:	e7f7      	b.n	8009d64 <__mcmp+0x28>

08009d74 <__mdiff>:
 8009d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4690      	mov	r8, r2
 8009d82:	f7ff ffdb 	bl	8009d3c <__mcmp>
 8009d86:	1e05      	subs	r5, r0, #0
 8009d88:	d110      	bne.n	8009dac <__mdiff+0x38>
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff fd53 	bl	8009838 <_Balloc>
 8009d92:	b930      	cbnz	r0, 8009da2 <__mdiff+0x2e>
 8009d94:	4b3a      	ldr	r3, [pc, #232]	; (8009e80 <__mdiff+0x10c>)
 8009d96:	4602      	mov	r2, r0
 8009d98:	f240 2132 	movw	r1, #562	; 0x232
 8009d9c:	4839      	ldr	r0, [pc, #228]	; (8009e84 <__mdiff+0x110>)
 8009d9e:	f000 fb31 	bl	800a404 <__assert_func>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	bfa4      	itt	ge
 8009dae:	4643      	movge	r3, r8
 8009db0:	46a0      	movge	r8, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009db8:	bfa6      	itte	ge
 8009dba:	461c      	movge	r4, r3
 8009dbc:	2500      	movge	r5, #0
 8009dbe:	2501      	movlt	r5, #1
 8009dc0:	f7ff fd3a 	bl	8009838 <_Balloc>
 8009dc4:	b920      	cbnz	r0, 8009dd0 <__mdiff+0x5c>
 8009dc6:	4b2e      	ldr	r3, [pc, #184]	; (8009e80 <__mdiff+0x10c>)
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dce:	e7e5      	b.n	8009d9c <__mdiff+0x28>
 8009dd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009dd4:	6926      	ldr	r6, [r4, #16]
 8009dd6:	60c5      	str	r5, [r0, #12]
 8009dd8:	f104 0914 	add.w	r9, r4, #20
 8009ddc:	f108 0514 	add.w	r5, r8, #20
 8009de0:	f100 0e14 	add.w	lr, r0, #20
 8009de4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009de8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dec:	f108 0210 	add.w	r2, r8, #16
 8009df0:	46f2      	mov	sl, lr
 8009df2:	2100      	movs	r1, #0
 8009df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dfc:	fa1f f883 	uxth.w	r8, r3
 8009e00:	fa11 f18b 	uxtah	r1, r1, fp
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	eba1 0808 	sub.w	r8, r1, r8
 8009e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e12:	fa1f f888 	uxth.w	r8, r8
 8009e16:	1419      	asrs	r1, r3, #16
 8009e18:	454e      	cmp	r6, r9
 8009e1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e22:	d8e7      	bhi.n	8009df4 <__mdiff+0x80>
 8009e24:	1b33      	subs	r3, r6, r4
 8009e26:	3b15      	subs	r3, #21
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	3415      	adds	r4, #21
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	bf38      	it	cc
 8009e34:	2304      	movcc	r3, #4
 8009e36:	441d      	add	r5, r3
 8009e38:	4473      	add	r3, lr
 8009e3a:	469e      	mov	lr, r3
 8009e3c:	462e      	mov	r6, r5
 8009e3e:	4566      	cmp	r6, ip
 8009e40:	d30e      	bcc.n	8009e60 <__mdiff+0xec>
 8009e42:	f10c 0203 	add.w	r2, ip, #3
 8009e46:	1b52      	subs	r2, r2, r5
 8009e48:	f022 0203 	bic.w	r2, r2, #3
 8009e4c:	3d03      	subs	r5, #3
 8009e4e:	45ac      	cmp	ip, r5
 8009e50:	bf38      	it	cc
 8009e52:	2200      	movcc	r2, #0
 8009e54:	441a      	add	r2, r3
 8009e56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e5a:	b17b      	cbz	r3, 8009e7c <__mdiff+0x108>
 8009e5c:	6107      	str	r7, [r0, #16]
 8009e5e:	e7a3      	b.n	8009da8 <__mdiff+0x34>
 8009e60:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e64:	fa11 f288 	uxtah	r2, r1, r8
 8009e68:	1414      	asrs	r4, r2, #16
 8009e6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e6e:	b292      	uxth	r2, r2
 8009e70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e74:	f84e 2b04 	str.w	r2, [lr], #4
 8009e78:	1421      	asrs	r1, r4, #16
 8009e7a:	e7e0      	b.n	8009e3e <__mdiff+0xca>
 8009e7c:	3f01      	subs	r7, #1
 8009e7e:	e7ea      	b.n	8009e56 <__mdiff+0xe2>
 8009e80:	0800b5db 	.word	0x0800b5db
 8009e84:	0800b5ec 	.word	0x0800b5ec

08009e88 <__d2b>:
 8009e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	4689      	mov	r9, r1
 8009e8e:	2101      	movs	r1, #1
 8009e90:	ec57 6b10 	vmov	r6, r7, d0
 8009e94:	4690      	mov	r8, r2
 8009e96:	f7ff fccf 	bl	8009838 <_Balloc>
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	b930      	cbnz	r0, 8009eac <__d2b+0x24>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b25      	ldr	r3, [pc, #148]	; (8009f38 <__d2b+0xb0>)
 8009ea2:	4826      	ldr	r0, [pc, #152]	; (8009f3c <__d2b+0xb4>)
 8009ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8009ea8:	f000 faac 	bl	800a404 <__assert_func>
 8009eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009eb4:	bb35      	cbnz	r5, 8009f04 <__d2b+0x7c>
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	d028      	beq.n	8009f0e <__d2b+0x86>
 8009ebc:	4668      	mov	r0, sp
 8009ebe:	9600      	str	r6, [sp, #0]
 8009ec0:	f7ff fd82 	bl	80099c8 <__lo0bits>
 8009ec4:	9900      	ldr	r1, [sp, #0]
 8009ec6:	b300      	cbz	r0, 8009f0a <__d2b+0x82>
 8009ec8:	9a01      	ldr	r2, [sp, #4]
 8009eca:	f1c0 0320 	rsb	r3, r0, #32
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	40c2      	lsrs	r2, r0
 8009ed6:	6163      	str	r3, [r4, #20]
 8009ed8:	9201      	str	r2, [sp, #4]
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	61a3      	str	r3, [r4, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2202      	movne	r2, #2
 8009ee4:	2201      	moveq	r2, #1
 8009ee6:	6122      	str	r2, [r4, #16]
 8009ee8:	b1d5      	cbz	r5, 8009f20 <__d2b+0x98>
 8009eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eee:	4405      	add	r5, r0
 8009ef0:	f8c9 5000 	str.w	r5, [r9]
 8009ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ef8:	f8c8 0000 	str.w	r0, [r8]
 8009efc:	4620      	mov	r0, r4
 8009efe:	b003      	add	sp, #12
 8009f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f08:	e7d5      	b.n	8009eb6 <__d2b+0x2e>
 8009f0a:	6161      	str	r1, [r4, #20]
 8009f0c:	e7e5      	b.n	8009eda <__d2b+0x52>
 8009f0e:	a801      	add	r0, sp, #4
 8009f10:	f7ff fd5a 	bl	80099c8 <__lo0bits>
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	6122      	str	r2, [r4, #16]
 8009f1c:	3020      	adds	r0, #32
 8009f1e:	e7e3      	b.n	8009ee8 <__d2b+0x60>
 8009f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f28:	f8c9 0000 	str.w	r0, [r9]
 8009f2c:	6918      	ldr	r0, [r3, #16]
 8009f2e:	f7ff fd2b 	bl	8009988 <__hi0bits>
 8009f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f36:	e7df      	b.n	8009ef8 <__d2b+0x70>
 8009f38:	0800b5db 	.word	0x0800b5db
 8009f3c:	0800b5ec 	.word	0x0800b5ec

08009f40 <_calloc_r>:
 8009f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f42:	fba1 2402 	umull	r2, r4, r1, r2
 8009f46:	b94c      	cbnz	r4, 8009f5c <_calloc_r+0x1c>
 8009f48:	4611      	mov	r1, r2
 8009f4a:	9201      	str	r2, [sp, #4]
 8009f4c:	f000 f87a 	bl	800a044 <_malloc_r>
 8009f50:	9a01      	ldr	r2, [sp, #4]
 8009f52:	4605      	mov	r5, r0
 8009f54:	b930      	cbnz	r0, 8009f64 <_calloc_r+0x24>
 8009f56:	4628      	mov	r0, r5
 8009f58:	b003      	add	sp, #12
 8009f5a:	bd30      	pop	{r4, r5, pc}
 8009f5c:	220c      	movs	r2, #12
 8009f5e:	6002      	str	r2, [r0, #0]
 8009f60:	2500      	movs	r5, #0
 8009f62:	e7f8      	b.n	8009f56 <_calloc_r+0x16>
 8009f64:	4621      	mov	r1, r4
 8009f66:	f7fe f941 	bl	80081ec <memset>
 8009f6a:	e7f4      	b.n	8009f56 <_calloc_r+0x16>

08009f6c <_free_r>:
 8009f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d044      	beq.n	8009ffc <_free_r+0x90>
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	9001      	str	r0, [sp, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f7e:	bfb8      	it	lt
 8009f80:	18e4      	addlt	r4, r4, r3
 8009f82:	f000 fa9b 	bl	800a4bc <__malloc_lock>
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <_free_r+0x94>)
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	6813      	ldr	r3, [r2, #0]
 8009f8c:	b933      	cbnz	r3, 8009f9c <_free_r+0x30>
 8009f8e:	6063      	str	r3, [r4, #4]
 8009f90:	6014      	str	r4, [r2, #0]
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f98:	f000 ba96 	b.w	800a4c8 <__malloc_unlock>
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d908      	bls.n	8009fb2 <_free_r+0x46>
 8009fa0:	6825      	ldr	r5, [r4, #0]
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	bf01      	itttt	eq
 8009fa8:	6819      	ldreq	r1, [r3, #0]
 8009faa:	685b      	ldreq	r3, [r3, #4]
 8009fac:	1949      	addeq	r1, r1, r5
 8009fae:	6021      	streq	r1, [r4, #0]
 8009fb0:	e7ed      	b.n	8009f8e <_free_r+0x22>
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	b10b      	cbz	r3, 8009fbc <_free_r+0x50>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d9fa      	bls.n	8009fb2 <_free_r+0x46>
 8009fbc:	6811      	ldr	r1, [r2, #0]
 8009fbe:	1855      	adds	r5, r2, r1
 8009fc0:	42a5      	cmp	r5, r4
 8009fc2:	d10b      	bne.n	8009fdc <_free_r+0x70>
 8009fc4:	6824      	ldr	r4, [r4, #0]
 8009fc6:	4421      	add	r1, r4
 8009fc8:	1854      	adds	r4, r2, r1
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	6011      	str	r1, [r2, #0]
 8009fce:	d1e0      	bne.n	8009f92 <_free_r+0x26>
 8009fd0:	681c      	ldr	r4, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	6053      	str	r3, [r2, #4]
 8009fd6:	4421      	add	r1, r4
 8009fd8:	6011      	str	r1, [r2, #0]
 8009fda:	e7da      	b.n	8009f92 <_free_r+0x26>
 8009fdc:	d902      	bls.n	8009fe4 <_free_r+0x78>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	e7d6      	b.n	8009f92 <_free_r+0x26>
 8009fe4:	6825      	ldr	r5, [r4, #0]
 8009fe6:	1961      	adds	r1, r4, r5
 8009fe8:	428b      	cmp	r3, r1
 8009fea:	bf04      	itt	eq
 8009fec:	6819      	ldreq	r1, [r3, #0]
 8009fee:	685b      	ldreq	r3, [r3, #4]
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	bf04      	itt	eq
 8009ff4:	1949      	addeq	r1, r1, r5
 8009ff6:	6021      	streq	r1, [r4, #0]
 8009ff8:	6054      	str	r4, [r2, #4]
 8009ffa:	e7ca      	b.n	8009f92 <_free_r+0x26>
 8009ffc:	b003      	add	sp, #12
 8009ffe:	bd30      	pop	{r4, r5, pc}
 800a000:	20000430 	.word	0x20000430

0800a004 <sbrk_aligned>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	4e0e      	ldr	r6, [pc, #56]	; (800a040 <sbrk_aligned+0x3c>)
 800a008:	460c      	mov	r4, r1
 800a00a:	6831      	ldr	r1, [r6, #0]
 800a00c:	4605      	mov	r5, r0
 800a00e:	b911      	cbnz	r1, 800a016 <sbrk_aligned+0x12>
 800a010:	f000 f9e8 	bl	800a3e4 <_sbrk_r>
 800a014:	6030      	str	r0, [r6, #0]
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f9e3 	bl	800a3e4 <_sbrk_r>
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	d00a      	beq.n	800a038 <sbrk_aligned+0x34>
 800a022:	1cc4      	adds	r4, r0, #3
 800a024:	f024 0403 	bic.w	r4, r4, #3
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d007      	beq.n	800a03c <sbrk_aligned+0x38>
 800a02c:	1a21      	subs	r1, r4, r0
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f9d8 	bl	800a3e4 <_sbrk_r>
 800a034:	3001      	adds	r0, #1
 800a036:	d101      	bne.n	800a03c <sbrk_aligned+0x38>
 800a038:	f04f 34ff 	mov.w	r4, #4294967295
 800a03c:	4620      	mov	r0, r4
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	20000434 	.word	0x20000434

0800a044 <_malloc_r>:
 800a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a048:	1ccd      	adds	r5, r1, #3
 800a04a:	f025 0503 	bic.w	r5, r5, #3
 800a04e:	3508      	adds	r5, #8
 800a050:	2d0c      	cmp	r5, #12
 800a052:	bf38      	it	cc
 800a054:	250c      	movcc	r5, #12
 800a056:	2d00      	cmp	r5, #0
 800a058:	4607      	mov	r7, r0
 800a05a:	db01      	blt.n	800a060 <_malloc_r+0x1c>
 800a05c:	42a9      	cmp	r1, r5
 800a05e:	d905      	bls.n	800a06c <_malloc_r+0x28>
 800a060:	230c      	movs	r3, #12
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	2600      	movs	r6, #0
 800a066:	4630      	mov	r0, r6
 800a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a06c:	4e2e      	ldr	r6, [pc, #184]	; (800a128 <_malloc_r+0xe4>)
 800a06e:	f000 fa25 	bl	800a4bc <__malloc_lock>
 800a072:	6833      	ldr	r3, [r6, #0]
 800a074:	461c      	mov	r4, r3
 800a076:	bb34      	cbnz	r4, 800a0c6 <_malloc_r+0x82>
 800a078:	4629      	mov	r1, r5
 800a07a:	4638      	mov	r0, r7
 800a07c:	f7ff ffc2 	bl	800a004 <sbrk_aligned>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	4604      	mov	r4, r0
 800a084:	d14d      	bne.n	800a122 <_malloc_r+0xde>
 800a086:	6834      	ldr	r4, [r6, #0]
 800a088:	4626      	mov	r6, r4
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d140      	bne.n	800a110 <_malloc_r+0xcc>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	4631      	mov	r1, r6
 800a092:	4638      	mov	r0, r7
 800a094:	eb04 0803 	add.w	r8, r4, r3
 800a098:	f000 f9a4 	bl	800a3e4 <_sbrk_r>
 800a09c:	4580      	cmp	r8, r0
 800a09e:	d13a      	bne.n	800a116 <_malloc_r+0xd2>
 800a0a0:	6821      	ldr	r1, [r4, #0]
 800a0a2:	3503      	adds	r5, #3
 800a0a4:	1a6d      	subs	r5, r5, r1
 800a0a6:	f025 0503 	bic.w	r5, r5, #3
 800a0aa:	3508      	adds	r5, #8
 800a0ac:	2d0c      	cmp	r5, #12
 800a0ae:	bf38      	it	cc
 800a0b0:	250c      	movcc	r5, #12
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f7ff ffa5 	bl	800a004 <sbrk_aligned>
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d02b      	beq.n	800a116 <_malloc_r+0xd2>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	442b      	add	r3, r5
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	e00e      	b.n	800a0e4 <_malloc_r+0xa0>
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	1b52      	subs	r2, r2, r5
 800a0ca:	d41e      	bmi.n	800a10a <_malloc_r+0xc6>
 800a0cc:	2a0b      	cmp	r2, #11
 800a0ce:	d916      	bls.n	800a0fe <_malloc_r+0xba>
 800a0d0:	1961      	adds	r1, r4, r5
 800a0d2:	42a3      	cmp	r3, r4
 800a0d4:	6025      	str	r5, [r4, #0]
 800a0d6:	bf18      	it	ne
 800a0d8:	6059      	strne	r1, [r3, #4]
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	bf08      	it	eq
 800a0de:	6031      	streq	r1, [r6, #0]
 800a0e0:	5162      	str	r2, [r4, r5]
 800a0e2:	604b      	str	r3, [r1, #4]
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f104 060b 	add.w	r6, r4, #11
 800a0ea:	f000 f9ed 	bl	800a4c8 <__malloc_unlock>
 800a0ee:	f026 0607 	bic.w	r6, r6, #7
 800a0f2:	1d23      	adds	r3, r4, #4
 800a0f4:	1af2      	subs	r2, r6, r3
 800a0f6:	d0b6      	beq.n	800a066 <_malloc_r+0x22>
 800a0f8:	1b9b      	subs	r3, r3, r6
 800a0fa:	50a3      	str	r3, [r4, r2]
 800a0fc:	e7b3      	b.n	800a066 <_malloc_r+0x22>
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	42a3      	cmp	r3, r4
 800a102:	bf0c      	ite	eq
 800a104:	6032      	streq	r2, [r6, #0]
 800a106:	605a      	strne	r2, [r3, #4]
 800a108:	e7ec      	b.n	800a0e4 <_malloc_r+0xa0>
 800a10a:	4623      	mov	r3, r4
 800a10c:	6864      	ldr	r4, [r4, #4]
 800a10e:	e7b2      	b.n	800a076 <_malloc_r+0x32>
 800a110:	4634      	mov	r4, r6
 800a112:	6876      	ldr	r6, [r6, #4]
 800a114:	e7b9      	b.n	800a08a <_malloc_r+0x46>
 800a116:	230c      	movs	r3, #12
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	4638      	mov	r0, r7
 800a11c:	f000 f9d4 	bl	800a4c8 <__malloc_unlock>
 800a120:	e7a1      	b.n	800a066 <_malloc_r+0x22>
 800a122:	6025      	str	r5, [r4, #0]
 800a124:	e7de      	b.n	800a0e4 <_malloc_r+0xa0>
 800a126:	bf00      	nop
 800a128:	20000430 	.word	0x20000430

0800a12c <__ssputs_r>:
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	688e      	ldr	r6, [r1, #8]
 800a132:	429e      	cmp	r6, r3
 800a134:	4682      	mov	sl, r0
 800a136:	460c      	mov	r4, r1
 800a138:	4690      	mov	r8, r2
 800a13a:	461f      	mov	r7, r3
 800a13c:	d838      	bhi.n	800a1b0 <__ssputs_r+0x84>
 800a13e:	898a      	ldrh	r2, [r1, #12]
 800a140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a144:	d032      	beq.n	800a1ac <__ssputs_r+0x80>
 800a146:	6825      	ldr	r5, [r4, #0]
 800a148:	6909      	ldr	r1, [r1, #16]
 800a14a:	eba5 0901 	sub.w	r9, r5, r1
 800a14e:	6965      	ldr	r5, [r4, #20]
 800a150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a158:	3301      	adds	r3, #1
 800a15a:	444b      	add	r3, r9
 800a15c:	106d      	asrs	r5, r5, #1
 800a15e:	429d      	cmp	r5, r3
 800a160:	bf38      	it	cc
 800a162:	461d      	movcc	r5, r3
 800a164:	0553      	lsls	r3, r2, #21
 800a166:	d531      	bpl.n	800a1cc <__ssputs_r+0xa0>
 800a168:	4629      	mov	r1, r5
 800a16a:	f7ff ff6b 	bl	800a044 <_malloc_r>
 800a16e:	4606      	mov	r6, r0
 800a170:	b950      	cbnz	r0, 800a188 <__ssputs_r+0x5c>
 800a172:	230c      	movs	r3, #12
 800a174:	f8ca 3000 	str.w	r3, [sl]
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a188:	6921      	ldr	r1, [r4, #16]
 800a18a:	464a      	mov	r2, r9
 800a18c:	f7ff fb46 	bl	800981c <memcpy>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	6126      	str	r6, [r4, #16]
 800a19e:	6165      	str	r5, [r4, #20]
 800a1a0:	444e      	add	r6, r9
 800a1a2:	eba5 0509 	sub.w	r5, r5, r9
 800a1a6:	6026      	str	r6, [r4, #0]
 800a1a8:	60a5      	str	r5, [r4, #8]
 800a1aa:	463e      	mov	r6, r7
 800a1ac:	42be      	cmp	r6, r7
 800a1ae:	d900      	bls.n	800a1b2 <__ssputs_r+0x86>
 800a1b0:	463e      	mov	r6, r7
 800a1b2:	6820      	ldr	r0, [r4, #0]
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	f000 f966 	bl	800a488 <memmove>
 800a1bc:	68a3      	ldr	r3, [r4, #8]
 800a1be:	1b9b      	subs	r3, r3, r6
 800a1c0:	60a3      	str	r3, [r4, #8]
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	4433      	add	r3, r6
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7db      	b.n	800a184 <__ssputs_r+0x58>
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	f000 f981 	bl	800a4d4 <_realloc_r>
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d1e1      	bne.n	800a19c <__ssputs_r+0x70>
 800a1d8:	6921      	ldr	r1, [r4, #16]
 800a1da:	4650      	mov	r0, sl
 800a1dc:	f7ff fec6 	bl	8009f6c <_free_r>
 800a1e0:	e7c7      	b.n	800a172 <__ssputs_r+0x46>
	...

0800a1e4 <_svfiprintf_r>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	4698      	mov	r8, r3
 800a1ea:	898b      	ldrh	r3, [r1, #12]
 800a1ec:	061b      	lsls	r3, r3, #24
 800a1ee:	b09d      	sub	sp, #116	; 0x74
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	d50e      	bpl.n	800a216 <_svfiprintf_r+0x32>
 800a1f8:	690b      	ldr	r3, [r1, #16]
 800a1fa:	b963      	cbnz	r3, 800a216 <_svfiprintf_r+0x32>
 800a1fc:	2140      	movs	r1, #64	; 0x40
 800a1fe:	f7ff ff21 	bl	800a044 <_malloc_r>
 800a202:	6028      	str	r0, [r5, #0]
 800a204:	6128      	str	r0, [r5, #16]
 800a206:	b920      	cbnz	r0, 800a212 <_svfiprintf_r+0x2e>
 800a208:	230c      	movs	r3, #12
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	e0d1      	b.n	800a3b6 <_svfiprintf_r+0x1d2>
 800a212:	2340      	movs	r3, #64	; 0x40
 800a214:	616b      	str	r3, [r5, #20]
 800a216:	2300      	movs	r3, #0
 800a218:	9309      	str	r3, [sp, #36]	; 0x24
 800a21a:	2320      	movs	r3, #32
 800a21c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a220:	f8cd 800c 	str.w	r8, [sp, #12]
 800a224:	2330      	movs	r3, #48	; 0x30
 800a226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3d0 <_svfiprintf_r+0x1ec>
 800a22a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a22e:	f04f 0901 	mov.w	r9, #1
 800a232:	4623      	mov	r3, r4
 800a234:	469a      	mov	sl, r3
 800a236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23a:	b10a      	cbz	r2, 800a240 <_svfiprintf_r+0x5c>
 800a23c:	2a25      	cmp	r2, #37	; 0x25
 800a23e:	d1f9      	bne.n	800a234 <_svfiprintf_r+0x50>
 800a240:	ebba 0b04 	subs.w	fp, sl, r4
 800a244:	d00b      	beq.n	800a25e <_svfiprintf_r+0x7a>
 800a246:	465b      	mov	r3, fp
 800a248:	4622      	mov	r2, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff ff6d 	bl	800a12c <__ssputs_r>
 800a252:	3001      	adds	r0, #1
 800a254:	f000 80aa 	beq.w	800a3ac <_svfiprintf_r+0x1c8>
 800a258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a25a:	445a      	add	r2, fp
 800a25c:	9209      	str	r2, [sp, #36]	; 0x24
 800a25e:	f89a 3000 	ldrb.w	r3, [sl]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 80a2 	beq.w	800a3ac <_svfiprintf_r+0x1c8>
 800a268:	2300      	movs	r3, #0
 800a26a:	f04f 32ff 	mov.w	r2, #4294967295
 800a26e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a272:	f10a 0a01 	add.w	sl, sl, #1
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	9307      	str	r3, [sp, #28]
 800a27a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a27e:	931a      	str	r3, [sp, #104]	; 0x68
 800a280:	4654      	mov	r4, sl
 800a282:	2205      	movs	r2, #5
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	4851      	ldr	r0, [pc, #324]	; (800a3d0 <_svfiprintf_r+0x1ec>)
 800a28a:	f7f5 ffb1 	bl	80001f0 <memchr>
 800a28e:	9a04      	ldr	r2, [sp, #16]
 800a290:	b9d8      	cbnz	r0, 800a2ca <_svfiprintf_r+0xe6>
 800a292:	06d0      	lsls	r0, r2, #27
 800a294:	bf44      	itt	mi
 800a296:	2320      	movmi	r3, #32
 800a298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a29c:	0711      	lsls	r1, r2, #28
 800a29e:	bf44      	itt	mi
 800a2a0:	232b      	movmi	r3, #43	; 0x2b
 800a2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ac:	d015      	beq.n	800a2da <_svfiprintf_r+0xf6>
 800a2ae:	9a07      	ldr	r2, [sp, #28]
 800a2b0:	4654      	mov	r4, sl
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f04f 0c0a 	mov.w	ip, #10
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2be:	3b30      	subs	r3, #48	; 0x30
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d94e      	bls.n	800a362 <_svfiprintf_r+0x17e>
 800a2c4:	b1b0      	cbz	r0, 800a2f4 <_svfiprintf_r+0x110>
 800a2c6:	9207      	str	r2, [sp, #28]
 800a2c8:	e014      	b.n	800a2f4 <_svfiprintf_r+0x110>
 800a2ca:	eba0 0308 	sub.w	r3, r0, r8
 800a2ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	46a2      	mov	sl, r4
 800a2d8:	e7d2      	b.n	800a280 <_svfiprintf_r+0x9c>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	1d19      	adds	r1, r3, #4
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	9103      	str	r1, [sp, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfbb      	ittet	lt
 800a2e6:	425b      	neglt	r3, r3
 800a2e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ec:	9307      	strge	r3, [sp, #28]
 800a2ee:	9307      	strlt	r3, [sp, #28]
 800a2f0:	bfb8      	it	lt
 800a2f2:	9204      	strlt	r2, [sp, #16]
 800a2f4:	7823      	ldrb	r3, [r4, #0]
 800a2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f8:	d10c      	bne.n	800a314 <_svfiprintf_r+0x130>
 800a2fa:	7863      	ldrb	r3, [r4, #1]
 800a2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fe:	d135      	bne.n	800a36c <_svfiprintf_r+0x188>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	1d1a      	adds	r2, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9203      	str	r2, [sp, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfb8      	it	lt
 800a30c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a310:	3402      	adds	r4, #2
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3e0 <_svfiprintf_r+0x1fc>
 800a318:	7821      	ldrb	r1, [r4, #0]
 800a31a:	2203      	movs	r2, #3
 800a31c:	4650      	mov	r0, sl
 800a31e:	f7f5 ff67 	bl	80001f0 <memchr>
 800a322:	b140      	cbz	r0, 800a336 <_svfiprintf_r+0x152>
 800a324:	2340      	movs	r3, #64	; 0x40
 800a326:	eba0 000a 	sub.w	r0, r0, sl
 800a32a:	fa03 f000 	lsl.w	r0, r3, r0
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	4303      	orrs	r3, r0
 800a332:	3401      	adds	r4, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33a:	4826      	ldr	r0, [pc, #152]	; (800a3d4 <_svfiprintf_r+0x1f0>)
 800a33c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a340:	2206      	movs	r2, #6
 800a342:	f7f5 ff55 	bl	80001f0 <memchr>
 800a346:	2800      	cmp	r0, #0
 800a348:	d038      	beq.n	800a3bc <_svfiprintf_r+0x1d8>
 800a34a:	4b23      	ldr	r3, [pc, #140]	; (800a3d8 <_svfiprintf_r+0x1f4>)
 800a34c:	bb1b      	cbnz	r3, 800a396 <_svfiprintf_r+0x1b2>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	f023 0307 	bic.w	r3, r3, #7
 800a356:	3308      	adds	r3, #8
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35c:	4433      	add	r3, r6
 800a35e:	9309      	str	r3, [sp, #36]	; 0x24
 800a360:	e767      	b.n	800a232 <_svfiprintf_r+0x4e>
 800a362:	fb0c 3202 	mla	r2, ip, r2, r3
 800a366:	460c      	mov	r4, r1
 800a368:	2001      	movs	r0, #1
 800a36a:	e7a5      	b.n	800a2b8 <_svfiprintf_r+0xd4>
 800a36c:	2300      	movs	r3, #0
 800a36e:	3401      	adds	r4, #1
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	4619      	mov	r1, r3
 800a374:	f04f 0c0a 	mov.w	ip, #10
 800a378:	4620      	mov	r0, r4
 800a37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a37e:	3a30      	subs	r2, #48	; 0x30
 800a380:	2a09      	cmp	r2, #9
 800a382:	d903      	bls.n	800a38c <_svfiprintf_r+0x1a8>
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0c5      	beq.n	800a314 <_svfiprintf_r+0x130>
 800a388:	9105      	str	r1, [sp, #20]
 800a38a:	e7c3      	b.n	800a314 <_svfiprintf_r+0x130>
 800a38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a390:	4604      	mov	r4, r0
 800a392:	2301      	movs	r3, #1
 800a394:	e7f0      	b.n	800a378 <_svfiprintf_r+0x194>
 800a396:	ab03      	add	r3, sp, #12
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	462a      	mov	r2, r5
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <_svfiprintf_r+0x1f8>)
 800a39e:	a904      	add	r1, sp, #16
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7fd ffcb 	bl	800833c <_printf_float>
 800a3a6:	1c42      	adds	r2, r0, #1
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	d1d6      	bne.n	800a35a <_svfiprintf_r+0x176>
 800a3ac:	89ab      	ldrh	r3, [r5, #12]
 800a3ae:	065b      	lsls	r3, r3, #25
 800a3b0:	f53f af2c 	bmi.w	800a20c <_svfiprintf_r+0x28>
 800a3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b6:	b01d      	add	sp, #116	; 0x74
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3bc:	ab03      	add	r3, sp, #12
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <_svfiprintf_r+0x1f8>)
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f7fe fa5c 	bl	8008884 <_printf_i>
 800a3cc:	e7eb      	b.n	800a3a6 <_svfiprintf_r+0x1c2>
 800a3ce:	bf00      	nop
 800a3d0:	0800b744 	.word	0x0800b744
 800a3d4:	0800b74e 	.word	0x0800b74e
 800a3d8:	0800833d 	.word	0x0800833d
 800a3dc:	0800a12d 	.word	0x0800a12d
 800a3e0:	0800b74a 	.word	0x0800b74a

0800a3e4 <_sbrk_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_sbrk_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f7 ff32 	bl	8002258 <_sbrk>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_sbrk_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_sbrk_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000438 	.word	0x20000438

0800a404 <__assert_func>:
 800a404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a406:	4614      	mov	r4, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <__assert_func+0x2c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4605      	mov	r5, r0
 800a410:	68d8      	ldr	r0, [r3, #12]
 800a412:	b14c      	cbz	r4, 800a428 <__assert_func+0x24>
 800a414:	4b07      	ldr	r3, [pc, #28]	; (800a434 <__assert_func+0x30>)
 800a416:	9100      	str	r1, [sp, #0]
 800a418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a41c:	4906      	ldr	r1, [pc, #24]	; (800a438 <__assert_func+0x34>)
 800a41e:	462b      	mov	r3, r5
 800a420:	f000 f80e 	bl	800a440 <fiprintf>
 800a424:	f000 faac 	bl	800a980 <abort>
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <__assert_func+0x38>)
 800a42a:	461c      	mov	r4, r3
 800a42c:	e7f3      	b.n	800a416 <__assert_func+0x12>
 800a42e:	bf00      	nop
 800a430:	20000010 	.word	0x20000010
 800a434:	0800b755 	.word	0x0800b755
 800a438:	0800b762 	.word	0x0800b762
 800a43c:	0800b790 	.word	0x0800b790

0800a440 <fiprintf>:
 800a440:	b40e      	push	{r1, r2, r3}
 800a442:	b503      	push	{r0, r1, lr}
 800a444:	4601      	mov	r1, r0
 800a446:	ab03      	add	r3, sp, #12
 800a448:	4805      	ldr	r0, [pc, #20]	; (800a460 <fiprintf+0x20>)
 800a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44e:	6800      	ldr	r0, [r0, #0]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	f000 f897 	bl	800a584 <_vfiprintf_r>
 800a456:	b002      	add	sp, #8
 800a458:	f85d eb04 	ldr.w	lr, [sp], #4
 800a45c:	b003      	add	sp, #12
 800a45e:	4770      	bx	lr
 800a460:	20000010 	.word	0x20000010

0800a464 <__ascii_mbtowc>:
 800a464:	b082      	sub	sp, #8
 800a466:	b901      	cbnz	r1, 800a46a <__ascii_mbtowc+0x6>
 800a468:	a901      	add	r1, sp, #4
 800a46a:	b142      	cbz	r2, 800a47e <__ascii_mbtowc+0x1a>
 800a46c:	b14b      	cbz	r3, 800a482 <__ascii_mbtowc+0x1e>
 800a46e:	7813      	ldrb	r3, [r2, #0]
 800a470:	600b      	str	r3, [r1, #0]
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	1e10      	subs	r0, r2, #0
 800a476:	bf18      	it	ne
 800a478:	2001      	movne	r0, #1
 800a47a:	b002      	add	sp, #8
 800a47c:	4770      	bx	lr
 800a47e:	4610      	mov	r0, r2
 800a480:	e7fb      	b.n	800a47a <__ascii_mbtowc+0x16>
 800a482:	f06f 0001 	mvn.w	r0, #1
 800a486:	e7f8      	b.n	800a47a <__ascii_mbtowc+0x16>

0800a488 <memmove>:
 800a488:	4288      	cmp	r0, r1
 800a48a:	b510      	push	{r4, lr}
 800a48c:	eb01 0402 	add.w	r4, r1, r2
 800a490:	d902      	bls.n	800a498 <memmove+0x10>
 800a492:	4284      	cmp	r4, r0
 800a494:	4623      	mov	r3, r4
 800a496:	d807      	bhi.n	800a4a8 <memmove+0x20>
 800a498:	1e43      	subs	r3, r0, #1
 800a49a:	42a1      	cmp	r1, r4
 800a49c:	d008      	beq.n	800a4b0 <memmove+0x28>
 800a49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4a6:	e7f8      	b.n	800a49a <memmove+0x12>
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	428a      	cmp	r2, r1
 800a4ae:	d100      	bne.n	800a4b2 <memmove+0x2a>
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4ba:	e7f7      	b.n	800a4ac <memmove+0x24>

0800a4bc <__malloc_lock>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__malloc_lock+0x8>)
 800a4be:	f000 bc1f 	b.w	800ad00 <__retarget_lock_acquire_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	2000043c 	.word	0x2000043c

0800a4c8 <__malloc_unlock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__malloc_unlock+0x8>)
 800a4ca:	f000 bc1a 	b.w	800ad02 <__retarget_lock_release_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	2000043c 	.word	0x2000043c

0800a4d4 <_realloc_r>:
 800a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4614      	mov	r4, r2
 800a4dc:	460e      	mov	r6, r1
 800a4de:	b921      	cbnz	r1, 800a4ea <_realloc_r+0x16>
 800a4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	f7ff bdad 	b.w	800a044 <_malloc_r>
 800a4ea:	b92a      	cbnz	r2, 800a4f8 <_realloc_r+0x24>
 800a4ec:	f7ff fd3e 	bl	8009f6c <_free_r>
 800a4f0:	4625      	mov	r5, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	f000 fc6a 	bl	800add0 <_malloc_usable_size_r>
 800a4fc:	4284      	cmp	r4, r0
 800a4fe:	4607      	mov	r7, r0
 800a500:	d802      	bhi.n	800a508 <_realloc_r+0x34>
 800a502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a506:	d812      	bhi.n	800a52e <_realloc_r+0x5a>
 800a508:	4621      	mov	r1, r4
 800a50a:	4640      	mov	r0, r8
 800a50c:	f7ff fd9a 	bl	800a044 <_malloc_r>
 800a510:	4605      	mov	r5, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d0ed      	beq.n	800a4f2 <_realloc_r+0x1e>
 800a516:	42bc      	cmp	r4, r7
 800a518:	4622      	mov	r2, r4
 800a51a:	4631      	mov	r1, r6
 800a51c:	bf28      	it	cs
 800a51e:	463a      	movcs	r2, r7
 800a520:	f7ff f97c 	bl	800981c <memcpy>
 800a524:	4631      	mov	r1, r6
 800a526:	4640      	mov	r0, r8
 800a528:	f7ff fd20 	bl	8009f6c <_free_r>
 800a52c:	e7e1      	b.n	800a4f2 <_realloc_r+0x1e>
 800a52e:	4635      	mov	r5, r6
 800a530:	e7df      	b.n	800a4f2 <_realloc_r+0x1e>

0800a532 <__sfputc_r>:
 800a532:	6893      	ldr	r3, [r2, #8]
 800a534:	3b01      	subs	r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	b410      	push	{r4}
 800a53a:	6093      	str	r3, [r2, #8]
 800a53c:	da08      	bge.n	800a550 <__sfputc_r+0x1e>
 800a53e:	6994      	ldr	r4, [r2, #24]
 800a540:	42a3      	cmp	r3, r4
 800a542:	db01      	blt.n	800a548 <__sfputc_r+0x16>
 800a544:	290a      	cmp	r1, #10
 800a546:	d103      	bne.n	800a550 <__sfputc_r+0x1e>
 800a548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a54c:	f000 b94a 	b.w	800a7e4 <__swbuf_r>
 800a550:	6813      	ldr	r3, [r2, #0]
 800a552:	1c58      	adds	r0, r3, #1
 800a554:	6010      	str	r0, [r2, #0]
 800a556:	7019      	strb	r1, [r3, #0]
 800a558:	4608      	mov	r0, r1
 800a55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <__sfputs_r>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	4614      	mov	r4, r2
 800a568:	18d5      	adds	r5, r2, r3
 800a56a:	42ac      	cmp	r4, r5
 800a56c:	d101      	bne.n	800a572 <__sfputs_r+0x12>
 800a56e:	2000      	movs	r0, #0
 800a570:	e007      	b.n	800a582 <__sfputs_r+0x22>
 800a572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a576:	463a      	mov	r2, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff ffda 	bl	800a532 <__sfputc_r>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d1f3      	bne.n	800a56a <__sfputs_r+0xa>
 800a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a584 <_vfiprintf_r>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	460d      	mov	r5, r1
 800a58a:	b09d      	sub	sp, #116	; 0x74
 800a58c:	4614      	mov	r4, r2
 800a58e:	4698      	mov	r8, r3
 800a590:	4606      	mov	r6, r0
 800a592:	b118      	cbz	r0, 800a59c <_vfiprintf_r+0x18>
 800a594:	6983      	ldr	r3, [r0, #24]
 800a596:	b90b      	cbnz	r3, 800a59c <_vfiprintf_r+0x18>
 800a598:	f000 fb14 	bl	800abc4 <__sinit>
 800a59c:	4b89      	ldr	r3, [pc, #548]	; (800a7c4 <_vfiprintf_r+0x240>)
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	d11b      	bne.n	800a5da <_vfiprintf_r+0x56>
 800a5a2:	6875      	ldr	r5, [r6, #4]
 800a5a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a6:	07d9      	lsls	r1, r3, #31
 800a5a8:	d405      	bmi.n	800a5b6 <_vfiprintf_r+0x32>
 800a5aa:	89ab      	ldrh	r3, [r5, #12]
 800a5ac:	059a      	lsls	r2, r3, #22
 800a5ae:	d402      	bmi.n	800a5b6 <_vfiprintf_r+0x32>
 800a5b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b2:	f000 fba5 	bl	800ad00 <__retarget_lock_acquire_recursive>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	071b      	lsls	r3, r3, #28
 800a5ba:	d501      	bpl.n	800a5c0 <_vfiprintf_r+0x3c>
 800a5bc:	692b      	ldr	r3, [r5, #16]
 800a5be:	b9eb      	cbnz	r3, 800a5fc <_vfiprintf_r+0x78>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f000 f96e 	bl	800a8a4 <__swsetup_r>
 800a5c8:	b1c0      	cbz	r0, 800a5fc <_vfiprintf_r+0x78>
 800a5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5cc:	07dc      	lsls	r4, r3, #31
 800a5ce:	d50e      	bpl.n	800a5ee <_vfiprintf_r+0x6a>
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	b01d      	add	sp, #116	; 0x74
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	4b7b      	ldr	r3, [pc, #492]	; (800a7c8 <_vfiprintf_r+0x244>)
 800a5dc:	429d      	cmp	r5, r3
 800a5de:	d101      	bne.n	800a5e4 <_vfiprintf_r+0x60>
 800a5e0:	68b5      	ldr	r5, [r6, #8]
 800a5e2:	e7df      	b.n	800a5a4 <_vfiprintf_r+0x20>
 800a5e4:	4b79      	ldr	r3, [pc, #484]	; (800a7cc <_vfiprintf_r+0x248>)
 800a5e6:	429d      	cmp	r5, r3
 800a5e8:	bf08      	it	eq
 800a5ea:	68f5      	ldreq	r5, [r6, #12]
 800a5ec:	e7da      	b.n	800a5a4 <_vfiprintf_r+0x20>
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	0598      	lsls	r0, r3, #22
 800a5f2:	d4ed      	bmi.n	800a5d0 <_vfiprintf_r+0x4c>
 800a5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f6:	f000 fb84 	bl	800ad02 <__retarget_lock_release_recursive>
 800a5fa:	e7e9      	b.n	800a5d0 <_vfiprintf_r+0x4c>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	2320      	movs	r3, #32
 800a602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a606:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60a:	2330      	movs	r3, #48	; 0x30
 800a60c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7d0 <_vfiprintf_r+0x24c>
 800a610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a614:	f04f 0901 	mov.w	r9, #1
 800a618:	4623      	mov	r3, r4
 800a61a:	469a      	mov	sl, r3
 800a61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a620:	b10a      	cbz	r2, 800a626 <_vfiprintf_r+0xa2>
 800a622:	2a25      	cmp	r2, #37	; 0x25
 800a624:	d1f9      	bne.n	800a61a <_vfiprintf_r+0x96>
 800a626:	ebba 0b04 	subs.w	fp, sl, r4
 800a62a:	d00b      	beq.n	800a644 <_vfiprintf_r+0xc0>
 800a62c:	465b      	mov	r3, fp
 800a62e:	4622      	mov	r2, r4
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ff94 	bl	800a560 <__sfputs_r>
 800a638:	3001      	adds	r0, #1
 800a63a:	f000 80aa 	beq.w	800a792 <_vfiprintf_r+0x20e>
 800a63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a640:	445a      	add	r2, fp
 800a642:	9209      	str	r2, [sp, #36]	; 0x24
 800a644:	f89a 3000 	ldrb.w	r3, [sl]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 80a2 	beq.w	800a792 <_vfiprintf_r+0x20e>
 800a64e:	2300      	movs	r3, #0
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a658:	f10a 0a01 	add.w	sl, sl, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	9307      	str	r3, [sp, #28]
 800a660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a664:	931a      	str	r3, [sp, #104]	; 0x68
 800a666:	4654      	mov	r4, sl
 800a668:	2205      	movs	r2, #5
 800a66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66e:	4858      	ldr	r0, [pc, #352]	; (800a7d0 <_vfiprintf_r+0x24c>)
 800a670:	f7f5 fdbe 	bl	80001f0 <memchr>
 800a674:	9a04      	ldr	r2, [sp, #16]
 800a676:	b9d8      	cbnz	r0, 800a6b0 <_vfiprintf_r+0x12c>
 800a678:	06d1      	lsls	r1, r2, #27
 800a67a:	bf44      	itt	mi
 800a67c:	2320      	movmi	r3, #32
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a682:	0713      	lsls	r3, r2, #28
 800a684:	bf44      	itt	mi
 800a686:	232b      	movmi	r3, #43	; 0x2b
 800a688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68c:	f89a 3000 	ldrb.w	r3, [sl]
 800a690:	2b2a      	cmp	r3, #42	; 0x2a
 800a692:	d015      	beq.n	800a6c0 <_vfiprintf_r+0x13c>
 800a694:	9a07      	ldr	r2, [sp, #28]
 800a696:	4654      	mov	r4, sl
 800a698:	2000      	movs	r0, #0
 800a69a:	f04f 0c0a 	mov.w	ip, #10
 800a69e:	4621      	mov	r1, r4
 800a6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a4:	3b30      	subs	r3, #48	; 0x30
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d94e      	bls.n	800a748 <_vfiprintf_r+0x1c4>
 800a6aa:	b1b0      	cbz	r0, 800a6da <_vfiprintf_r+0x156>
 800a6ac:	9207      	str	r2, [sp, #28]
 800a6ae:	e014      	b.n	800a6da <_vfiprintf_r+0x156>
 800a6b0:	eba0 0308 	sub.w	r3, r0, r8
 800a6b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	46a2      	mov	sl, r4
 800a6be:	e7d2      	b.n	800a666 <_vfiprintf_r+0xe2>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	1d19      	adds	r1, r3, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	9103      	str	r1, [sp, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bfbb      	ittet	lt
 800a6cc:	425b      	neglt	r3, r3
 800a6ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d2:	9307      	strge	r3, [sp, #28]
 800a6d4:	9307      	strlt	r3, [sp, #28]
 800a6d6:	bfb8      	it	lt
 800a6d8:	9204      	strlt	r2, [sp, #16]
 800a6da:	7823      	ldrb	r3, [r4, #0]
 800a6dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6de:	d10c      	bne.n	800a6fa <_vfiprintf_r+0x176>
 800a6e0:	7863      	ldrb	r3, [r4, #1]
 800a6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e4:	d135      	bne.n	800a752 <_vfiprintf_r+0x1ce>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	1d1a      	adds	r2, r3, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	9203      	str	r2, [sp, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfb8      	it	lt
 800a6f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f6:	3402      	adds	r4, #2
 800a6f8:	9305      	str	r3, [sp, #20]
 800a6fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7e0 <_vfiprintf_r+0x25c>
 800a6fe:	7821      	ldrb	r1, [r4, #0]
 800a700:	2203      	movs	r2, #3
 800a702:	4650      	mov	r0, sl
 800a704:	f7f5 fd74 	bl	80001f0 <memchr>
 800a708:	b140      	cbz	r0, 800a71c <_vfiprintf_r+0x198>
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	eba0 000a 	sub.w	r0, r0, sl
 800a710:	fa03 f000 	lsl.w	r0, r3, r0
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	4303      	orrs	r3, r0
 800a718:	3401      	adds	r4, #1
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	482c      	ldr	r0, [pc, #176]	; (800a7d4 <_vfiprintf_r+0x250>)
 800a722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a726:	2206      	movs	r2, #6
 800a728:	f7f5 fd62 	bl	80001f0 <memchr>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d03f      	beq.n	800a7b0 <_vfiprintf_r+0x22c>
 800a730:	4b29      	ldr	r3, [pc, #164]	; (800a7d8 <_vfiprintf_r+0x254>)
 800a732:	bb1b      	cbnz	r3, 800a77c <_vfiprintf_r+0x1f8>
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	3307      	adds	r3, #7
 800a738:	f023 0307 	bic.w	r3, r3, #7
 800a73c:	3308      	adds	r3, #8
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	443b      	add	r3, r7
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	e767      	b.n	800a618 <_vfiprintf_r+0x94>
 800a748:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74c:	460c      	mov	r4, r1
 800a74e:	2001      	movs	r0, #1
 800a750:	e7a5      	b.n	800a69e <_vfiprintf_r+0x11a>
 800a752:	2300      	movs	r3, #0
 800a754:	3401      	adds	r4, #1
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0c0a 	mov.w	ip, #10
 800a75e:	4620      	mov	r0, r4
 800a760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a764:	3a30      	subs	r2, #48	; 0x30
 800a766:	2a09      	cmp	r2, #9
 800a768:	d903      	bls.n	800a772 <_vfiprintf_r+0x1ee>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0c5      	beq.n	800a6fa <_vfiprintf_r+0x176>
 800a76e:	9105      	str	r1, [sp, #20]
 800a770:	e7c3      	b.n	800a6fa <_vfiprintf_r+0x176>
 800a772:	fb0c 2101 	mla	r1, ip, r1, r2
 800a776:	4604      	mov	r4, r0
 800a778:	2301      	movs	r3, #1
 800a77a:	e7f0      	b.n	800a75e <_vfiprintf_r+0x1da>
 800a77c:	ab03      	add	r3, sp, #12
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	462a      	mov	r2, r5
 800a782:	4b16      	ldr	r3, [pc, #88]	; (800a7dc <_vfiprintf_r+0x258>)
 800a784:	a904      	add	r1, sp, #16
 800a786:	4630      	mov	r0, r6
 800a788:	f7fd fdd8 	bl	800833c <_printf_float>
 800a78c:	4607      	mov	r7, r0
 800a78e:	1c78      	adds	r0, r7, #1
 800a790:	d1d6      	bne.n	800a740 <_vfiprintf_r+0x1bc>
 800a792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a794:	07d9      	lsls	r1, r3, #31
 800a796:	d405      	bmi.n	800a7a4 <_vfiprintf_r+0x220>
 800a798:	89ab      	ldrh	r3, [r5, #12]
 800a79a:	059a      	lsls	r2, r3, #22
 800a79c:	d402      	bmi.n	800a7a4 <_vfiprintf_r+0x220>
 800a79e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a0:	f000 faaf 	bl	800ad02 <__retarget_lock_release_recursive>
 800a7a4:	89ab      	ldrh	r3, [r5, #12]
 800a7a6:	065b      	lsls	r3, r3, #25
 800a7a8:	f53f af12 	bmi.w	800a5d0 <_vfiprintf_r+0x4c>
 800a7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ae:	e711      	b.n	800a5d4 <_vfiprintf_r+0x50>
 800a7b0:	ab03      	add	r3, sp, #12
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <_vfiprintf_r+0x258>)
 800a7b8:	a904      	add	r1, sp, #16
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7fe f862 	bl	8008884 <_printf_i>
 800a7c0:	e7e4      	b.n	800a78c <_vfiprintf_r+0x208>
 800a7c2:	bf00      	nop
 800a7c4:	0800b8bc 	.word	0x0800b8bc
 800a7c8:	0800b8dc 	.word	0x0800b8dc
 800a7cc:	0800b89c 	.word	0x0800b89c
 800a7d0:	0800b744 	.word	0x0800b744
 800a7d4:	0800b74e 	.word	0x0800b74e
 800a7d8:	0800833d 	.word	0x0800833d
 800a7dc:	0800a561 	.word	0x0800a561
 800a7e0:	0800b74a 	.word	0x0800b74a

0800a7e4 <__swbuf_r>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	460e      	mov	r6, r1
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b118      	cbz	r0, 800a7f6 <__swbuf_r+0x12>
 800a7ee:	6983      	ldr	r3, [r0, #24]
 800a7f0:	b90b      	cbnz	r3, 800a7f6 <__swbuf_r+0x12>
 800a7f2:	f000 f9e7 	bl	800abc4 <__sinit>
 800a7f6:	4b21      	ldr	r3, [pc, #132]	; (800a87c <__swbuf_r+0x98>)
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	d12b      	bne.n	800a854 <__swbuf_r+0x70>
 800a7fc:	686c      	ldr	r4, [r5, #4]
 800a7fe:	69a3      	ldr	r3, [r4, #24]
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	071a      	lsls	r2, r3, #28
 800a806:	d52f      	bpl.n	800a868 <__swbuf_r+0x84>
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	b36b      	cbz	r3, 800a868 <__swbuf_r+0x84>
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	6820      	ldr	r0, [r4, #0]
 800a810:	1ac0      	subs	r0, r0, r3
 800a812:	6963      	ldr	r3, [r4, #20]
 800a814:	b2f6      	uxtb	r6, r6
 800a816:	4283      	cmp	r3, r0
 800a818:	4637      	mov	r7, r6
 800a81a:	dc04      	bgt.n	800a826 <__swbuf_r+0x42>
 800a81c:	4621      	mov	r1, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 f93c 	bl	800aa9c <_fflush_r>
 800a824:	bb30      	cbnz	r0, 800a874 <__swbuf_r+0x90>
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	3b01      	subs	r3, #1
 800a82a:	60a3      	str	r3, [r4, #8]
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	6022      	str	r2, [r4, #0]
 800a832:	701e      	strb	r6, [r3, #0]
 800a834:	6963      	ldr	r3, [r4, #20]
 800a836:	3001      	adds	r0, #1
 800a838:	4283      	cmp	r3, r0
 800a83a:	d004      	beq.n	800a846 <__swbuf_r+0x62>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	07db      	lsls	r3, r3, #31
 800a840:	d506      	bpl.n	800a850 <__swbuf_r+0x6c>
 800a842:	2e0a      	cmp	r6, #10
 800a844:	d104      	bne.n	800a850 <__swbuf_r+0x6c>
 800a846:	4621      	mov	r1, r4
 800a848:	4628      	mov	r0, r5
 800a84a:	f000 f927 	bl	800aa9c <_fflush_r>
 800a84e:	b988      	cbnz	r0, 800a874 <__swbuf_r+0x90>
 800a850:	4638      	mov	r0, r7
 800a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a854:	4b0a      	ldr	r3, [pc, #40]	; (800a880 <__swbuf_r+0x9c>)
 800a856:	429c      	cmp	r4, r3
 800a858:	d101      	bne.n	800a85e <__swbuf_r+0x7a>
 800a85a:	68ac      	ldr	r4, [r5, #8]
 800a85c:	e7cf      	b.n	800a7fe <__swbuf_r+0x1a>
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <__swbuf_r+0xa0>)
 800a860:	429c      	cmp	r4, r3
 800a862:	bf08      	it	eq
 800a864:	68ec      	ldreq	r4, [r5, #12]
 800a866:	e7ca      	b.n	800a7fe <__swbuf_r+0x1a>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f81a 	bl	800a8a4 <__swsetup_r>
 800a870:	2800      	cmp	r0, #0
 800a872:	d0cb      	beq.n	800a80c <__swbuf_r+0x28>
 800a874:	f04f 37ff 	mov.w	r7, #4294967295
 800a878:	e7ea      	b.n	800a850 <__swbuf_r+0x6c>
 800a87a:	bf00      	nop
 800a87c:	0800b8bc 	.word	0x0800b8bc
 800a880:	0800b8dc 	.word	0x0800b8dc
 800a884:	0800b89c 	.word	0x0800b89c

0800a888 <__ascii_wctomb>:
 800a888:	b149      	cbz	r1, 800a89e <__ascii_wctomb+0x16>
 800a88a:	2aff      	cmp	r2, #255	; 0xff
 800a88c:	bf85      	ittet	hi
 800a88e:	238a      	movhi	r3, #138	; 0x8a
 800a890:	6003      	strhi	r3, [r0, #0]
 800a892:	700a      	strbls	r2, [r1, #0]
 800a894:	f04f 30ff 	movhi.w	r0, #4294967295
 800a898:	bf98      	it	ls
 800a89a:	2001      	movls	r0, #1
 800a89c:	4770      	bx	lr
 800a89e:	4608      	mov	r0, r1
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <__swsetup_r>:
 800a8a4:	4b32      	ldr	r3, [pc, #200]	; (800a970 <__swsetup_r+0xcc>)
 800a8a6:	b570      	push	{r4, r5, r6, lr}
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	b125      	cbz	r5, 800a8ba <__swsetup_r+0x16>
 800a8b0:	69ab      	ldr	r3, [r5, #24]
 800a8b2:	b913      	cbnz	r3, 800a8ba <__swsetup_r+0x16>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 f985 	bl	800abc4 <__sinit>
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <__swsetup_r+0xd0>)
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d10f      	bne.n	800a8e0 <__swsetup_r+0x3c>
 800a8c0:	686c      	ldr	r4, [r5, #4]
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c8:	0719      	lsls	r1, r3, #28
 800a8ca:	d42c      	bmi.n	800a926 <__swsetup_r+0x82>
 800a8cc:	06dd      	lsls	r5, r3, #27
 800a8ce:	d411      	bmi.n	800a8f4 <__swsetup_r+0x50>
 800a8d0:	2309      	movs	r3, #9
 800a8d2:	6033      	str	r3, [r6, #0]
 800a8d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295
 800a8de:	e03e      	b.n	800a95e <__swsetup_r+0xba>
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <__swsetup_r+0xd4>)
 800a8e2:	429c      	cmp	r4, r3
 800a8e4:	d101      	bne.n	800a8ea <__swsetup_r+0x46>
 800a8e6:	68ac      	ldr	r4, [r5, #8]
 800a8e8:	e7eb      	b.n	800a8c2 <__swsetup_r+0x1e>
 800a8ea:	4b24      	ldr	r3, [pc, #144]	; (800a97c <__swsetup_r+0xd8>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	bf08      	it	eq
 800a8f0:	68ec      	ldreq	r4, [r5, #12]
 800a8f2:	e7e6      	b.n	800a8c2 <__swsetup_r+0x1e>
 800a8f4:	0758      	lsls	r0, r3, #29
 800a8f6:	d512      	bpl.n	800a91e <__swsetup_r+0x7a>
 800a8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fa:	b141      	cbz	r1, 800a90e <__swsetup_r+0x6a>
 800a8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a900:	4299      	cmp	r1, r3
 800a902:	d002      	beq.n	800a90a <__swsetup_r+0x66>
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff fb31 	bl	8009f6c <_free_r>
 800a90a:	2300      	movs	r3, #0
 800a90c:	6363      	str	r3, [r4, #52]	; 0x34
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b94b      	cbnz	r3, 800a93e <__swsetup_r+0x9a>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a934:	d003      	beq.n	800a93e <__swsetup_r+0x9a>
 800a936:	4621      	mov	r1, r4
 800a938:	4630      	mov	r0, r6
 800a93a:	f000 fa09 	bl	800ad50 <__smakebuf_r>
 800a93e:	89a0      	ldrh	r0, [r4, #12]
 800a940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a944:	f010 0301 	ands.w	r3, r0, #1
 800a948:	d00a      	beq.n	800a960 <__swsetup_r+0xbc>
 800a94a:	2300      	movs	r3, #0
 800a94c:	60a3      	str	r3, [r4, #8]
 800a94e:	6963      	ldr	r3, [r4, #20]
 800a950:	425b      	negs	r3, r3
 800a952:	61a3      	str	r3, [r4, #24]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	b943      	cbnz	r3, 800a96a <__swsetup_r+0xc6>
 800a958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a95c:	d1ba      	bne.n	800a8d4 <__swsetup_r+0x30>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	0781      	lsls	r1, r0, #30
 800a962:	bf58      	it	pl
 800a964:	6963      	ldrpl	r3, [r4, #20]
 800a966:	60a3      	str	r3, [r4, #8]
 800a968:	e7f4      	b.n	800a954 <__swsetup_r+0xb0>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e7f7      	b.n	800a95e <__swsetup_r+0xba>
 800a96e:	bf00      	nop
 800a970:	20000010 	.word	0x20000010
 800a974:	0800b8bc 	.word	0x0800b8bc
 800a978:	0800b8dc 	.word	0x0800b8dc
 800a97c:	0800b89c 	.word	0x0800b89c

0800a980 <abort>:
 800a980:	b508      	push	{r3, lr}
 800a982:	2006      	movs	r0, #6
 800a984:	f000 fa54 	bl	800ae30 <raise>
 800a988:	2001      	movs	r0, #1
 800a98a:	f7f7 fbed 	bl	8002168 <_exit>
	...

0800a990 <__sflush_r>:
 800a990:	898a      	ldrh	r2, [r1, #12]
 800a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	4605      	mov	r5, r0
 800a998:	0710      	lsls	r0, r2, #28
 800a99a:	460c      	mov	r4, r1
 800a99c:	d458      	bmi.n	800aa50 <__sflush_r+0xc0>
 800a99e:	684b      	ldr	r3, [r1, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	dc05      	bgt.n	800a9b0 <__sflush_r+0x20>
 800a9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	dc02      	bgt.n	800a9b0 <__sflush_r+0x20>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	d0f9      	beq.n	800a9aa <__sflush_r+0x1a>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9bc:	682f      	ldr	r7, [r5, #0]
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	d032      	beq.n	800aa28 <__sflush_r+0x98>
 800a9c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	075a      	lsls	r2, r3, #29
 800a9c8:	d505      	bpl.n	800a9d6 <__sflush_r+0x46>
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	1ac0      	subs	r0, r0, r3
 800a9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9d0:	b10b      	cbz	r3, 800a9d6 <__sflush_r+0x46>
 800a9d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9d4:	1ac0      	subs	r0, r0, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4602      	mov	r2, r0
 800a9da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9dc:	6a21      	ldr	r1, [r4, #32]
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b0      	blx	r6
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	d106      	bne.n	800a9f6 <__sflush_r+0x66>
 800a9e8:	6829      	ldr	r1, [r5, #0]
 800a9ea:	291d      	cmp	r1, #29
 800a9ec:	d82c      	bhi.n	800aa48 <__sflush_r+0xb8>
 800a9ee:	4a2a      	ldr	r2, [pc, #168]	; (800aa98 <__sflush_r+0x108>)
 800a9f0:	40ca      	lsrs	r2, r1
 800a9f2:	07d6      	lsls	r6, r2, #31
 800a9f4:	d528      	bpl.n	800aa48 <__sflush_r+0xb8>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	6062      	str	r2, [r4, #4]
 800a9fa:	04d9      	lsls	r1, r3, #19
 800a9fc:	6922      	ldr	r2, [r4, #16]
 800a9fe:	6022      	str	r2, [r4, #0]
 800aa00:	d504      	bpl.n	800aa0c <__sflush_r+0x7c>
 800aa02:	1c42      	adds	r2, r0, #1
 800aa04:	d101      	bne.n	800aa0a <__sflush_r+0x7a>
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	b903      	cbnz	r3, 800aa0c <__sflush_r+0x7c>
 800aa0a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0e:	602f      	str	r7, [r5, #0]
 800aa10:	2900      	cmp	r1, #0
 800aa12:	d0ca      	beq.n	800a9aa <__sflush_r+0x1a>
 800aa14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	d002      	beq.n	800aa22 <__sflush_r+0x92>
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff faa5 	bl	8009f6c <_free_r>
 800aa22:	2000      	movs	r0, #0
 800aa24:	6360      	str	r0, [r4, #52]	; 0x34
 800aa26:	e7c1      	b.n	800a9ac <__sflush_r+0x1c>
 800aa28:	6a21      	ldr	r1, [r4, #32]
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b0      	blx	r6
 800aa30:	1c41      	adds	r1, r0, #1
 800aa32:	d1c7      	bne.n	800a9c4 <__sflush_r+0x34>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0c4      	beq.n	800a9c4 <__sflush_r+0x34>
 800aa3a:	2b1d      	cmp	r3, #29
 800aa3c:	d001      	beq.n	800aa42 <__sflush_r+0xb2>
 800aa3e:	2b16      	cmp	r3, #22
 800aa40:	d101      	bne.n	800aa46 <__sflush_r+0xb6>
 800aa42:	602f      	str	r7, [r5, #0]
 800aa44:	e7b1      	b.n	800a9aa <__sflush_r+0x1a>
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	e7ad      	b.n	800a9ac <__sflush_r+0x1c>
 800aa50:	690f      	ldr	r7, [r1, #16]
 800aa52:	2f00      	cmp	r7, #0
 800aa54:	d0a9      	beq.n	800a9aa <__sflush_r+0x1a>
 800aa56:	0793      	lsls	r3, r2, #30
 800aa58:	680e      	ldr	r6, [r1, #0]
 800aa5a:	bf08      	it	eq
 800aa5c:	694b      	ldreq	r3, [r1, #20]
 800aa5e:	600f      	str	r7, [r1, #0]
 800aa60:	bf18      	it	ne
 800aa62:	2300      	movne	r3, #0
 800aa64:	eba6 0807 	sub.w	r8, r6, r7
 800aa68:	608b      	str	r3, [r1, #8]
 800aa6a:	f1b8 0f00 	cmp.w	r8, #0
 800aa6e:	dd9c      	ble.n	800a9aa <__sflush_r+0x1a>
 800aa70:	6a21      	ldr	r1, [r4, #32]
 800aa72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa74:	4643      	mov	r3, r8
 800aa76:	463a      	mov	r2, r7
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b0      	blx	r6
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	dc06      	bgt.n	800aa8e <__sflush_r+0xfe>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	e78e      	b.n	800a9ac <__sflush_r+0x1c>
 800aa8e:	4407      	add	r7, r0
 800aa90:	eba8 0800 	sub.w	r8, r8, r0
 800aa94:	e7e9      	b.n	800aa6a <__sflush_r+0xda>
 800aa96:	bf00      	nop
 800aa98:	20400001 	.word	0x20400001

0800aa9c <_fflush_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	690b      	ldr	r3, [r1, #16]
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	b913      	cbnz	r3, 800aaac <_fflush_r+0x10>
 800aaa6:	2500      	movs	r5, #0
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	b118      	cbz	r0, 800aab6 <_fflush_r+0x1a>
 800aaae:	6983      	ldr	r3, [r0, #24]
 800aab0:	b90b      	cbnz	r3, 800aab6 <_fflush_r+0x1a>
 800aab2:	f000 f887 	bl	800abc4 <__sinit>
 800aab6:	4b14      	ldr	r3, [pc, #80]	; (800ab08 <_fflush_r+0x6c>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	d11b      	bne.n	800aaf4 <_fflush_r+0x58>
 800aabc:	686c      	ldr	r4, [r5, #4]
 800aabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0ef      	beq.n	800aaa6 <_fflush_r+0xa>
 800aac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aac8:	07d0      	lsls	r0, r2, #31
 800aaca:	d404      	bmi.n	800aad6 <_fflush_r+0x3a>
 800aacc:	0599      	lsls	r1, r3, #22
 800aace:	d402      	bmi.n	800aad6 <_fflush_r+0x3a>
 800aad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aad2:	f000 f915 	bl	800ad00 <__retarget_lock_acquire_recursive>
 800aad6:	4628      	mov	r0, r5
 800aad8:	4621      	mov	r1, r4
 800aada:	f7ff ff59 	bl	800a990 <__sflush_r>
 800aade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aae0:	07da      	lsls	r2, r3, #31
 800aae2:	4605      	mov	r5, r0
 800aae4:	d4e0      	bmi.n	800aaa8 <_fflush_r+0xc>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	059b      	lsls	r3, r3, #22
 800aaea:	d4dd      	bmi.n	800aaa8 <_fflush_r+0xc>
 800aaec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaee:	f000 f908 	bl	800ad02 <__retarget_lock_release_recursive>
 800aaf2:	e7d9      	b.n	800aaa8 <_fflush_r+0xc>
 800aaf4:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <_fflush_r+0x70>)
 800aaf6:	429c      	cmp	r4, r3
 800aaf8:	d101      	bne.n	800aafe <_fflush_r+0x62>
 800aafa:	68ac      	ldr	r4, [r5, #8]
 800aafc:	e7df      	b.n	800aabe <_fflush_r+0x22>
 800aafe:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <_fflush_r+0x74>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	bf08      	it	eq
 800ab04:	68ec      	ldreq	r4, [r5, #12]
 800ab06:	e7da      	b.n	800aabe <_fflush_r+0x22>
 800ab08:	0800b8bc 	.word	0x0800b8bc
 800ab0c:	0800b8dc 	.word	0x0800b8dc
 800ab10:	0800b89c 	.word	0x0800b89c

0800ab14 <std>:
 800ab14:	2300      	movs	r3, #0
 800ab16:	b510      	push	{r4, lr}
 800ab18:	4604      	mov	r4, r0
 800ab1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab22:	6083      	str	r3, [r0, #8]
 800ab24:	8181      	strh	r1, [r0, #12]
 800ab26:	6643      	str	r3, [r0, #100]	; 0x64
 800ab28:	81c2      	strh	r2, [r0, #14]
 800ab2a:	6183      	str	r3, [r0, #24]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	2208      	movs	r2, #8
 800ab30:	305c      	adds	r0, #92	; 0x5c
 800ab32:	f7fd fb5b 	bl	80081ec <memset>
 800ab36:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <std+0x38>)
 800ab38:	6263      	str	r3, [r4, #36]	; 0x24
 800ab3a:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <std+0x3c>)
 800ab3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab3e:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <std+0x40>)
 800ab40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab42:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <std+0x44>)
 800ab44:	6224      	str	r4, [r4, #32]
 800ab46:	6323      	str	r3, [r4, #48]	; 0x30
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	bf00      	nop
 800ab4c:	0800ae69 	.word	0x0800ae69
 800ab50:	0800ae8b 	.word	0x0800ae8b
 800ab54:	0800aec3 	.word	0x0800aec3
 800ab58:	0800aee7 	.word	0x0800aee7

0800ab5c <_cleanup_r>:
 800ab5c:	4901      	ldr	r1, [pc, #4]	; (800ab64 <_cleanup_r+0x8>)
 800ab5e:	f000 b8af 	b.w	800acc0 <_fwalk_reent>
 800ab62:	bf00      	nop
 800ab64:	0800aa9d 	.word	0x0800aa9d

0800ab68 <__sfmoreglue>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	2268      	movs	r2, #104	; 0x68
 800ab6c:	1e4d      	subs	r5, r1, #1
 800ab6e:	4355      	muls	r5, r2
 800ab70:	460e      	mov	r6, r1
 800ab72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab76:	f7ff fa65 	bl	800a044 <_malloc_r>
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	b140      	cbz	r0, 800ab90 <__sfmoreglue+0x28>
 800ab7e:	2100      	movs	r1, #0
 800ab80:	e9c0 1600 	strd	r1, r6, [r0]
 800ab84:	300c      	adds	r0, #12
 800ab86:	60a0      	str	r0, [r4, #8]
 800ab88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab8c:	f7fd fb2e 	bl	80081ec <memset>
 800ab90:	4620      	mov	r0, r4
 800ab92:	bd70      	pop	{r4, r5, r6, pc}

0800ab94 <__sfp_lock_acquire>:
 800ab94:	4801      	ldr	r0, [pc, #4]	; (800ab9c <__sfp_lock_acquire+0x8>)
 800ab96:	f000 b8b3 	b.w	800ad00 <__retarget_lock_acquire_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	2000043d 	.word	0x2000043d

0800aba0 <__sfp_lock_release>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__sfp_lock_release+0x8>)
 800aba2:	f000 b8ae 	b.w	800ad02 <__retarget_lock_release_recursive>
 800aba6:	bf00      	nop
 800aba8:	2000043d 	.word	0x2000043d

0800abac <__sinit_lock_acquire>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__sinit_lock_acquire+0x8>)
 800abae:	f000 b8a7 	b.w	800ad00 <__retarget_lock_acquire_recursive>
 800abb2:	bf00      	nop
 800abb4:	2000043e 	.word	0x2000043e

0800abb8 <__sinit_lock_release>:
 800abb8:	4801      	ldr	r0, [pc, #4]	; (800abc0 <__sinit_lock_release+0x8>)
 800abba:	f000 b8a2 	b.w	800ad02 <__retarget_lock_release_recursive>
 800abbe:	bf00      	nop
 800abc0:	2000043e 	.word	0x2000043e

0800abc4 <__sinit>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4604      	mov	r4, r0
 800abc8:	f7ff fff0 	bl	800abac <__sinit_lock_acquire>
 800abcc:	69a3      	ldr	r3, [r4, #24]
 800abce:	b11b      	cbz	r3, 800abd8 <__sinit+0x14>
 800abd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd4:	f7ff bff0 	b.w	800abb8 <__sinit_lock_release>
 800abd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abdc:	6523      	str	r3, [r4, #80]	; 0x50
 800abde:	4b13      	ldr	r3, [pc, #76]	; (800ac2c <__sinit+0x68>)
 800abe0:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <__sinit+0x6c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	bf04      	itt	eq
 800abea:	2301      	moveq	r3, #1
 800abec:	61a3      	streq	r3, [r4, #24]
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 f820 	bl	800ac34 <__sfp>
 800abf4:	6060      	str	r0, [r4, #4]
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 f81c 	bl	800ac34 <__sfp>
 800abfc:	60a0      	str	r0, [r4, #8]
 800abfe:	4620      	mov	r0, r4
 800ac00:	f000 f818 	bl	800ac34 <__sfp>
 800ac04:	2200      	movs	r2, #0
 800ac06:	60e0      	str	r0, [r4, #12]
 800ac08:	2104      	movs	r1, #4
 800ac0a:	6860      	ldr	r0, [r4, #4]
 800ac0c:	f7ff ff82 	bl	800ab14 <std>
 800ac10:	68a0      	ldr	r0, [r4, #8]
 800ac12:	2201      	movs	r2, #1
 800ac14:	2109      	movs	r1, #9
 800ac16:	f7ff ff7d 	bl	800ab14 <std>
 800ac1a:	68e0      	ldr	r0, [r4, #12]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	2112      	movs	r1, #18
 800ac20:	f7ff ff78 	bl	800ab14 <std>
 800ac24:	2301      	movs	r3, #1
 800ac26:	61a3      	str	r3, [r4, #24]
 800ac28:	e7d2      	b.n	800abd0 <__sinit+0xc>
 800ac2a:	bf00      	nop
 800ac2c:	0800b524 	.word	0x0800b524
 800ac30:	0800ab5d 	.word	0x0800ab5d

0800ac34 <__sfp>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	4607      	mov	r7, r0
 800ac38:	f7ff ffac 	bl	800ab94 <__sfp_lock_acquire>
 800ac3c:	4b1e      	ldr	r3, [pc, #120]	; (800acb8 <__sfp+0x84>)
 800ac3e:	681e      	ldr	r6, [r3, #0]
 800ac40:	69b3      	ldr	r3, [r6, #24]
 800ac42:	b913      	cbnz	r3, 800ac4a <__sfp+0x16>
 800ac44:	4630      	mov	r0, r6
 800ac46:	f7ff ffbd 	bl	800abc4 <__sinit>
 800ac4a:	3648      	adds	r6, #72	; 0x48
 800ac4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	d503      	bpl.n	800ac5c <__sfp+0x28>
 800ac54:	6833      	ldr	r3, [r6, #0]
 800ac56:	b30b      	cbz	r3, 800ac9c <__sfp+0x68>
 800ac58:	6836      	ldr	r6, [r6, #0]
 800ac5a:	e7f7      	b.n	800ac4c <__sfp+0x18>
 800ac5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac60:	b9d5      	cbnz	r5, 800ac98 <__sfp+0x64>
 800ac62:	4b16      	ldr	r3, [pc, #88]	; (800acbc <__sfp+0x88>)
 800ac64:	60e3      	str	r3, [r4, #12]
 800ac66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac6c:	f000 f847 	bl	800acfe <__retarget_lock_init_recursive>
 800ac70:	f7ff ff96 	bl	800aba0 <__sfp_lock_release>
 800ac74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac7c:	6025      	str	r5, [r4, #0]
 800ac7e:	61a5      	str	r5, [r4, #24]
 800ac80:	2208      	movs	r2, #8
 800ac82:	4629      	mov	r1, r5
 800ac84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac88:	f7fd fab0 	bl	80081ec <memset>
 800ac8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac94:	4620      	mov	r0, r4
 800ac96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac98:	3468      	adds	r4, #104	; 0x68
 800ac9a:	e7d9      	b.n	800ac50 <__sfp+0x1c>
 800ac9c:	2104      	movs	r1, #4
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f7ff ff62 	bl	800ab68 <__sfmoreglue>
 800aca4:	4604      	mov	r4, r0
 800aca6:	6030      	str	r0, [r6, #0]
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1d5      	bne.n	800ac58 <__sfp+0x24>
 800acac:	f7ff ff78 	bl	800aba0 <__sfp_lock_release>
 800acb0:	230c      	movs	r3, #12
 800acb2:	603b      	str	r3, [r7, #0]
 800acb4:	e7ee      	b.n	800ac94 <__sfp+0x60>
 800acb6:	bf00      	nop
 800acb8:	0800b524 	.word	0x0800b524
 800acbc:	ffff0001 	.word	0xffff0001

0800acc0 <_fwalk_reent>:
 800acc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc4:	4606      	mov	r6, r0
 800acc6:	4688      	mov	r8, r1
 800acc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800accc:	2700      	movs	r7, #0
 800acce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acd2:	f1b9 0901 	subs.w	r9, r9, #1
 800acd6:	d505      	bpl.n	800ace4 <_fwalk_reent+0x24>
 800acd8:	6824      	ldr	r4, [r4, #0]
 800acda:	2c00      	cmp	r4, #0
 800acdc:	d1f7      	bne.n	800acce <_fwalk_reent+0xe>
 800acde:	4638      	mov	r0, r7
 800ace0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace4:	89ab      	ldrh	r3, [r5, #12]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d907      	bls.n	800acfa <_fwalk_reent+0x3a>
 800acea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acee:	3301      	adds	r3, #1
 800acf0:	d003      	beq.n	800acfa <_fwalk_reent+0x3a>
 800acf2:	4629      	mov	r1, r5
 800acf4:	4630      	mov	r0, r6
 800acf6:	47c0      	blx	r8
 800acf8:	4307      	orrs	r7, r0
 800acfa:	3568      	adds	r5, #104	; 0x68
 800acfc:	e7e9      	b.n	800acd2 <_fwalk_reent+0x12>

0800acfe <__retarget_lock_init_recursive>:
 800acfe:	4770      	bx	lr

0800ad00 <__retarget_lock_acquire_recursive>:
 800ad00:	4770      	bx	lr

0800ad02 <__retarget_lock_release_recursive>:
 800ad02:	4770      	bx	lr

0800ad04 <__swhatbuf_r>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	460e      	mov	r6, r1
 800ad08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	b096      	sub	sp, #88	; 0x58
 800ad10:	4614      	mov	r4, r2
 800ad12:	461d      	mov	r5, r3
 800ad14:	da08      	bge.n	800ad28 <__swhatbuf_r+0x24>
 800ad16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	061a      	lsls	r2, r3, #24
 800ad20:	d410      	bmi.n	800ad44 <__swhatbuf_r+0x40>
 800ad22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad26:	e00e      	b.n	800ad46 <__swhatbuf_r+0x42>
 800ad28:	466a      	mov	r2, sp
 800ad2a:	f000 f903 	bl	800af34 <_fstat_r>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	dbf1      	blt.n	800ad16 <__swhatbuf_r+0x12>
 800ad32:	9a01      	ldr	r2, [sp, #4]
 800ad34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad3c:	425a      	negs	r2, r3
 800ad3e:	415a      	adcs	r2, r3
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	e7ee      	b.n	800ad22 <__swhatbuf_r+0x1e>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	2000      	movs	r0, #0
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	b016      	add	sp, #88	; 0x58
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad50 <__smakebuf_r>:
 800ad50:	898b      	ldrh	r3, [r1, #12]
 800ad52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad54:	079d      	lsls	r5, r3, #30
 800ad56:	4606      	mov	r6, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	d507      	bpl.n	800ad6c <__smakebuf_r+0x1c>
 800ad5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	2301      	movs	r3, #1
 800ad66:	6163      	str	r3, [r4, #20]
 800ad68:	b002      	add	sp, #8
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	ab01      	add	r3, sp, #4
 800ad6e:	466a      	mov	r2, sp
 800ad70:	f7ff ffc8 	bl	800ad04 <__swhatbuf_r>
 800ad74:	9900      	ldr	r1, [sp, #0]
 800ad76:	4605      	mov	r5, r0
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff f963 	bl	800a044 <_malloc_r>
 800ad7e:	b948      	cbnz	r0, 800ad94 <__smakebuf_r+0x44>
 800ad80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad84:	059a      	lsls	r2, r3, #22
 800ad86:	d4ef      	bmi.n	800ad68 <__smakebuf_r+0x18>
 800ad88:	f023 0303 	bic.w	r3, r3, #3
 800ad8c:	f043 0302 	orr.w	r3, r3, #2
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	e7e3      	b.n	800ad5c <__smakebuf_r+0xc>
 800ad94:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <__smakebuf_r+0x7c>)
 800ad96:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	6020      	str	r0, [r4, #0]
 800ad9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	9b00      	ldr	r3, [sp, #0]
 800ada4:	6163      	str	r3, [r4, #20]
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	6120      	str	r0, [r4, #16]
 800adaa:	b15b      	cbz	r3, 800adc4 <__smakebuf_r+0x74>
 800adac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb0:	4630      	mov	r0, r6
 800adb2:	f000 f8d1 	bl	800af58 <_isatty_r>
 800adb6:	b128      	cbz	r0, 800adc4 <__smakebuf_r+0x74>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f023 0303 	bic.w	r3, r3, #3
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	89a0      	ldrh	r0, [r4, #12]
 800adc6:	4305      	orrs	r5, r0
 800adc8:	81a5      	strh	r5, [r4, #12]
 800adca:	e7cd      	b.n	800ad68 <__smakebuf_r+0x18>
 800adcc:	0800ab5d 	.word	0x0800ab5d

0800add0 <_malloc_usable_size_r>:
 800add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add4:	1f18      	subs	r0, r3, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfbc      	itt	lt
 800adda:	580b      	ldrlt	r3, [r1, r0]
 800addc:	18c0      	addlt	r0, r0, r3
 800adde:	4770      	bx	lr

0800ade0 <_raise_r>:
 800ade0:	291f      	cmp	r1, #31
 800ade2:	b538      	push	{r3, r4, r5, lr}
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	d904      	bls.n	800adf4 <_raise_r+0x14>
 800adea:	2316      	movs	r3, #22
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adf6:	b112      	cbz	r2, 800adfe <_raise_r+0x1e>
 800adf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adfc:	b94b      	cbnz	r3, 800ae12 <_raise_r+0x32>
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 f830 	bl	800ae64 <_getpid_r>
 800ae04:	462a      	mov	r2, r5
 800ae06:	4601      	mov	r1, r0
 800ae08:	4620      	mov	r0, r4
 800ae0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0e:	f000 b817 	b.w	800ae40 <_kill_r>
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d00a      	beq.n	800ae2c <_raise_r+0x4c>
 800ae16:	1c59      	adds	r1, r3, #1
 800ae18:	d103      	bne.n	800ae22 <_raise_r+0x42>
 800ae1a:	2316      	movs	r3, #22
 800ae1c:	6003      	str	r3, [r0, #0]
 800ae1e:	2001      	movs	r0, #1
 800ae20:	e7e7      	b.n	800adf2 <_raise_r+0x12>
 800ae22:	2400      	movs	r4, #0
 800ae24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae28:	4628      	mov	r0, r5
 800ae2a:	4798      	blx	r3
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	e7e0      	b.n	800adf2 <_raise_r+0x12>

0800ae30 <raise>:
 800ae30:	4b02      	ldr	r3, [pc, #8]	; (800ae3c <raise+0xc>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f7ff bfd3 	b.w	800ade0 <_raise_r>
 800ae3a:	bf00      	nop
 800ae3c:	20000010 	.word	0x20000010

0800ae40 <_kill_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d07      	ldr	r5, [pc, #28]	; (800ae60 <_kill_r+0x20>)
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	4608      	mov	r0, r1
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	f7f7 f97b 	bl	8002148 <_kill>
 800ae52:	1c43      	adds	r3, r0, #1
 800ae54:	d102      	bne.n	800ae5c <_kill_r+0x1c>
 800ae56:	682b      	ldr	r3, [r5, #0]
 800ae58:	b103      	cbz	r3, 800ae5c <_kill_r+0x1c>
 800ae5a:	6023      	str	r3, [r4, #0]
 800ae5c:	bd38      	pop	{r3, r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000438 	.word	0x20000438

0800ae64 <_getpid_r>:
 800ae64:	f7f7 b968 	b.w	8002138 <_getpid>

0800ae68 <__sread>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	f000 f894 	bl	800af9c <_read_r>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	bfab      	itete	ge
 800ae78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae7c:	181b      	addge	r3, r3, r0
 800ae7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae82:	bfac      	ite	ge
 800ae84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae86:	81a3      	strhlt	r3, [r4, #12]
 800ae88:	bd10      	pop	{r4, pc}

0800ae8a <__swrite>:
 800ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	461f      	mov	r7, r3
 800ae90:	898b      	ldrh	r3, [r1, #12]
 800ae92:	05db      	lsls	r3, r3, #23
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4616      	mov	r6, r2
 800ae9a:	d505      	bpl.n	800aea8 <__swrite+0x1e>
 800ae9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea0:	2302      	movs	r3, #2
 800aea2:	2200      	movs	r2, #0
 800aea4:	f000 f868 	bl	800af78 <_lseek_r>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	4628      	mov	r0, r5
 800aeba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aebe:	f000 b817 	b.w	800aef0 <_write_r>

0800aec2 <__sseek>:
 800aec2:	b510      	push	{r4, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeca:	f000 f855 	bl	800af78 <_lseek_r>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	bf15      	itete	ne
 800aed4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aede:	81a3      	strheq	r3, [r4, #12]
 800aee0:	bf18      	it	ne
 800aee2:	81a3      	strhne	r3, [r4, #12]
 800aee4:	bd10      	pop	{r4, pc}

0800aee6 <__sclose>:
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	f000 b813 	b.w	800af14 <_close_r>
	...

0800aef0 <_write_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	; (800af10 <_write_r+0x20>)
 800aef4:	4604      	mov	r4, r0
 800aef6:	4608      	mov	r0, r1
 800aef8:	4611      	mov	r1, r2
 800aefa:	2200      	movs	r2, #0
 800aefc:	602a      	str	r2, [r5, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	f7f7 f959 	bl	80021b6 <_write>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_write_r+0x1e>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_write_r+0x1e>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	20000438 	.word	0x20000438

0800af14 <_close_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d06      	ldr	r5, [pc, #24]	; (800af30 <_close_r+0x1c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f7 f965 	bl	80021ee <_close>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_close_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_close_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	20000438 	.word	0x20000438

0800af34 <_fstat_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_fstat_r+0x20>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	f7f7 f960 	bl	8002206 <_fstat>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d102      	bne.n	800af50 <_fstat_r+0x1c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b103      	cbz	r3, 800af50 <_fstat_r+0x1c>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	bf00      	nop
 800af54:	20000438 	.word	0x20000438

0800af58 <_isatty_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_isatty_r+0x1c>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f7 f95f 	bl	8002226 <_isatty>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_isatty_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_isatty_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	20000438 	.word	0x20000438

0800af78 <_lseek_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	; (800af98 <_lseek_r+0x20>)
 800af7c:	4604      	mov	r4, r0
 800af7e:	4608      	mov	r0, r1
 800af80:	4611      	mov	r1, r2
 800af82:	2200      	movs	r2, #0
 800af84:	602a      	str	r2, [r5, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f7f7 f958 	bl	800223c <_lseek>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_lseek_r+0x1e>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_lseek_r+0x1e>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	20000438 	.word	0x20000438

0800af9c <_read_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	; (800afbc <_read_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f7 f8e6 	bl	800217c <_read>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_read_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_read_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	20000438 	.word	0x20000438

0800afc0 <atan2>:
 800afc0:	f000 b802 	b.w	800afc8 <__ieee754_atan2>
 800afc4:	0000      	movs	r0, r0
	...

0800afc8 <__ieee754_atan2>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	ec57 6b11 	vmov	r6, r7, d1
 800afd0:	4273      	negs	r3, r6
 800afd2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b158 <__ieee754_atan2+0x190>
 800afd6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800afda:	4333      	orrs	r3, r6
 800afdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800afe0:	4573      	cmp	r3, lr
 800afe2:	ec51 0b10 	vmov	r0, r1, d0
 800afe6:	ee11 8a10 	vmov	r8, s2
 800afea:	d80a      	bhi.n	800b002 <__ieee754_atan2+0x3a>
 800afec:	4244      	negs	r4, r0
 800afee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aff2:	4304      	orrs	r4, r0
 800aff4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aff8:	4574      	cmp	r4, lr
 800affa:	ee10 9a10 	vmov	r9, s0
 800affe:	468c      	mov	ip, r1
 800b000:	d907      	bls.n	800b012 <__ieee754_atan2+0x4a>
 800b002:	4632      	mov	r2, r6
 800b004:	463b      	mov	r3, r7
 800b006:	f7f5 f949 	bl	800029c <__adddf3>
 800b00a:	ec41 0b10 	vmov	d0, r0, r1
 800b00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b012:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b016:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b01a:	4334      	orrs	r4, r6
 800b01c:	d103      	bne.n	800b026 <__ieee754_atan2+0x5e>
 800b01e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b022:	f000 b89d 	b.w	800b160 <atan>
 800b026:	17bc      	asrs	r4, r7, #30
 800b028:	f004 0402 	and.w	r4, r4, #2
 800b02c:	ea53 0909 	orrs.w	r9, r3, r9
 800b030:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b034:	d107      	bne.n	800b046 <__ieee754_atan2+0x7e>
 800b036:	2c02      	cmp	r4, #2
 800b038:	d060      	beq.n	800b0fc <__ieee754_atan2+0x134>
 800b03a:	2c03      	cmp	r4, #3
 800b03c:	d1e5      	bne.n	800b00a <__ieee754_atan2+0x42>
 800b03e:	a142      	add	r1, pc, #264	; (adr r1, 800b148 <__ieee754_atan2+0x180>)
 800b040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b044:	e7e1      	b.n	800b00a <__ieee754_atan2+0x42>
 800b046:	ea52 0808 	orrs.w	r8, r2, r8
 800b04a:	d106      	bne.n	800b05a <__ieee754_atan2+0x92>
 800b04c:	f1bc 0f00 	cmp.w	ip, #0
 800b050:	da5f      	bge.n	800b112 <__ieee754_atan2+0x14a>
 800b052:	a13f      	add	r1, pc, #252	; (adr r1, 800b150 <__ieee754_atan2+0x188>)
 800b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b058:	e7d7      	b.n	800b00a <__ieee754_atan2+0x42>
 800b05a:	4572      	cmp	r2, lr
 800b05c:	d10f      	bne.n	800b07e <__ieee754_atan2+0xb6>
 800b05e:	4293      	cmp	r3, r2
 800b060:	f104 34ff 	add.w	r4, r4, #4294967295
 800b064:	d107      	bne.n	800b076 <__ieee754_atan2+0xae>
 800b066:	2c02      	cmp	r4, #2
 800b068:	d84c      	bhi.n	800b104 <__ieee754_atan2+0x13c>
 800b06a:	4b35      	ldr	r3, [pc, #212]	; (800b140 <__ieee754_atan2+0x178>)
 800b06c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b070:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b074:	e7c9      	b.n	800b00a <__ieee754_atan2+0x42>
 800b076:	2c02      	cmp	r4, #2
 800b078:	d848      	bhi.n	800b10c <__ieee754_atan2+0x144>
 800b07a:	4b32      	ldr	r3, [pc, #200]	; (800b144 <__ieee754_atan2+0x17c>)
 800b07c:	e7f6      	b.n	800b06c <__ieee754_atan2+0xa4>
 800b07e:	4573      	cmp	r3, lr
 800b080:	d0e4      	beq.n	800b04c <__ieee754_atan2+0x84>
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b088:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b08c:	da1e      	bge.n	800b0cc <__ieee754_atan2+0x104>
 800b08e:	2f00      	cmp	r7, #0
 800b090:	da01      	bge.n	800b096 <__ieee754_atan2+0xce>
 800b092:	323c      	adds	r2, #60	; 0x3c
 800b094:	db1e      	blt.n	800b0d4 <__ieee754_atan2+0x10c>
 800b096:	4632      	mov	r2, r6
 800b098:	463b      	mov	r3, r7
 800b09a:	f7f5 fbdf 	bl	800085c <__aeabi_ddiv>
 800b09e:	ec41 0b10 	vmov	d0, r0, r1
 800b0a2:	f000 f9fd 	bl	800b4a0 <fabs>
 800b0a6:	f000 f85b 	bl	800b160 <atan>
 800b0aa:	ec51 0b10 	vmov	r0, r1, d0
 800b0ae:	2c01      	cmp	r4, #1
 800b0b0:	d013      	beq.n	800b0da <__ieee754_atan2+0x112>
 800b0b2:	2c02      	cmp	r4, #2
 800b0b4:	d015      	beq.n	800b0e2 <__ieee754_atan2+0x11a>
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d0a7      	beq.n	800b00a <__ieee754_atan2+0x42>
 800b0ba:	a319      	add	r3, pc, #100	; (adr r3, 800b120 <__ieee754_atan2+0x158>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 f8ea 	bl	8000298 <__aeabi_dsub>
 800b0c4:	a318      	add	r3, pc, #96	; (adr r3, 800b128 <__ieee754_atan2+0x160>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	e014      	b.n	800b0f6 <__ieee754_atan2+0x12e>
 800b0cc:	a118      	add	r1, pc, #96	; (adr r1, 800b130 <__ieee754_atan2+0x168>)
 800b0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d2:	e7ec      	b.n	800b0ae <__ieee754_atan2+0xe6>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	e7e9      	b.n	800b0ae <__ieee754_atan2+0xe6>
 800b0da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0de:	4619      	mov	r1, r3
 800b0e0:	e793      	b.n	800b00a <__ieee754_atan2+0x42>
 800b0e2:	a30f      	add	r3, pc, #60	; (adr r3, 800b120 <__ieee754_atan2+0x158>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f8d6 	bl	8000298 <__aeabi_dsub>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	a10d      	add	r1, pc, #52	; (adr r1, 800b128 <__ieee754_atan2+0x160>)
 800b0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f6:	f7f5 f8cf 	bl	8000298 <__aeabi_dsub>
 800b0fa:	e786      	b.n	800b00a <__ieee754_atan2+0x42>
 800b0fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b128 <__ieee754_atan2+0x160>)
 800b0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b102:	e782      	b.n	800b00a <__ieee754_atan2+0x42>
 800b104:	a10c      	add	r1, pc, #48	; (adr r1, 800b138 <__ieee754_atan2+0x170>)
 800b106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10a:	e77e      	b.n	800b00a <__ieee754_atan2+0x42>
 800b10c:	2000      	movs	r0, #0
 800b10e:	2100      	movs	r1, #0
 800b110:	e77b      	b.n	800b00a <__ieee754_atan2+0x42>
 800b112:	a107      	add	r1, pc, #28	; (adr r1, 800b130 <__ieee754_atan2+0x168>)
 800b114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b118:	e777      	b.n	800b00a <__ieee754_atan2+0x42>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	33145c07 	.word	0x33145c07
 800b124:	3ca1a626 	.word	0x3ca1a626
 800b128:	54442d18 	.word	0x54442d18
 800b12c:	400921fb 	.word	0x400921fb
 800b130:	54442d18 	.word	0x54442d18
 800b134:	3ff921fb 	.word	0x3ff921fb
 800b138:	54442d18 	.word	0x54442d18
 800b13c:	3fe921fb 	.word	0x3fe921fb
 800b140:	0800b900 	.word	0x0800b900
 800b144:	0800b918 	.word	0x0800b918
 800b148:	54442d18 	.word	0x54442d18
 800b14c:	c00921fb 	.word	0xc00921fb
 800b150:	54442d18 	.word	0x54442d18
 800b154:	bff921fb 	.word	0xbff921fb
 800b158:	7ff00000 	.word	0x7ff00000
 800b15c:	00000000 	.word	0x00000000

0800b160 <atan>:
 800b160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	ec55 4b10 	vmov	r4, r5, d0
 800b168:	4bc3      	ldr	r3, [pc, #780]	; (800b478 <atan+0x318>)
 800b16a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b16e:	429e      	cmp	r6, r3
 800b170:	46ab      	mov	fp, r5
 800b172:	dd18      	ble.n	800b1a6 <atan+0x46>
 800b174:	4bc1      	ldr	r3, [pc, #772]	; (800b47c <atan+0x31c>)
 800b176:	429e      	cmp	r6, r3
 800b178:	dc01      	bgt.n	800b17e <atan+0x1e>
 800b17a:	d109      	bne.n	800b190 <atan+0x30>
 800b17c:	b144      	cbz	r4, 800b190 <atan+0x30>
 800b17e:	4622      	mov	r2, r4
 800b180:	462b      	mov	r3, r5
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f889 	bl	800029c <__adddf3>
 800b18a:	4604      	mov	r4, r0
 800b18c:	460d      	mov	r5, r1
 800b18e:	e006      	b.n	800b19e <atan+0x3e>
 800b190:	f1bb 0f00 	cmp.w	fp, #0
 800b194:	f300 8131 	bgt.w	800b3fa <atan+0x29a>
 800b198:	a59b      	add	r5, pc, #620	; (adr r5, 800b408 <atan+0x2a8>)
 800b19a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b19e:	ec45 4b10 	vmov	d0, r4, r5
 800b1a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a6:	4bb6      	ldr	r3, [pc, #728]	; (800b480 <atan+0x320>)
 800b1a8:	429e      	cmp	r6, r3
 800b1aa:	dc14      	bgt.n	800b1d6 <atan+0x76>
 800b1ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b1b0:	429e      	cmp	r6, r3
 800b1b2:	dc0d      	bgt.n	800b1d0 <atan+0x70>
 800b1b4:	a396      	add	r3, pc, #600	; (adr r3, 800b410 <atan+0x2b0>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	ee10 0a10 	vmov	r0, s0
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 f86c 	bl	800029c <__adddf3>
 800b1c4:	4baf      	ldr	r3, [pc, #700]	; (800b484 <atan+0x324>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f7f5 fcae 	bl	8000b28 <__aeabi_dcmpgt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d1e6      	bne.n	800b19e <atan+0x3e>
 800b1d0:	f04f 3aff 	mov.w	sl, #4294967295
 800b1d4:	e02b      	b.n	800b22e <atan+0xce>
 800b1d6:	f000 f963 	bl	800b4a0 <fabs>
 800b1da:	4bab      	ldr	r3, [pc, #684]	; (800b488 <atan+0x328>)
 800b1dc:	429e      	cmp	r6, r3
 800b1de:	ec55 4b10 	vmov	r4, r5, d0
 800b1e2:	f300 80bf 	bgt.w	800b364 <atan+0x204>
 800b1e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1ea:	429e      	cmp	r6, r3
 800b1ec:	f300 80a0 	bgt.w	800b330 <atan+0x1d0>
 800b1f0:	ee10 2a10 	vmov	r2, s0
 800b1f4:	ee10 0a10 	vmov	r0, s0
 800b1f8:	462b      	mov	r3, r5
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	f7f5 f84e 	bl	800029c <__adddf3>
 800b200:	4ba0      	ldr	r3, [pc, #640]	; (800b484 <atan+0x324>)
 800b202:	2200      	movs	r2, #0
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	2200      	movs	r2, #0
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b212:	4620      	mov	r0, r4
 800b214:	4629      	mov	r1, r5
 800b216:	f7f5 f841 	bl	800029c <__adddf3>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4630      	mov	r0, r6
 800b220:	4639      	mov	r1, r7
 800b222:	f7f5 fb1b 	bl	800085c <__aeabi_ddiv>
 800b226:	f04f 0a00 	mov.w	sl, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	4622      	mov	r2, r4
 800b230:	462b      	mov	r3, r5
 800b232:	4620      	mov	r0, r4
 800b234:	4629      	mov	r1, r5
 800b236:	f7f5 f9e7 	bl	8000608 <__aeabi_dmul>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	f7f5 f9e1 	bl	8000608 <__aeabi_dmul>
 800b246:	a374      	add	r3, pc, #464	; (adr r3, 800b418 <atan+0x2b8>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	a372      	add	r3, pc, #456	; (adr r3, 800b420 <atan+0x2c0>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f81f 	bl	800029c <__adddf3>
 800b25e:	4632      	mov	r2, r6
 800b260:	463b      	mov	r3, r7
 800b262:	f7f5 f9d1 	bl	8000608 <__aeabi_dmul>
 800b266:	a370      	add	r3, pc, #448	; (adr r3, 800b428 <atan+0x2c8>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	4632      	mov	r2, r6
 800b272:	463b      	mov	r3, r7
 800b274:	f7f5 f9c8 	bl	8000608 <__aeabi_dmul>
 800b278:	a36d      	add	r3, pc, #436	; (adr r3, 800b430 <atan+0x2d0>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f80d 	bl	800029c <__adddf3>
 800b282:	4632      	mov	r2, r6
 800b284:	463b      	mov	r3, r7
 800b286:	f7f5 f9bf 	bl	8000608 <__aeabi_dmul>
 800b28a:	a36b      	add	r3, pc, #428	; (adr r3, 800b438 <atan+0x2d8>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f804 	bl	800029c <__adddf3>
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	f7f5 f9b6 	bl	8000608 <__aeabi_dmul>
 800b29c:	a368      	add	r3, pc, #416	; (adr r3, 800b440 <atan+0x2e0>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f4 fffb 	bl	800029c <__adddf3>
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	f7f5 f9ad 	bl	8000608 <__aeabi_dmul>
 800b2ae:	a366      	add	r3, pc, #408	; (adr r3, 800b448 <atan+0x2e8>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	4689      	mov	r9, r1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 f9a4 	bl	8000608 <__aeabi_dmul>
 800b2c0:	a363      	add	r3, pc, #396	; (adr r3, 800b450 <atan+0x2f0>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f4 ffe7 	bl	8000298 <__aeabi_dsub>
 800b2ca:	4632      	mov	r2, r6
 800b2cc:	463b      	mov	r3, r7
 800b2ce:	f7f5 f99b 	bl	8000608 <__aeabi_dmul>
 800b2d2:	a361      	add	r3, pc, #388	; (adr r3, 800b458 <atan+0x2f8>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f4 ffde 	bl	8000298 <__aeabi_dsub>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	f7f5 f992 	bl	8000608 <__aeabi_dmul>
 800b2e4:	a35e      	add	r3, pc, #376	; (adr r3, 800b460 <atan+0x300>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f4 ffd5 	bl	8000298 <__aeabi_dsub>
 800b2ee:	4632      	mov	r2, r6
 800b2f0:	463b      	mov	r3, r7
 800b2f2:	f7f5 f989 	bl	8000608 <__aeabi_dmul>
 800b2f6:	a35c      	add	r3, pc, #368	; (adr r3, 800b468 <atan+0x308>)
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	f7f4 ffcc 	bl	8000298 <__aeabi_dsub>
 800b300:	4632      	mov	r2, r6
 800b302:	463b      	mov	r3, r7
 800b304:	f7f5 f980 	bl	8000608 <__aeabi_dmul>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4640      	mov	r0, r8
 800b30e:	4649      	mov	r1, r9
 800b310:	f7f4 ffc4 	bl	800029c <__adddf3>
 800b314:	4622      	mov	r2, r4
 800b316:	462b      	mov	r3, r5
 800b318:	f7f5 f976 	bl	8000608 <__aeabi_dmul>
 800b31c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	d14b      	bne.n	800b3be <atan+0x25e>
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	f7f4 ffb5 	bl	8000298 <__aeabi_dsub>
 800b32e:	e72c      	b.n	800b18a <atan+0x2a>
 800b330:	ee10 0a10 	vmov	r0, s0
 800b334:	4b53      	ldr	r3, [pc, #332]	; (800b484 <atan+0x324>)
 800b336:	2200      	movs	r2, #0
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f4 ffad 	bl	8000298 <__aeabi_dsub>
 800b33e:	4b51      	ldr	r3, [pc, #324]	; (800b484 <atan+0x324>)
 800b340:	4606      	mov	r6, r0
 800b342:	460f      	mov	r7, r1
 800b344:	2200      	movs	r2, #0
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f4 ffa7 	bl	800029c <__adddf3>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 fa81 	bl	800085c <__aeabi_ddiv>
 800b35a:	f04f 0a01 	mov.w	sl, #1
 800b35e:	4604      	mov	r4, r0
 800b360:	460d      	mov	r5, r1
 800b362:	e764      	b.n	800b22e <atan+0xce>
 800b364:	4b49      	ldr	r3, [pc, #292]	; (800b48c <atan+0x32c>)
 800b366:	429e      	cmp	r6, r3
 800b368:	da1d      	bge.n	800b3a6 <atan+0x246>
 800b36a:	ee10 0a10 	vmov	r0, s0
 800b36e:	4b48      	ldr	r3, [pc, #288]	; (800b490 <atan+0x330>)
 800b370:	2200      	movs	r2, #0
 800b372:	4629      	mov	r1, r5
 800b374:	f7f4 ff90 	bl	8000298 <__aeabi_dsub>
 800b378:	4b45      	ldr	r3, [pc, #276]	; (800b490 <atan+0x330>)
 800b37a:	4606      	mov	r6, r0
 800b37c:	460f      	mov	r7, r1
 800b37e:	2200      	movs	r2, #0
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f5 f940 	bl	8000608 <__aeabi_dmul>
 800b388:	4b3e      	ldr	r3, [pc, #248]	; (800b484 <atan+0x324>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	f7f4 ff86 	bl	800029c <__adddf3>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	f7f5 fa60 	bl	800085c <__aeabi_ddiv>
 800b39c:	f04f 0a02 	mov.w	sl, #2
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	e743      	b.n	800b22e <atan+0xce>
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	ee10 2a10 	vmov	r2, s0
 800b3ac:	4939      	ldr	r1, [pc, #228]	; (800b494 <atan+0x334>)
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f7f5 fa54 	bl	800085c <__aeabi_ddiv>
 800b3b4:	f04f 0a03 	mov.w	sl, #3
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	e737      	b.n	800b22e <atan+0xce>
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <atan+0x338>)
 800b3c0:	4e36      	ldr	r6, [pc, #216]	; (800b49c <atan+0x33c>)
 800b3c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b3c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b3ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800b3ce:	f7f4 ff63 	bl	8000298 <__aeabi_dsub>
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	f7f4 ff5f 	bl	8000298 <__aeabi_dsub>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b3e2:	f7f4 ff59 	bl	8000298 <__aeabi_dsub>
 800b3e6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	f6bf aed6 	bge.w	800b19e <atan+0x3e>
 800b3f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	e6d1      	b.n	800b19e <atan+0x3e>
 800b3fa:	a51d      	add	r5, pc, #116	; (adr r5, 800b470 <atan+0x310>)
 800b3fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b400:	e6cd      	b.n	800b19e <atan+0x3e>
 800b402:	bf00      	nop
 800b404:	f3af 8000 	nop.w
 800b408:	54442d18 	.word	0x54442d18
 800b40c:	bff921fb 	.word	0xbff921fb
 800b410:	8800759c 	.word	0x8800759c
 800b414:	7e37e43c 	.word	0x7e37e43c
 800b418:	e322da11 	.word	0xe322da11
 800b41c:	3f90ad3a 	.word	0x3f90ad3a
 800b420:	24760deb 	.word	0x24760deb
 800b424:	3fa97b4b 	.word	0x3fa97b4b
 800b428:	a0d03d51 	.word	0xa0d03d51
 800b42c:	3fb10d66 	.word	0x3fb10d66
 800b430:	c54c206e 	.word	0xc54c206e
 800b434:	3fb745cd 	.word	0x3fb745cd
 800b438:	920083ff 	.word	0x920083ff
 800b43c:	3fc24924 	.word	0x3fc24924
 800b440:	5555550d 	.word	0x5555550d
 800b444:	3fd55555 	.word	0x3fd55555
 800b448:	2c6a6c2f 	.word	0x2c6a6c2f
 800b44c:	bfa2b444 	.word	0xbfa2b444
 800b450:	52defd9a 	.word	0x52defd9a
 800b454:	3fadde2d 	.word	0x3fadde2d
 800b458:	af749a6d 	.word	0xaf749a6d
 800b45c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b460:	fe231671 	.word	0xfe231671
 800b464:	3fbc71c6 	.word	0x3fbc71c6
 800b468:	9998ebc4 	.word	0x9998ebc4
 800b46c:	3fc99999 	.word	0x3fc99999
 800b470:	54442d18 	.word	0x54442d18
 800b474:	3ff921fb 	.word	0x3ff921fb
 800b478:	440fffff 	.word	0x440fffff
 800b47c:	7ff00000 	.word	0x7ff00000
 800b480:	3fdbffff 	.word	0x3fdbffff
 800b484:	3ff00000 	.word	0x3ff00000
 800b488:	3ff2ffff 	.word	0x3ff2ffff
 800b48c:	40038000 	.word	0x40038000
 800b490:	3ff80000 	.word	0x3ff80000
 800b494:	bff00000 	.word	0xbff00000
 800b498:	0800b950 	.word	0x0800b950
 800b49c:	0800b930 	.word	0x0800b930

0800b4a0 <fabs>:
 800b4a0:	ec51 0b10 	vmov	r0, r1, d0
 800b4a4:	ee10 2a10 	vmov	r2, s0
 800b4a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4ac:	ec43 2b10 	vmov	d0, r2, r3
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <_init>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_fini>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr
